// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏

const alternativeConfigurations = [
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: –û—Å–Ω–æ–≤–Ω–æ–π TURN —Å–µ—Ä–≤–µ—Ä VK Cloud
    {
        name: "VK Cloud TURN",
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { 
                urls: 'turn:109.120.183.43:3478', 
                username: 'webrtc', 
                credential: 'password123' 
            },
            { 
                urls: 'turns:109.120.183.43:3479', 
                username: 'webrtc', 
                credential: 'password123' 
            }
        ]
    },
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ STUN —Å–µ—Ä–≤–µ—Ä—ã
    {
        name: "Multiple STUN",
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
            { urls: 'stun:stun2.l.google.com:19302' },
            { urls: 'stun:stun3.l.google.com:19302' },
            { urls: 'stun:stun4.l.google.com:19302' }
        ]
    },
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –¢–æ–ª—å–∫–æ Google STUN
    {
        name: "Google STUN Only",
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' }
        ]
    },
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 4: –ü—É–±–ª–∏—á–Ω—ã–µ TURN —Å–µ—Ä–≤–µ—Ä—ã
    {
        name: "Public TURN",
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { 
                urls: 'turn:openrelay.metered.ca:80', 
                username: 'openrelayproject', 
                credential: 'openrelayproject' 
            },
            { 
                urls: 'turn:openrelay.metered.ca:443', 
                username: 'openrelayproject', 
                credential: 'openrelayproject' 
            }
        ]
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ICE —Å–µ—Ä–≤–µ—Ä–æ–≤
async function testIceServers(config) {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${config.name}`);
    
    try {
        const pc = new RTCPeerConnection(config);
        
        return new Promise((resolve) => {
            const timeout = setTimeout(() => {
                pc.close();
                resolve({ success: false, error: 'Timeout' });
            }, 5000);
            
            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    clearTimeout(timeout);
                    pc.close();
                    resolve({ success: true, candidate: event.candidate });
                }
            };
            
            pc.onicegatheringstatechange = () => {
                if (pc.iceGatheringState === 'complete') {
                    clearTimeout(timeout);
                    pc.close();
                    resolve({ success: true, message: 'ICE gathering complete' });
                }
            };
            
            // –°–æ–∑–¥–∞–µ–º dummy offer –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ICE gathering
            pc.createOffer().then(offer => {
                pc.setLocalDescription(offer);
            }).catch(error => {
                clearTimeout(timeout);
                pc.close();
                resolve({ success: false, error: error.message });
            });
        });
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function selectBestConfiguration() {
    console.log('üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ICE —Å–µ—Ä–≤–µ—Ä–æ–≤...');
    
    for (let i = 0; i < alternativeConfigurations.length; i++) {
        const config = alternativeConfigurations[i];
        const result = await testIceServers(config);
        
        if (result.success) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.name}`);
            return config;
        } else {
            console.log(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${config.name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${result.error}`);
        }
    }
    
    console.log('‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é');
    return alternativeConfigurations[2]; // Google STUN Only
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.alternativeConfigurations = alternativeConfigurations;
window.testIceServers = testIceServers;
window.selectBestConfiguration = selectBestConfiguration;
