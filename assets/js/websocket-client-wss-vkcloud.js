// WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞ (VK Cloud WSS –≤–µ—Ä—Å–∏—è)
class WebSocketClientWSSVKCloud {
    constructor() {
        this.ws = null;
        this.userId = null;
        this.sessionId = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        
        // Callbacks –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.onIncomingCall = null;
        this.onCallAnswered = null;
        this.onCallEnded = null;
        this.onIceCandidate = null;
        this.onOffer = null;
        this.onAnswer = null;
        this.onError = null;
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HTTPS WebSocket —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ VK Cloud
    connect(userId) {
        this.userId = userId;
        
        try {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ HTTPS WebSocket —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ VK Cloud
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º wss:// –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.ws = new WebSocket('wss://lizamsg.ru:8080');
            
            this.ws.onopen = () => {
                console.log('üîê WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫ VK Cloud —Å–µ—Ä–≤–µ—Ä—É (HTTPS) –Ω–∞ –ø–æ—Ä—Ç—É 8080');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                
                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è
                this.authenticate();
            };
            
            this.ws.onmessage = (event) => {
                this.handleMessage(event.data);
            };
            
            this.ws.onclose = () => {
                console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                this.isConnected = false;
                this.handleReconnect();
            };
            
            this.ws.onerror = (error) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                this.isConnected = false;
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:', error);
            this.handleError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        }
    }
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    authenticate() {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'auth',
                userId: this.userId
            }));
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    handleMessage(data) {
        try {
            const message = JSON.parse(data);
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.type);
            
            switch (message.type) {
                case 'auth_success':
                    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                    break;
                    
                case 'incoming_call':
                    console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', message.callerId);
                    if (this.onIncomingCall) {
                        this.onIncomingCall(message.callerId, message.callId);
                    }
                    break;
                    
                case 'call_answered':
                    console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', message.userId);
                    if (this.onCallAnswered) {
                        this.onCallAnswered(message.userId, message.callId);
                    }
                    break;
                    
                case 'call_ended':
                    console.log('üîö –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', message.userId);
                    if (this.onCallEnded) {
                        this.onCallEnded(message.userId);
                    }
                    break;
                    
                case 'ice_candidate':
                    console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç:', message.userId);
                    if (this.onIceCandidate) {
                        this.onIceCandidate(message.userId, message.candidate);
                    }
                    break;
                    
                case 'offer':
                    console.log('üì§ –ü–æ–ª—É—á–µ–Ω WebRTC offer –æ—Ç:', message.userId);
                    if (this.onOffer) {
                        this.onOffer(message.userId, message.offer);
                    }
                    break;
                    
                case 'answer':
                    console.log('üì• –ü–æ–ª—É—á–µ–Ω WebRTC answer –æ—Ç:', message.userId);
                    if (this.onAnswer) {
                        this.onAnswer(message.userId, message.answer);
                    }
                    break;
                    
                case 'error':
                    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', message.message);
                    this.handleError(message.message);
                    break;
                    
                default:
                    console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
    sendCallRequest(receiverId, callId) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'call_request',
                receiverId: receiverId,
                callId: callId
            }));
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
    sendCallAnswer(callerId, callId) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'call_answer',
                callerId: callerId,
                callId: callId
            }));
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    sendIceCandidate(targetId, candidate) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'ice_candidate',
                targetId: targetId,
                candidate: candidate
            }));
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ WebRTC offer
    sendOffer(targetId, offer) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'offer',
                targetId: targetId,
                offer: offer
            }));
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ WebRTC answer
    sendAnswer(targetId, answer) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'answer',
                targetId: targetId,
                answer: answer
            }));
        }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
    endCall(targetId) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'end_call',
                targetId: targetId
            }));
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    handleReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
            
            setTimeout(() => {
                this.connect(this.userId);
            }, 2000 * this.reconnectAttempts);
        } else {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.handleError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    handleError(message) {
        if (this.onError) {
            this.onError(message);
        }
    }
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    disconnect() {
        if (this.ws) {
            this.ws.close();
        }
        this.isConnected = false;
        this.userId = null;
        this.sessionId = null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    getConnectionStatus() {
        return {
            isConnected: this.isConnected,
            userId: this.userId,
            sessionId: this.sessionId
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.WebSocketClientWSSVKCloud = WebSocketClientWSSVKCloud;
