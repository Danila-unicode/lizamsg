<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç–ª–∞–¥–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ - –ü–æ—à–∞–≥–æ–≤–æ</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        .debug-container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .debug-section {
            background: white;
            margin: 20px 0;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #ddd;
        }
        
        .debug-buttons {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }
        
        .debug-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .btn-primary { background: #007bff; color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-info { background: #17a2b8; color: white; }
        .btn-warning { background: #ffc107; color: black; }
        .btn-danger { background: #dc3545; color: white; }
        
        .debug-log {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
            font-family: monospace;
            font-size: 12px;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        
        .image-preview {
            max-width: 150px;
            max-height: 150px;
            border: 2px solid #ddd;
            border-radius: 8px;
            margin: 10px 0;
            object-fit: cover;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—Ä–µ–∑–∫–∏ */
        .crop-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .crop-modal-content {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            max-width: 90%;
            max-height: 90%;
            overflow: hidden;
            position: relative;
        }

        .crop-modal-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #f8f9fa;
        }

        .crop-modal-header h3 {
            margin: 0;
            color: #333;
            font-size: 18px;
            font-weight: 600;
        }

        .crop-close {
            background: none;
            border: none;
            font-size: 24px;
            color: #666;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s;
        }

        .crop-close:hover {
            background: #f0f0f0;
            color: #333;
        }

        .crop-container {
            position: relative;
            display: inline-block;
            margin: 20px;
            border: 2px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            background: #f9f9f9;
        }

        .crop-container img {
            display: block;
            max-width: 100%;
            max-height: 400px;
            object-fit: contain;
            user-select: none;
            -webkit-user-drag: none;
        }

        .crop-area {
            position: absolute;
            border: 3px solid #2196F3;
            background: rgba(33, 150, 243, 0.15);
            cursor: move;
            user-select: none;
            box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.8);
            border-radius: 4px;
            z-index: 10;
        }
        
        .crop-area:hover {
            border-color: #1976D2;
            background: rgba(25, 118, 210, 0.2);
        }

        .crop-buttons {
            padding: 20px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            background: #f8f9fa;
            border-top: 1px solid #eee;
        }

        .crop-cancel,
        .crop-confirm {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            min-width: 80px;
        }

        .crop-cancel {
            background: #f5f5f5;
            color: #666;
            border: 1px solid #ddd;
        }

        .crop-cancel:hover {
            background: #e9e9e9;
            color: #333;
        }

        .crop-confirm {
            background: #2196F3;
            color: white;
        }

        .crop-confirm:hover {
            background: #1976D2;
        }
    </style>
</head>
<body>
    <div class="debug-container">
        <h1>üîß –û—Ç–ª–∞–¥–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ - –ü–æ—à–∞–≥–æ–≤–æ</h1>
        
        <!-- –û–±—â–µ–µ –æ–∫–Ω–æ –ª–æ–≥–æ–≤ -->
        <div class="debug-section">
            <h2>üìã –û–±—â–∏–µ –ª–æ–≥–∏</h2>
            <div class="debug-buttons">
                <button class="debug-btn btn-danger" onclick="clearAllLogs()">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏</button>
                <button class="debug-btn btn-info" onclick="scrollToTop()">–í –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</button>
                <button class="debug-btn btn-info" onclick="scrollToStep(1)">–®–∞–≥ 1</button>
                <button class="debug-btn btn-info" onclick="scrollToStep(2)">–®–∞–≥ 2</button>
                <button class="debug-btn btn-info" onclick="scrollToStep(3)">–®–∞–≥ 3</button>
                <button class="debug-btn btn-info" onclick="scrollToStep(4)">–®–∞–≥ 4</button>
                <button class="debug-btn btn-info" onclick="scrollToStep(5)">–®–∞–≥ 5</button>
            </div>
            <div id="globalLog" class="debug-log"></div>
        </div>
        
        <!-- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ -->
        <div class="debug-section">
            <h2>–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</h2>
            <input type="file" id="fileInput" accept="image/*">
            <div class="debug-buttons">
                <button class="debug-btn btn-primary" onclick="loadFile()">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</button>
                <button class="debug-btn btn-success" onclick="scrollToStep(2)">–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Üí</button>
                <button class="debug-btn btn-info" onclick="copyLogs(1)">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏</button>
            </div>
            <div id="log1" class="debug-log"></div>
            <div id="imagePreview1"></div>
        </div>

        <!-- –®–∞–≥ 2: –°–∂–∞—Ç–∏–µ –¥–æ 1000px -->
        <div class="debug-section">
            <h2>–®–∞–≥ 2: –°–∂–∞—Ç–∏–µ –¥–æ 1000px</h2>
            <div class="debug-buttons">
                <button class="debug-btn btn-success" onclick="compressImage()">–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
                <button class="debug-btn btn-success" onclick="scrollToStep(3)">–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Üí</button>
                <button class="debug-btn btn-info" onclick="copyLogs(2)">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏</button>
            </div>
            <div id="log2" class="debug-log"></div>
            <div id="imagePreview2"></div>
        </div>

        <!-- –®–∞–≥ 3: –û–±—Ä–µ–∑–∫–∞ -->
        <div class="debug-section">
            <h2>–®–∞–≥ 3: –û–±—Ä–µ–∑–∫–∞</h2>
            <div class="debug-buttons">
                <button class="debug-btn btn-info" onclick="showCropModal()">–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–µ–∑–∫—É</button>
                <button class="debug-btn btn-success" onclick="scrollToStep(4)">–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Üí</button>
                <button class="debug-btn btn-info" onclick="copyLogs(3)">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏</button>
            </div>
            <div id="log3" class="debug-log"></div>
            <div id="imagePreview3"></div>
        </div>

        <!-- –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (100x100) -->
        <div class="debug-section">
            <h2>–®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (100x100)</h2>
            <div class="debug-buttons">
                <button class="debug-btn btn-warning" onclick="createFinalAvatar()">–°–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä</button>
                <button class="debug-btn btn-success" onclick="uploadToServer()">–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä</button>
                <button class="debug-btn btn-success" onclick="scrollToStep(5)">–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Üí</button>
                <button class="debug-btn btn-info" onclick="copyLogs(4)">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏</button>
            </div>
            <div id="log4" class="debug-log"></div>
            <div id="imagePreview4"></div>
        </div>

        <!-- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ -->
        <div class="debug-section">
            <h2>–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h2>
            <div class="debug-buttons">
                <button class="debug-btn btn-info" onclick="checkServerFiles()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</button>
                <button class="debug-btn btn-info" onclick="copyLogs(5)">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏</button>
            </div>
            <div id="log5" class="debug-log"></div>
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ -->
    <div id="cropModal" class="crop-modal" style="display: none;">
        <div class="crop-modal-content">
            <div class="crop-modal-header">
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞</h3>
                <button onclick="closeCropModal()" class="crop-close">&times;</button>
            </div>
            <div class="crop-container">
                <img id="cropImage" src="" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏">
                <div id="cropArea" class="crop-area"></div>
            </div>
            <div class="crop-buttons">
                <button onclick="closeCropModal()" class="crop-cancel">–û—Ç–º–µ–Ω–∞</button>
                <button onclick="cropImage()" class="crop-confirm">–û–±—Ä–µ–∑–∞—Ç—å</button>
            </div>
        </div>
    </div>

    <script>
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        let originalImage = null;
        let compressedImage = null;
        let croppedImage = null;
        let finalAvatar = null;
        let cropData = { x: 0, y: 0, size: 200 };
        let isDragging = false;
        let dragStart = { x: 0, y: 0 };

        // –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        function log(step, message) {
            const timestamp = new Date().toLocaleTimeString();
            const logMessage = `[${timestamp}] ${message}`;
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥
            const stepLog = document.getElementById(`log${step}`);
            if (stepLog) {
                stepLog.textContent += logMessage + '\n';
                stepLog.scrollTop = stepLog.scrollHeight;
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –ª–æ–≥
            const globalLog = document.getElementById('globalLog');
            if (globalLog) {
                globalLog.textContent += `–®–∞–≥ ${step}: ${logMessage}\n`;
                globalLog.scrollTop = globalLog.scrollHeight;
            }
            
            console.log(`–®–∞–≥ ${step}:`, message);
        }

        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
        function clearAllLogs() {
            for (let i = 1; i <= 5; i++) {
                const log = document.getElementById(`log${i}`);
                if (log) log.textContent = '';
            }
            const globalLog = document.getElementById('globalLog');
            if (globalLog) globalLog.textContent = '';
        }

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –Ω–∞—á–∞–ª–æ
        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É
        function scrollToStep(step) {
            const sections = document.querySelectorAll('.debug-section');
            if (sections[step]) {
                sections[step].scrollIntoView({ behavior: 'smooth' });
            }
        }

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        function copyLogs(step) {
            const logElement = document.getElementById(`log${step}`);
            const globalLog = document.getElementById('globalLog');
            
            let logsToCopy = '';
            if (logElement) {
                logsToCopy += `=== –®–∞–≥ ${step} ===\n`;
                logsToCopy += logElement.textContent;
                logsToCopy += '\n\n';
            }
            
            if (globalLog) {
                logsToCopy += '=== –û–±—â–∏–µ –ª–æ–≥–∏ ===\n';
                logsToCopy += globalLog.textContent;
            }
            
            navigator.clipboard.writeText(logsToCopy).then(() => {
                log(step, 'üìã –õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            }).catch(err => {
                log(step, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ' + err.message);
            });
        }

        // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        function loadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) {
                log(1, '‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
                return;
            }
            
            log(1, `üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${file.name}`);
            log(1, `üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file.size} –±–∞–π—Ç`);
            log(1, `üé® –¢–∏–ø —Ñ–∞–π–ª–∞: ${file.type}`);
            
            const reader = new FileReader();
            reader.onload = function(e) {
                originalImage = new Image();
                originalImage.onload = function() {
                    log(1, `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${originalImage.width} x ${originalImage.height}`);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                    const preview = document.getElementById('imagePreview1');
                    preview.innerHTML = `<img src="${e.target.result}" class="image-preview" alt="–û—Ä–∏–≥–∏–Ω–∞–ª">`;
                    
                    log(1, '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
                };
                originalImage.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        // –®–∞–≥ 2: –°–∂–∞—Ç–∏–µ –¥–æ 1000px
        function compressImage() {
            if (!originalImage) {
                log(2, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª');
                return;
            }
            
            log(2, `üîÑ –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 1000px`);
            log(2, `üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${originalImage.width} x ${originalImage.height}`);
            
            const maxSize = 1000;
            let { width, height } = originalImage;
            
            if (width > maxSize || height > maxSize) {
                const scale = Math.min(maxSize / width, maxSize / height);
                width = Math.floor(width * scale);
                height = Math.floor(height * scale);
                log(2, `üìê –ú–∞—Å—à—Ç–∞–±: ${scale.toFixed(3)}`);
            } else {
                log(2, 'üìê –°–∂–∞—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            }
            
            log(2, `üìè –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${width} x ${height}`);
            
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = width;
            canvas.height = height;
            ctx.drawImage(originalImage, 0, 0, width, height);
            
            compressedImage = canvas.toDataURL('image/jpeg', 0.8);
            log(2, `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ –¥–æ: ${width} x ${height}`);
            log(2, `üìä –†–∞–∑–º–µ—Ä Data URL: ${compressedImage.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            const preview = document.getElementById('imagePreview2');
            preview.innerHTML = `<img src="${compressedImage}" class="image-preview" alt="–°–∂–∞—Ç–æ–µ">`;
        }

        // –®–∞–≥ 3: –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—Ä–µ–∑–∫–∏
        function showCropModal() {
            if (!compressedImage) {
                log(3, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∂–º–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }
            
            log(3, 'üñºÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—Ä–µ–∑–∫–∏');
            
            const modal = document.getElementById('cropModal');
            const cropImage = document.getElementById('cropImage');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.style.display = 'flex';
            
            // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cropImage.src = compressedImage;
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤
            const checkImageLoad = () => {
                if (cropImage.offsetWidth > 0 && cropImage.offsetHeight > 0) {
                    log(3, `üìè –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ: ${cropImage.offsetWidth} x ${cropImage.offsetHeight}`);
                    
                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏
                    const imgWidth = cropImage.offsetWidth;
                    const imgHeight = cropImage.offsetHeight;
                    const cropSize = Math.min(imgWidth, imgHeight, 200);
                    
                    cropData = {
                        x: (imgWidth - cropSize) / 2,
                        y: (imgHeight - cropSize) / 2,
                        size: cropSize
                    };
                    
                    log(3, `üìê –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏: x=${cropData.x}, y=${cropData.y}, size=${cropData.size}`);
                    updateCropArea();
                    log(3, '‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ');
                } else {
                    log(3, `‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... (${cropImage.offsetWidth} x ${cropImage.offsetHeight})`);
                    setTimeout(checkImageLoad, 100);
                }
            };
            
            cropImage.onload = checkImageLoad;
            
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            if (cropImage.complete) {
                checkImageLoad();
            }
        }

        // –û–±–Ω–æ–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏
        function updateCropArea() {
            const cropArea = document.getElementById('cropArea');
            const cropImage = document.getElementById('cropImage');
            
            cropArea.style.left = cropData.x + 'px';
            cropArea.style.top = cropData.y + 'px';
            cropArea.style.width = cropData.size + 'px';
            cropArea.style.height = cropData.size + 'px';
            
            log(3, `üìç –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: left=${cropArea.style.left}, top=${cropArea.style.top}`);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        document.getElementById('cropArea').addEventListener('mousedown', function(e) {
            isDragging = true;
            const cropImage = document.getElementById('cropImage');
            const rect = cropImage.getBoundingClientRect();
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            dragStart.x = e.clientX - rect.left - cropData.x;
            dragStart.y = e.clientY - rect.top - cropData.y;
            log(3, `üñ±Ô∏è –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è: dragStart=(${dragStart.x}, ${dragStart.y}), cropData=(${cropData.x}, ${cropData.y})`);
        });

        document.addEventListener('mousemove', function(e) {
            if (isDragging) {
                const cropImage = document.getElementById('cropImage');
                const rect = cropImage.getBoundingClientRect();
                
                // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                const newX = e.clientX - rect.left - dragStart.x;
                const newY = e.clientY - rect.top - dragStart.y;
                
                log(3, `üñ±Ô∏è –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ: newX=${newX}, newY=${newY}, rect.left=${rect.left}, rect.top=${rect.top}`);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                cropData.x = Math.max(0, Math.min(cropImage.offsetWidth - cropData.size, newX));
                cropData.y = Math.max(0, Math.min(cropImage.offsetHeight - cropData.size, newY));
                
                log(3, `üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${cropData.x}, y=${cropData.y}`);
                updateCropArea();
            }
        });

        document.addEventListener('mouseup', function() {
            if (isDragging) {
                isDragging = false;
                log(3, `üñ±Ô∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è: cropData=(${cropData.x}, ${cropData.y})`);
            }
        });

        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        function closeCropModal() {
            document.getElementById('cropModal').style.display = 'none';
            log(3, '‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
        }

        // –û–±—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        function cropImage() {
            log(3, `‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏: x=${cropData.x}, y=${cropData.y}, size=${cropData.size}`);
            
            const cropImage = document.getElementById('cropImage');
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∂–∞—Ç–æ–µ –¥–æ 1000px)
            const sourceImage = new Image();
            sourceImage.onload = function() {
                log(3, `üìè –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${sourceImage.width} x ${sourceImage.height}`);
                log(3, `üìè –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${cropImage.offsetWidth} x ${cropImage.offsetHeight}`);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –º–µ–∂–¥—É –∏—Å—Ö–æ–¥–Ω—ã–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                const scaleX = sourceImage.width / cropImage.offsetWidth;
                const scaleY = sourceImage.height / cropImage.offsetHeight;
                
                log(3, `üìê –ú–∞—Å—à—Ç–∞–±: scaleX=${scaleX.toFixed(3)}, scaleY=${scaleY.toFixed(3)}`);
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const sourceX = cropData.x * scaleX;
                const sourceY = cropData.y * scaleY;
                const sourceSize = cropData.size * scaleX;
                
                log(3, `üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: x=${sourceX.toFixed(1)}, y=${sourceY.toFixed(1)}, size=${sourceSize.toFixed(1)}`);
                
                canvas.width = cropData.size;
                canvas.height = cropData.size;
                
                ctx.drawImage(
                    sourceImage,
                    sourceX, sourceY, sourceSize, sourceSize,
                    0, 0, cropData.size, cropData.size
                );
                
                croppedImage = new Image();
                croppedImage.onload = function() {
                    log(3, `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ: ${croppedImage.width} x ${croppedImage.height}`);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                    const preview = document.getElementById('imagePreview3');
                    preview.innerHTML = `<img src="${canvas.toDataURL('image/jpeg', 0.9)}" class="image-preview" alt="–û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ">`;
                    
                    closeCropModal();
                };
                croppedImage.src = canvas.toDataURL('image/jpeg', 0.9);
            };
            sourceImage.src = compressedImage;
        }

        // –®–∞–≥ 4: –°–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        function createFinalAvatar() {
            if (!croppedImage) {
                log(4, '‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–µ–∂—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }
            
            log(4, `üîÑ –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä 100x100px`);
            log(4, `üìè –†–∞–∑–º–µ—Ä –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${croppedImage.width} x ${croppedImage.height}`);
            
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 100;
            canvas.height = 100;
            
            ctx.drawImage(croppedImage, 0, 0, 100, 100);
            
            finalAvatar = canvas.toDataURL('image/jpeg', 0.9);
            log(4, `‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω: 100x100px`);
            log(4, `üìä –†–∞–∑–º–µ—Ä Data URL: ${finalAvatar.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            const preview = document.getElementById('imagePreview4');
            preview.innerHTML = `<img src="${finalAvatar}" class="image-preview" alt="–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä">`;
        }

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        function uploadToServer() {
            if (!finalAvatar) {
                log(4, '‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä');
                return;
            }
            
            log(4, `üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º data URL –≤ blob
            const byteString = atob(finalAvatar.split(',')[1]);
            const mimeString = finalAvatar.split(',')[0].split(':')[1].split(';')[0];
            const ab = new ArrayBuffer(byteString.length);
            const ia = new Uint8Array(ab);
            for (let i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            const blob = new Blob([ab], { type: mimeString });
            
            log(4, `üîç Blob —Å–æ–∑–¥–∞–Ω: —Ä–∞–∑–º–µ—Ä ${blob.size} –±–∞–π—Ç, —Ç–∏–ø ${blob.type}`);
            
            const formData = new FormData();
            formData.append('avatar', blob, 'debug_avatar.jpg');
            formData.append('user_id', '28'); // –¢–µ—Å—Ç–æ–≤—ã–π ID
            
            log(4, `üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData —Å user_id=28`);
            
            fetch('avtr/api/upload_avatar.php', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                log(4, `üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
                return response.json();
            })
            .then(result => {
                log(4, `üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(result)}`);
                if (result.success) {
                    log(4, `‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${result.avatar_path}`);
                } else {
                    log(4, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${result.message}`);
                }
            })
            .catch(error => {
                log(4, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        function checkServerFiles() {
            log(5, `üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...`);
            
            fetch('api/check_avatars.php')
            .then(response => response.text())
            .then(html => {
                log(5, `üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:`);
                log(5, html);
            })
            .catch(error => {
                log(5, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
            });
        }
    </script>
</body>
</html>
