// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï P2P –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò =====

// –ó–∞–∫—Ä—ã—Ç–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function closeP2PConnection(friendUsername) {
    if (p2pConnections[friendUsername]) {
        const connection = p2pConnections[friendUsername];
        
        if (connection.dataChannel) {
            connection.dataChannel.close();
        }
        
        if (connection.connection) {
            connection.connection.close();
        }
        
        if (connection.connectionTimeout) {
            clearTimeout(connection.connectionTimeout);
        }
        
        delete p2pConnections[friendUsername];
        console.log(`üîå P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –∑–∞–∫—Ä—ã—Ç–æ`);
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ping-–ø–æ–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    stopPingPongMonitoring(friendUsername);
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    clearConnectionTimeout(friendUsername);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
function shouldMaintainP2PConnection(friendUsername) {
    const connection = p2pConnections[friendUsername];
    if (!connection) return false;
    
    const now = Date.now();
    const lastActivity = connection.lastActivity || 0;
    const inactiveTime = now - lastActivity;
    
    // –ï—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    return inactiveTime < P2P_CONFIG.inactiveTimeout;
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
function startP2PCleanup() {
    setInterval(() => {
        Object.keys(p2pConnections).forEach(friendUsername => {
            if (!shouldMaintainP2PConnection(friendUsername)) {
                console.log(`üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername}`);
                closeP2PConnection(friendUsername);
            }
        });
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}
