// ===== P2P –§–£–ù–ö–¶–ò–ò =====

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–æ–º
// –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ establishP2PConnection
const establishingConnections = new Set();

async function establishP2PConnection(friendUsername) {
    console.log(`üîß establishP2PConnection –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ${friendUsername}`);
    console.log(`üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π:`, {
        isEstablishing: establishingConnections.has(friendUsername),
        hasConnection: !!p2pConnections[friendUsername],
        connectionStatus: p2pConnections[friendUsername]?.status,
        establishingConnections: Array.from(establishingConnections)
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (establishingConnections.has(friendUsername)) {
        console.log(`‚ö†Ô∏è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connected') {
        console.log(`P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ`);
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    establishingConnections.add(friendUsername);
    
    try {
        
        updateChatStatus('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...', '');
        
        // –°–æ–∑–¥–∞–µ–º RTCPeerConnection
        const connection = new RTCPeerConnection({
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' }
            ],
            iceCandidatePoolSize: 5 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—É–ª ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        });
        
        // –°–æ–∑–¥–∞–µ–º Data Channel
        const dataChannel = connection.createDataChannel('chat', {
            ordered: true
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Data Channel
        setupDataChannelHandlers(dataChannel, friendUsername);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        setupP2PHandlers(connection, dataChannel, friendUsername);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        p2pConnections[friendUsername] = {
            connection: connection,
            dataChannel: dataChannel,
            status: 'connecting',
            lastActivity: Date.now(),
            connectionTimeout: null
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)
        p2pConnections[friendUsername].connectionTimeout = setTimeout(() => {
            if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connecting') {
                console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${friendUsername}`);
                updateChatStatus('–¢–∞–π–º–∞—É—Ç P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
                closeP2PConnection(friendUsername);
            }
        }, 30000);
        
        // –°–æ–∑–¥–∞–µ–º offer
        console.log(`üì§ –°–æ–∑–¥–∞–µ–º offer –¥–ª—è ${friendUsername}`);
        const offerStartTime = Date.now();
        const offer = await connection.createOffer();
        await connection.setLocalDescription(offer);
        console.log(`‚è±Ô∏è Offer —Å–æ–∑–¥–∞–Ω –∑–∞ ${Date.now() - offerStartTime}ms`);
        console.log(`‚úÖ Offer —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${friendUsername}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        sendP2PSignal('offer', {
            to: friendUsername,
            offer: offer
        });
        console.log(`üì§ Offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ ${friendUsername}`);
        
        // –ï—Å–ª–∏ Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ STUN
        if (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN) {
            console.log('‚ö†Ô∏è Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ STUN —Å–µ—Ä–≤–µ—Ä—ã');
            updateChatStatus('P2P —á–µ—Ä–µ–∑ STUN —Å–µ—Ä–≤–µ—Ä—ã...', '');
        }
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ offer
        establishingConnections.delete(friendUsername);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        updateChatStatus('–û—à–∏–±–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    } finally {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        establishingConnections.delete(friendUsername);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function setupP2PHandlers(connection, dataChannel, friendUsername) {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    connection.ondatachannel = (event) => {
        const incomingChannel = event.channel;
        setupDataChannelHandlers(incomingChannel, friendUsername);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    connection.onicecandidate = (event) => {
        if (event.candidate) {
            sendP2PSignal('ice-candidate', {
                to: friendUsername,
                candidate: event.candidate
            });
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connection.onconnectionstatechange = () => {
        const state = connection.connectionState;
        console.log(`P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername}: ${state}`);
        
        if (state === 'connected') {
            if (p2pConnections[friendUsername]) {
                p2pConnections[friendUsername].status = 'connected';
            }
            updateChatStatus('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'connected');
            
            // –ù–∞—á–∏–Ω–∞–µ–º ping-–ø–æ–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            startPingPongMonitoring(friendUsername);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            sendQueuedMessages(friendUsername);
        } else if (state === 'disconnected' || state === 'failed') {
            if (p2pConnections[friendUsername]) {
                p2pConnections[friendUsername].status = 'disconnected';
            }
            updateChatStatus('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ping-–ø–æ–Ω–≥
            stopPingPongMonitoring(friendUsername);
        }
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Data Channel
    setupDataChannelHandlers(dataChannel, friendUsername);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Data Channel
function setupDataChannelHandlers(dataChannel, friendUsername) {
    if (!dataChannel) {
        console.log(`‚ö†Ô∏è Data Channel –¥–ª—è ${friendUsername} –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤`);
        return;
    }
    
    dataChannel.onopen = () => {
        console.log(`Data Channel —Å ${friendUsername} –æ—Ç–∫—Ä—ã—Ç`);
        if (p2pConnections[friendUsername]) {
            p2pConnections[friendUsername].status = 'connected';
            p2pConnections[friendUsername].dataChannel = dataChannel; // –°–æ—Ö—Ä–∞–Ω—è–µ–º Data Channel
            p2pConnections[friendUsername].lastActivity = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
        updateChatStatus('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'connected');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        sendQueuedMessages(friendUsername);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º ping-–ø–æ–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        startPingPongMonitoring(friendUsername);
    };
    
    dataChannel.onclose = () => {
        console.log(`Data Channel —Å ${friendUsername} –∑–∞–∫—Ä—ã—Ç`);
        if (p2pConnections[friendUsername]) {
            p2pConnections[friendUsername].status = 'disconnected';
        }
    };
    
    dataChannel.onmessage = (event) => {
        try {
            const message = JSON.parse(event.data);
            handleP2PMessage(message, friendUsername);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ P2P —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ chat —Å–µ—Ä–≤–µ—Ä
function sendP2PSignal(type, data) {
    if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
        window.chatWs.send(JSON.stringify({
            type: `p2p_${type}`,
            from: currentUser.id,
            to: data.to,
            data: data
        }));
        console.log(`üì§ P2P —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${type} –∫ ${data.to}`);
    } else {
        console.log(`‚ö†Ô∏è Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è P2P —Å–∏–≥–Ω–∞–ª–∞ ${type}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö P2P —Å–∏–≥–Ω–∞–ª–æ–≤
function handleP2PSignal(signal) {
    const { type, from, data } = signal;
    
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω P2P —Å–∏–≥–Ω–∞–ª: ${type} –æ—Ç ${from}`);
    
    switch (type) {
        case 'p2p_offer':
            handleP2POffer(from, data.offer);
            break;
        case 'p2p_answer':
            handleP2PAnswer(from, data.answer);
            break;
        case 'p2p_ice-candidate':
            handleP2PICECandidate(from, data.candidate);
            break;
        case 'p2p_ping':
            handleP2PPing(from);
            break;
        case 'p2p_pong':
            handleP2PPong(from);
            break;
        case 'p2p_error':
            console.log(`‚ùå P2P –æ—à–∏–±–∫–∞: ${data ? data.error : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            updateChatStatus('P2P –æ—à–∏–±–∫–∞: ' + (data ? data.error : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
            if (data && data.error === '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω') {
                console.log('üì¨ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏');
                // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –≤ sendChatMessage
                // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            }
            break;
        default:
            console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π P2P —Å–∏–≥–Ω–∞–ª: ${type}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P offer
async function handleP2POffer(from, offer) {
    try {
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω P2P offer –æ—Ç ${from}`);
        
        if (!p2pConnections[from]) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ
            const connection = new RTCPeerConnection({
                iceServers: [
                    { urls: 'stun:stun.l.google.com:19302' },
                    { urls: 'stun:stun1.l.google.com:19302' }
                ]
            });
            
            // –°–æ–∑–¥–∞–µ–º Data Channel –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            const dataChannel = connection.createDataChannel('chat', {
                ordered: true
            });
            
            p2pConnections[from] = {
                connection: connection,
                dataChannel: dataChannel,
                status: 'connecting',
                lastActivity: Date.now()
            };
            
            setupP2PHandlers(connection, dataChannel, from);
        }
        
        await p2pConnections[from].connection.setRemoteDescription(offer);
        const answer = await p2pConnections[from].connection.createAnswer();
        await p2pConnections[from].connection.setLocalDescription(answer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        if (p2pConnections[from].pendingCandidates) {
            for (const candidate of p2pConnections[from].pendingCandidates) {
                try {
                    await p2pConnections[from].connection.addIceCandidate(candidate);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
                }
            }
            p2pConnections[from].pendingCandidates = [];
        }
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º P2P answer –∫ ${from}`);
        sendP2PSignal('answer', {
            to: from,
            answer: answer
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P offer:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P answer
async function handleP2PAnswer(from, answer) {
    try {
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω P2P answer –æ—Ç ${from}`);
        
        if (p2pConnections[from]) {
            await p2pConnections[from].connection.setRemoteDescription(answer);
            console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${from} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P answer:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
async function handleP2PICECandidate(from, candidate) {
    try {
        if (p2pConnections[from] && p2pConnections[from].connection) {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            const MAX_ICE_CANDIDATES = 10;
            if (!p2pConnections[from].iceCandidateCount) {
                p2pConnections[from].iceCandidateCount = 0;
            }
            
            if (p2pConnections[from].iceCandidateCount >= MAX_ICE_CANDIDATES) {
                console.log(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è ${from} (${MAX_ICE_CANDIDATES}), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (p2pConnections[from].connection.remoteDescription) {
                await p2pConnections[from].connection.addIceCandidate(candidate);
                p2pConnections[from].iceCandidateCount++;
                console.log(`‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${from} (${p2pConnections[from].iceCandidateCount}/${MAX_ICE_CANDIDATES})`);
            } else {
                console.log(`‚è≥ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–ª–æ–∂–µ–Ω –¥–ª—è ${from} (–∂–¥–µ–º remote description)`);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
                if (!p2pConnections[from].pendingCandidates) {
                    p2pConnections[from].pendingCandidates = [];
                }
                p2pConnections[from].pendingCandidates.push(candidate);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P ping
function handleP2PPing(from) {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω ping –æ—Ç ${from}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º pong —á–µ—Ä–µ–∑ WebSocket`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong —á–µ—Ä–µ–∑ WebSocket —Å–µ—Ä–≤–µ—Ä, –∞ –Ω–µ —á–µ—Ä–µ–∑ P2P
    if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
        const pongMessage = {
            type: 'p2p_signal',
            to: from,
            signal: {
                type: 'p2p_pong',
                to: from,
                timestamp: Date.now()
            }
        };
        
        window.chatWs.send(JSON.stringify(pongMessage));
        console.log(`‚úÖ Pong –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket –∫ ${from}`);
    } else {
        console.log(`‚ùå Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ pong`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P pong
function handleP2PPong(from) {
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω pong –æ—Ç ${from} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (p2pConnections[from]) {
        p2pConnections[from].lastPong = Date.now();
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${from} –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è pong`);
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π P2P:`, {
        hasConnection: !!p2pConnections[from],
        connectionStatus: p2pConnections[from]?.status,
        isEstablishing: establishingConnections.has(from)
    });
    establishP2PConnection(from);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P —Å–æ–æ–±—â–µ–Ω–∏–π
function handleP2PMessage(message, friendUsername) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (message.data && message.data.from === currentUser.id) {
        console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${friendUsername}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞–º
    if (message.to && message.to !== currentUser.id) {
        console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (${message.to}), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
        return;
    }
    
    switch (message.type) {
        case 'chat_message':
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ IndexedDB
            saveIncomingMessage(friendUsername, message.data.message, friendUsername, message.data.timestamp, message.data.type);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            if (currentChatFriend === friendUsername) {
                addChatMessage(message.data.message, friendUsername, message.data.timestamp, message.data.type);
            } else {
                // –ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showChatNotification(friendUsername, message.data.message);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
            sendP2PMessage(friendUsername, {
                type: 'message_received',
                to: friendUsername,
                timestamp: Date.now(),
                originalTimestamp: message.data.timestamp
            });
            break;
        case 'message_received':
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if (message.data && message.data.originalTimestamp) {
                console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏:`, {
                    from: message.from,
                    friendUsername,
                    originalTimestamp: message.data.originalTimestamp,
                    currentChatFriend,
                    isCorrectSender: message.from === friendUsername,
                    isActiveChat: currentChatFriend === friendUsername
                });
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ, –∫–æ–º—É –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                if (message.from === friendUsername) {
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç ${friendUsername}`);
                } else {
                    console.log(`‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: –æ–∂–∏–¥–∞–ª–∏ ${friendUsername}, –ø–æ–ª—É—á–∏–ª–∏ ${message.from}`);
                }
            }
            break;
        case 'ping':
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º pong
            sendP2PMessage(friendUsername, {
                type: 'pong',
                to: friendUsername,
                timestamp: Date.now()
            });
            break;
        case 'pong':
            console.log(`–ü–æ–ª—É—á–µ–Ω pong –æ—Ç ${friendUsername}`);
            if (p2pConnections[friendUsername]) {
                p2pConnections[friendUsername].lastPong = Date.now();
            }
            break;
        case 'delete_message':
            console.log(`üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${friendUsername}:`, message.data);
            if (message.data && message.data.timestamp) {
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ IndexedDB
                deleteMessageFromDB(message.data.timestamp, friendUsername);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç
                if (currentChatFriend === friendUsername) {
                    hideMessageInUI(message.data.timestamp);
                }
                
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${message.data.timestamp} —É–¥–∞–ª–µ–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç ${friendUsername}`);
            }
            break;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ P2P —Å–æ–æ–±—â–µ–Ω–∏—è
function sendP2PMessage(friendUsername, message) {
    if (p2pConnections[friendUsername] && 
        p2pConnections[friendUsername].dataChannel && 
        p2pConnections[friendUsername].dataChannel.readyState === 'open') {
        
        try {
            p2pConnections[friendUsername].dataChannel.send(JSON.stringify(message));
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            p2pConnections[friendUsername].lastActivity = Date.now();
            console.log(`üì§ P2P —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ ${friendUsername}:`, message.type);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ P2P —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return false;
        }
    }
    console.log(`‚ùå P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
    return false;
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä—É
function connectChatWebSocket() {
    if (!currentUser.id) return;
    
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
        console.log('‚úÖ Chat WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        return;
    }
    
    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∂–¥–µ–º
    if (window.chatWs && window.chatWs.readyState === WebSocket.CONNECTING) {
        console.log('‚è≥ Chat WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...');
        return;
    }
    
    try {
        console.log('üîå –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ wss://lizacom.ru:9002');
        const chatWs = new WebSocket('wss://lizacom.ru:9002');
        
        chatWs.onopen = () => {
            console.log(`‚úÖ Chat WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
            window.chatWs = chatWs; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ WebSocket
            updateChatStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä—É', 'connected');
            
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            chatWs.send(JSON.stringify({
                type: 'auth',
                data: { userId: currentUser.id }
            }));
            console.log(`üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
        };
        
        chatWs.onerror = (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ Chat WebSocket:', error);
            updateChatStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä—É', 'error');
        };
        
        chatWs.onclose = (event) => {
            console.log('‚ùå Chat WebSocket –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
            updateChatStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ', 'disconnected');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            if (currentUser.id) {
                setTimeout(() => {
                    if (currentUser.id && (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN)) {
                        console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chat WebSocket...');
                        connectChatWebSocket();
                    }
                }, 3000);
            }
        };
        
        chatWs.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Chat WebSocket –¥–ª—è ${currentUser.id}:`, message.type);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ P2P —Å–∏–≥–Ω–∞–ª–æ–º
                if (message.type && message.type.startsWith('p2p_')) {
                    handleP2PSignal(message);
                } else if (message.type === 'auth_success') {
                    console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
                } else {
                    handleChatMessage(message);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:', error);
            }
        };
        
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        window.chatWs = chatWs;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Chat WebSocket:', error);
        updateChatStatus('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
function handleChatMessage(message) {
    switch (message.type) {
        case 'auth_success':
            updateChatStatus('–ß–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', 'connected');
            break;
        case 'chat_message':
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (message.from !== currentUser.id) {
                // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const senderUsername = message.from;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–≤—Å–µ–≥–¥–∞)
                saveIncomingMessage(senderUsername, message.data.message, message.from, message.data.timestamp, message.data.type);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if (currentChatFriend === senderUsername) {
                    addChatMessage(message.data.message, message.from, message.data.timestamp, message.data.type);
                } else {
                    // –ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    showChatNotification(senderUsername, message.data.message);
                }
            }
            break;
        case 'error':
            updateChatStatus('–û—à–∏–±–∫–∞ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–∞: ' + message.message, 'error');
            break;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addChatMessage(message, from, timestamp, type, isFromHistory = false, status = null) {
    console.log('üîç addChatMessage –≤—ã–∑–≤–∞–Ω–∞:', {
        message: message,
        from: from,
        timestamp: timestamp,
        type: type,
        isFromHistory: isFromHistory,
        currentUser: currentUser
    });
    
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç chatMessages –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    const messageDiv = document.createElement('div');
    
    const isOwn = from === currentUser.id;
    const messageId = `${from}_${timestamp}_${Math.random().toString(36).substr(2, 9)}`;
    messageDiv.setAttribute('data-timestamp', timestamp);
    messageDiv.setAttribute('data-message-id', messageId);
    messageDiv.className = 'message-item';
    messageDiv.style.cssText = `
        margin: 10px 0;
        padding: 10px 15px;
        border-radius: 15px;
        max-width: 70%;
        word-wrap: break-word;
        background: ${isOwn ? '#4CAF50' : '#e0e0e0'};
        color: ${isOwn ? 'white' : '#333'};
        margin-left: ${isOwn ? 'auto' : '0'};
        text-align: ${isOwn ? 'right' : 'left'};
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    messageDiv.onclick = () => toggleMessageSelection(timestamp.toString());
    
    if (type === 'emoji') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const isOnlyEmoji = /^[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]+$/u.test(message);
        
        if (isOnlyEmoji) {
            // –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ - –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
            const statusHTML = isOwn ? getMessageStatusHTML(status, timestamp) : '';
            messageDiv.innerHTML = `
                <div style="font-size: 24px;">${message}</div>
                <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(timestamp).toLocaleTimeString()}</div>
                ${statusHTML}
            `;
        } else {
            // –°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            const statusHTML = isOwn ? getMessageStatusHTML(status, timestamp) : '';
            messageDiv.innerHTML = `
                <div style="font-size: 16px;">${message}</div>
                <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(timestamp).toLocaleTimeString()}</div>
                ${statusHTML}
            `;
        }
    } else {
        const statusHTML = isOwn ? getMessageStatusHTML(status, timestamp) : '';
        messageDiv.innerHTML = `
            <div>${message}</div>
            <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(timestamp).toLocaleTimeString()}</div>
            ${statusHTML}
        `;
    }
    
    chatMessages.appendChild(messageDiv);
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    if (!isFromHistory) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    if (currentChatFriend === from) {
        unreadMessages[from] = 0;
        updateUnreadIndicator(from);
        updateFriendsList();
        console.log(`üî¥ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –≤ addChatMessage –¥–ª—è ${from}:`, unreadMessages[from]);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ HTML –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function getMessageStatusHTML(status, timestamp) {
    if (!status) return '';
    
    switch (status) {
        case 'not_sent':
            return `<div class="message-status" style="font-size: 10px; opacity: 0.8; margin-top: 3px; color: #ff9800;">‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è</div>`;
        case 'sent':
            return `<div class="message-status" style="font-size: 10px; opacity: 0.8; margin-top: 3px; color: #4caf50;">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>`;
        case 'cancelled':
            return `<div class="message-status" style="font-size: 10px; opacity: 0.8; margin-top: 3px; color: #f44336;">
                <span style="color: #f44336;">‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ</span>
                <span onclick="retryMessage('${timestamp}')" style="color: #2196f3; cursor: pointer; margin-left: 5px;" title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É">üîÑ</span>
            </div>`;
        default:
            return '';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
function updateMessageStatusInUI(timestamp, status) {
    const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
    if (messageElement) {
        const statusElement = messageElement.querySelector('.message-status');
        if (statusElement) {
            statusElement.outerHTML = getMessageStatusHTML(status, timestamp);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB
async function updateMessageStatusInDB(friendUsername, timestamp, status) {
    try {
        if (!currentUser || !currentUser.id) {
            console.error('‚ùå currentUser –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ IndexedDB');
            return;
        }
        
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${friendUsername}`;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
        const messages = await db.getRecentMessages(chatId, 1000);
        
        // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º timestamp
        const messageIndex = messages.findIndex(msg => msg.timestamp === timestamp);
        
        if (messageIndex !== -1) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
            messages[messageIndex].status = status;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ IndexedDB
            await db.saveMessage(chatId, messages[messageIndex]);
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ IndexedDB: ${status}`);
        } else {
            console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å timestamp ${timestamp} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB:', error);
    }
}

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function retryMessage(timestamp) {
    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${timestamp}`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    if (messageQueues[currentChatFriend]) {
        const queuedMessage = messageQueues[currentChatFriend].find(msg => msg.timestamp === timestamp);
        if (queuedMessage) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "not_sent"
            updateMessageStatusInUI(timestamp, 'not_sent');
            updateMessageStatusInDB(currentChatFriend, timestamp, 'not_sent');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            queuedMessage.retries = 0;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞
            if (p2pConnections[currentChatFriend] && p2pConnections[currentChatFriend].status === 'connected') {
                const success = sendP2PMessage(currentChatFriend, {
                    type: 'chat_message',
                    to: currentChatFriend,
                    data: {
                        message: queuedMessage.message,
                        from: currentUser.id,
                        timestamp: timestamp,
                        type: queuedMessage.type
                    }
                });
                
                if (success) {
                    updateMessageStatusInUI(timestamp, 'sent');
                    updateMessageStatusInDB(currentChatFriend, timestamp, 'sent');
                    
                    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    const index = messageQueues[currentChatFriend].indexOf(queuedMessage);
                    if (index > -1) {
                        messageQueues[currentChatFriend].splice(index, 1);
                    }
                }
            } else {
                // P2P –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
                sendP2PSignal('ping', { to: currentChatFriend });
            }
        }
    }
}
