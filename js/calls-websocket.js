// ===== WEBSOCKET –î–õ–Ø –ó–í–û–ù–ö–û–í =====

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
function connectCallsWebSocket() {
    return new Promise((resolve, reject) => {
        try {
            const wsUrl = `${WEBSOCKET_URL}?username=${encodeURIComponent(currentUser.id)}`;
            currentUser.callsWs = new WebSocket(wsUrl);
            
            currentUser.callsWs.onopen = () => {
                currentUser.callsWsConnected = true;
                currentUser.log('üîå WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'success');
                resolve();
            };
            
            currentUser.callsWs.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    handleCallsWebSocketMessage(message);
                } catch (error) {
                    currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤: ${error.message}`, 'error');
                }
            };
            
            currentUser.callsWs.onclose = () => {
                currentUser.callsWsConnected = false;
                currentUser.log('üîå WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω', 'warning');
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                if (currentUser.id) {
                    setTimeout(() => {
                        if (currentUser.id && !currentUser.callsWsConnected) {
                            currentUser.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –∑–≤–æ–Ω–∫–æ–≤...', 'info');
                            connectCallsWebSocket().catch(error => {
                                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤: ${error.message}`, 'error');
                            });
                        }
                    }, 3000);
                }
            };
            
            currentUser.callsWs.onerror = (error) => {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ WebSocket –∑–≤–æ–Ω–∫–æ–≤: ${error.message}`, 'error');
                reject(error);
            };
        
        } catch (error) {
                reject(error);
            }
        });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
function handleCallsWebSocketMessage(message) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.type === 'connected') {
        currentUser.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`, 'success');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
        if (message.userId) {
            currentUser.wsUserId = message.userId;
            currentUser.log(`üÜî WebSocket ID: ${message.userId}`, 'info');
        }
        return;
    }
    
    if (message.type === 'error') {
        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${message.message}`, 'error');
        return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º P2P —Å–∏–≥–Ω–∞–ª—ã
    if (message.type.startsWith('p2p_')) {
        handleP2PSignal(message);
        return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    if (message.from) {
        currentUser.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${message.type} –æ—Ç ${message.from}`, 'info');
    }
    
    switch (message.type) {
        case 'ping':
            handlePing(message);
            break;
        case 'pong':
            handlePong(message);
            break;
        case 'offer':
            handleOffer(message);
            break;
        case 'answer':
            handleAnswer(message);
            break;
        case 'ice-candidate':
            handleIceCandidate(message);
            break;
        case 'disconnect':
            handleDisconnect(message);
            break;
        case 'chat_message':
            handleChatMessage(message);
            break;
        default:
            if (message.from) {
                currentUser.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`, 'warning');
            }
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
function sendCallsWebSocketMessage(type, data, to = null) {
    if (!currentUser.callsWsConnected || !currentUser.callsWs) {
        currentUser.log('‚ùå WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
        return;
    }
    
    const message = {
        type: type,
        from: currentUser.wsUserId || currentUser.id,
        to: to || currentUser.targetUser,
        data: data,
        timestamp: Date.now()
    };
    
    try {
        currentUser.callsWs.send(JSON.stringify(message));
        currentUser.log(`‚úÖ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`, 'success');
    } catch (error) {
        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${type}: ${error.message}`, 'error');
    }
}
