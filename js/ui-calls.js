// ===== UI –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–í–û–ù–ö–ê–ú–ò =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateUI() {
    const loginSection = document.getElementById('loginSection');
    const userInfo = document.getElementById('userInfo');
    const headerUserInfo = document.getElementById('headerUserInfo');
    const userStatus = document.getElementById('userStatus');
    const currentUserId = document.getElementById('currentUserId');
    const userAvatar = document.getElementById('userAvatar');
    const startCallBtn = document.getElementById('startCallBtn');
    const disconnectBtn = document.getElementById('disconnectBtn');
    const resetBtn = document.querySelector('button[onclick="resetUser()"]');
    
    if (currentUser.id) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        loginSection.style.display = 'none';
        userInfo.style.display = 'block';
        headerUserInfo.style.display = 'flex';
        currentUserId.textContent = currentUser.id;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ë–î
        loadUserAvatar();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        userStatus.textContent = getStatusText();
        userStatus.className = `status ${currentUser.state}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        if (currentUser.state === 'idle') {
            startCallBtn.style.display = 'inline-block';
            startCallBtn.disabled = false;
            disconnectBtn.style.display = 'none';
            resetBtn.style.display = 'inline-block';
        } else if (currentUser.state === 'connecting' || currentUser.state === 'connected' || currentUser.state === 'calling') {
            startCallBtn.style.display = 'none';
            disconnectBtn.style.display = 'inline-block';
            disconnectBtn.disabled = false;
            resetBtn.style.display = 'inline-block';
        }
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        loginSection.style.display = 'block';
        userInfo.style.display = 'none';
    }
}

function getStatusText() {
    switch (currentUser.state) {
        case 'idle': return '–ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º';
        case 'connecting': return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        case 'connected': return '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
        case 'calling': return '–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω';
        default: return '–û—Ç–∫–ª—é—á–µ–Ω';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞
async function startAudioCall() {
    const targetId = document.getElementById('targetUserId').value;
    
    if (!targetId) {
        currentUser.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'error');
        return;
    }
    
    if (currentUser.state !== 'idle') {
        currentUser.log(`‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –≤—ã–∑–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'error');
        return;
    }
    
    currentUser.log(`üéµ –ù–∞—á–∏–Ω–∞–µ–º –∞—É–¥–∏–æ –∑–≤–æ–Ω–æ–∫ –∫ ${targetId}`, 'info');
    currentUser.state = 'connecting';
    currentUser.targetUser = targetId;
    currentUser.isInitiator = true;
    currentUser.webrtcInitiated = false;
    updateUI();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ WebSocket —Å —Ç–∏–ø–æ–º –∞—É–¥–∏–æ
    currentUser.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫ ${targetId}`, 'info');
    sendCallsWebSocketMessage('ping', { timestamp: Date.now(), callType: 'audio' }, targetId);
}

async function startCall() {
    const targetId = document.getElementById('targetUserId').value;
    
    if (!targetId) {
        currentUser.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'error');
        return;
    }
    
    if (currentUser.state !== 'idle') {
        currentUser.log(`‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –≤—ã–∑–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'error');
        return;
    }
    
    currentUser.log(`üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∫ ${targetId}`, 'info');
    currentUser.state = 'connecting';
    currentUser.targetUser = targetId;
    currentUser.isInitiator = true;
    currentUser.webrtcInitiated = false;
    updateUI();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ WebSocket
    currentUser.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫ ${targetId}`, 'info');
    sendCallsWebSocketMessage('ping', { timestamp: Date.now() }, targetId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserAvatar() {
    const userData = localStorage.getItem('userData');
    if (!userData) return;

    try {
        const data = JSON.parse(userData);
        const userId = data.userId;
        
        if (!userId) return;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        fetch(`avtr/api/get_user_data.php?user_id=${userId}`)
            .then(response => response.json())
            .then(result => {
                const userAvatar = document.getElementById('userAvatar');
                if (result.success && result.user.avatar_path) {
                    userAvatar.innerHTML = `<img src="${result.user.avatar_path}" alt="–ê–≤–∞—Ç–∞—Ä" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
                } else {
                    userAvatar.innerHTML = '<i class="fas fa-user-circle"></i>';
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ userData:', error);
    }
}
