// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ IndexedDB
let contactsDB = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function initContactsDB() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('LizaAppContacts', 1);
        
        request.onerror = () => reject(request.error);
        request.onsuccess = () => {
            contactsDB = request.result;
            resolve(contactsDB);
        };
        
        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains('contacts')) {
                const store = db.createObjectStore('contacts', { keyPath: 'phone' });
                store.createIndex('name', 'name', { unique: false });
            }
        };
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ IndexedDB
async function saveContactName(phone, name) {
    if (!contactsDB) {
        await initContactsDB();
    }
    
    return new Promise((resolve, reject) => {
        const transaction = contactsDB.transaction(['contacts'], 'readwrite');
        const store = transaction.objectStore('contacts');
        const request = store.put({ phone: phone, name: name, timestamp: Date.now() });
        
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ IndexedDB
async function getContactName(phone) {
    if (!contactsDB) {
        await initContactsDB();
    }
    
    return new Promise((resolve, reject) => {
        const transaction = contactsDB.transaction(['contacts'], 'readonly');
        const store = transaction.objectStore('contacts');
        const request = store.get(phone);
        
        request.onsuccess = () => {
            resolve(request.result ? request.result.name : null);
        };
        request.onerror = () => reject(request.error);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.custom-notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'custom-notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8'};
        color: white;
        padding: 12px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 10000;
        max-width: 400px;
        min-width: 300px;
        font-size: 14px;
        animation: slideIn 0.3s ease-out;
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; margin-left: 10px;">&times;</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏
async function selectFromContacts() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Contacts API
    if (!('contacts' in navigator)) {
        showNotification('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.', 'error');
        return;
    }

    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
        const contacts = await navigator.contacts.select(['name', 'tel'], { multiple: false });
        
        if (contacts && contacts.length > 0) {
            const contact = contacts[0];
            const phoneNumber = contact.tel && contact.tel.length > 0 ? contact.tel[0] : null;
            
            if (phoneNumber) {
                // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                let cleanNumber = phoneNumber.replace(/[^\d+]/g, '');
                
                // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º +7 –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
                if (!cleanNumber.startsWith('+')) {
                    if (cleanNumber.startsWith('8')) {
                        cleanNumber = '+7' + cleanNumber.substring(1);
                    } else if (cleanNumber.startsWith('7')) {
                        cleanNumber = '+' + cleanNumber;
                    } else {
                        cleanNumber = '+7' + cleanNumber;
                    }
                }
                
                // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
                document.getElementById('searchUsername').value = cleanNumber;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ IndexedDB
                if (contact.name) {
                    try {
                        await saveContactName(cleanNumber, contact.name);
                        showNotification('–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ' + contact.name, 'success');
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
                        showNotification('–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω: ' + contact.name, 'success');
                    }
                } else {
                    showNotification('–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', 'success');
                }
            } else {
                showNotification('–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', 'error');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        if (error.name === 'NotAllowedError') {
            showNotification('–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.', 'error');
        } else if (error.name === 'NotSupportedError') {
            showNotification('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.', 'error');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ' + error.message, 'error');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async function getDisplayName(phone) {
    try {
        const contactName = await getContactName(phone);
        return contactName || phone;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        return phone;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π
async function updateFriendDisplayName(phone, element) {
    try {
        const displayName = await getDisplayName(phone);
        if (displayName !== phone) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            const nameElement = element.querySelector('.username');
            if (nameElement) {
                nameElement.innerHTML = `üë§ ${displayName}`;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexedDB
    initContactsDB().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndexedDB –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    });
});
