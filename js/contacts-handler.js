// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ IndexedDB
let contactsDB = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function initContactsDB() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('LizaAppContacts', 2);
        
        request.onerror = () => reject(request.error);
        request.onsuccess = () => {
            contactsDB = request.result;
            resolve(contactsDB);
        };
        
        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains('contacts')) {
                const store = db.createObjectStore('contacts', { keyPath: 'phone' });
                store.createIndex('name', 'name', { unique: false });
            }
            if (!db.objectStoreNames.contains('avatars')) {
                const store = db.createObjectStore('avatars', { keyPath: 'user_id' });
                store.createIndex('username', 'username', { unique: false });
                store.createIndex('timestamp', 'timestamp', { unique: false });
            }
        };
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ IndexedDB
async function saveContactName(phone, name) {
    if (!contactsDB) {
        await initContactsDB();
    }
    
    return new Promise((resolve, reject) => {
        const transaction = contactsDB.transaction(['contacts'], 'readwrite');
        const store = transaction.objectStore('contacts');
        const request = store.put({ phone: phone, name: name, timestamp: Date.now() });
        
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ IndexedDB
async function getContactName(phone) {
    if (!contactsDB) {
        await initContactsDB();
    }
    
    return new Promise((resolve, reject) => {
        const transaction = contactsDB.transaction(['contacts'], 'readonly');
        const store = transaction.objectStore('contacts');
        const request = store.get(phone);
        
        request.onsuccess = () => {
            resolve(request.result ? request.result.name : null);
        };
        request.onerror = () => reject(request.error);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.custom-notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'custom-notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8'};
        color: white;
        padding: 12px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 10000;
        max-width: 400px;
        min-width: 300px;
        font-size: 14px;
        animation: slideIn 0.3s ease-out;
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; margin-left: 10px;">&times;</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏
async function selectFromContacts() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Contacts API
    if (!('contacts' in navigator)) {
        showNotification('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.', 'error');
        return;
    }

    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
        const contacts = await navigator.contacts.select(['name', 'tel'], { multiple: false });
        
        if (contacts && contacts.length > 0) {
            const contact = contacts[0];
            const phoneNumber = contact.tel && contact.tel.length > 0 ? contact.tel[0] : null;
            
            if (phoneNumber) {
                // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                let cleanNumber = phoneNumber.replace(/[^\d+]/g, '');
                
                // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º +7 –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
                if (!cleanNumber.startsWith('+')) {
                    if (cleanNumber.startsWith('8')) {
                        cleanNumber = '+7' + cleanNumber.substring(1);
                    } else if (cleanNumber.startsWith('7')) {
                        cleanNumber = '+' + cleanNumber;
                    } else {
                        cleanNumber = '+7' + cleanNumber;
                    }
                }
                
                // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
                document.getElementById('searchUsername').value = cleanNumber;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ IndexedDB
                if (contact.name) {
                    try {
                        await saveContactName(cleanNumber, contact.name);
                        showNotification('–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ' + contact.name, 'success');
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
                        showNotification('–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω: ' + contact.name, 'success');
                    }
                } else {
                    showNotification('–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', 'success');
                }
            } else {
                showNotification('–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', 'error');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        if (error.name === 'NotAllowedError') {
            showNotification('–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.', 'error');
        } else if (error.name === 'NotSupportedError') {
            showNotification('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.', 'error');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ' + error.message, 'error');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async function getDisplayName(phone) {
    try {
        const contactName = await getContactName(phone);
        return contactName || phone;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        return phone;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π
async function updateFriendDisplayName(phone, element) {
    try {
        const displayName = await getDisplayName(phone);
        if (displayName !== phone) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            const nameElement = element.querySelector('.username');
            if (nameElement) {
                nameElement.innerHTML = `üë§ ${displayName}`;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏:', error);
    }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–í–ê–¢–ê–†–ê–ú–ò ====================

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ IndexedDB
async function saveAvatar(user_id, username, avatarData, avatarPath) {
    if (!contactsDB) {
        await initContactsDB();
    }
    
    return new Promise((resolve, reject) => {
        const transaction = contactsDB.transaction(['avatars'], 'readwrite');
        const store = transaction.objectStore('avatars');
        const request = store.put({ 
            user_id: user_id, 
            username: username, 
            avatarData: avatarData, 
            avatarPath: avatarPath,
            timestamp: Date.now() 
        });
        
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ IndexedDB
async function getAvatar(user_id) {
    if (!contactsDB) {
        await initContactsDB();
    }
    
    return new Promise((resolve, reject) => {
        const transaction = contactsDB.transaction(['avatars'], 'readonly');
        const store = transaction.objectStore('avatars');
        const request = store.get(user_id);
        
        request.onsuccess = () => {
            const result = request.result;
            if (result && result.avatarData) {
                resolve(result);
            } else {
                resolve(null);
            }
        };
        request.onerror = () => reject(request.error);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
function isAvatarStale(timestamp) {
    const oneDay = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    return Date.now() - timestamp > oneDay;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB
async function loadAndCacheAvatar(user_id, username) {
    try {
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${username} (ID: ${user_id})...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        const response = await fetch(`avtr/api/get_user_data.php?username=${encodeURIComponent(username)}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const userData = await response.json();
        console.log(`üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, userData);
        
        if (userData.success && userData.user && userData.user.avatar_path && userData.user.avatar_path.trim() !== '') {
            console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${username}: ${userData.user.avatar_path}`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
            const avatarResponse = await fetch(userData.user.avatar_path);
            if (!avatarResponse.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${avatarResponse.status}`);
            }
            
            const avatarBlob = await avatarResponse.blob();
            const avatarData = await blobToBase64(avatarBlob);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
            await saveAvatar(user_id, username, avatarData, userData.user.avatar_path);
            console.log(`‚úÖ –ê–≤–∞—Ç–∞—Ä –¥–ª—è ${username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à (—Ä–∞–∑–º–µ—Ä: ${Math.round(avatarBlob.size/1024)}KB)`);
            
            return { avatarData, avatarPath: userData.user.avatar_path };
        } else {
            console.log(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ—Ç
            await saveAvatar(user_id, username, null, null);
            return null;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è ${username}:`, error);
        return null;
    }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Blob –≤ Base64
function blobToBase64(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function getCachedAvatar(user_id, username) {
    try {
        console.log(`[DEBUG] getCachedAvatar: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${username} (ID: ${user_id})`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cachedAvatar = await getAvatar(user_id);
        console.log(`[DEBUG] getCachedAvatar –¥–ª—è ${username}: cachedAvatar =`, cachedAvatar);
        
        if (cachedAvatar && !isAvatarStale(cachedAvatar.timestamp)) {
            if (cachedAvatar.avatarData) {
                console.log(`‚ö° –ê–≤–∞—Ç–∞—Ä –¥–ª—è ${username} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞`);
                return cachedAvatar.avatarData;
            } else {
                console.log(`‚ö†Ô∏è –í –∫—ç—à–µ –∑–∞–ø–∏—Å–∞–Ω–æ, —á—Ç–æ —É ${username} –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞`);
                return null;
            }
        }
        
        // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        console.log(`üîÑ –ê–≤–∞—Ç–∞—Ä –¥–ª—è ${username} —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        const avatarData = await loadAndCacheAvatar(user_id, username);
        console.log(`[DEBUG] getCachedAvatar –¥–ª—è ${username}: avatarData –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ =`, avatarData);
        return avatarData ? avatarData.avatarData : null;
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è ${username}:`, error);
        return null;
    }
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
async function preloadFriendsAvatars() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥—Ä—É–∑–µ–π...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if (typeof friendsData === 'undefined' || !friendsData.friends || friendsData.friends.length === 0) {
            console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤');
            return;
        }
        
        const friends = friendsData.friends;
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${friends.length} –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤`);
        console.log(`üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:`, friends.map(f => f.username));
        
        if (friends.length === 0) {
            console.log('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤');
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        const batchSize = 3;
        for (let i = 0; i < friends.length; i += batchSize) {
            const batch = friends.slice(i, i + batchSize);
            const promises = batch.map(async (friend) => {
                try {
                    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è ${friend.username} (ID: ${friend.contact_user_id})`);
                    await loadAndCacheAvatar(friend.contact_user_id, friend.username);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è ${friend.username}:`, error);
                }
            });
            
            await Promise.all(promises);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è ${Math.floor(i/batchSize) + 1} –∏–∑ ${Math.ceil(friends.length/batchSize)}`);
        }
        
        console.log('üéâ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexedDB
    initContactsDB().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndexedDB –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    });
});
