// ===== –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
function showPasswordField(event) {
    const passwordField = document.getElementById('userPassword');
    const loginButton = event.target;
    
    if (passwordField.style.display === 'none') {
        passwordField.style.display = 'block';
        loginButton.textContent = '–í–æ–π—Ç–∏';
        loginButton.onclick = () => startUser();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function startUser() {
    const username = document.getElementById('userId').value;
    const password = document.getElementById('userPassword').value;
    
    if (!username) {
        currentUser.log(`‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω`, 'error');
        return;
    }
    
    if (!password) {
        currentUser.log(`‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å`, 'error');
        return;
    }
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currentUser.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}...`, 'info');
    
    try {
        const response = await fetch('https://lizaapp.wg01.ru/api/login.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                username: username,
                password: password
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            currentUser.id = username;
            currentUser.sessionToken = data.sessionToken;
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chat WebSocket —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            connectChatWebSocket();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            startConnectionMonitoring();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            localStorage.setItem('userData', JSON.stringify({
                username: username,
                userId: data.userId,
                sessionToken: data.sessionToken
            }));
            
            currentUser.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`, 'success');
        } else {
            currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${data.error}`, 'error');
            return;
        }
    } catch (error) {
        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º`, 'error');
        return;
    }
    
    currentUser.lastSignalId = Math.floor(Date.now() / 1000) - 60; // –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    currentUser.state = 'idle';
    currentUser.targetUser = null;
    currentUser.isInitiator = false;
    currentUser.webrtcInitiated = false;
    currentUser.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.id} –≥–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º`, 'success');
    currentUser.log(`‚è∞ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ä—à–µ: ${currentUser.lastSignalId}`, 'info');
    currentUser.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'info');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞–º
    try {
        await connectCallsWebSocket();
    } catch (error) {
        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: ${error.message}`, 'error');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateUI();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥—Ä—É–∑–µ–π
    showFriendsSection();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ localStorage
    loadChatMessagesFromStorage();
    
    currentUser.log(`üìπ –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ`, 'info');
}
