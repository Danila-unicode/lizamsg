// ===== –°–ò–°–¢–ï–ú–ê –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô =====

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è
function initDeleteSystem() {
    deleteButton = document.getElementById('deleteSelectedMessages');
    if (deleteButton) {
        updateDeleteButton();
    }
}

// –í—ã–¥–µ–ª–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function toggleMessageSelection(timestamp) {
    const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
    if (!messageElement) return;
    
    if (selectedMessages.has(timestamp)) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selectedMessages.delete(timestamp);
        messageElement.classList.remove('selected');
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selectedMessages.add(timestamp);
        messageElement.classList.add('selected');
    }
    
    updateDeleteButton();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
function updateDeleteButton() {
    if (!deleteButton) return;
    
    if (selectedMessages.size > 0) {
        deleteButton.style.display = 'block';
        deleteButton.textContent = `üóëÔ∏è ${selectedMessages.size}`;
    } else {
        deleteButton.style.display = 'none';
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function deleteSelectedMessages() {
    if (selectedMessages.size === 0) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–ø—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
    showDeleteOptionsModal();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–ø—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
function showDeleteOptionsModal() {
    const modal = document.createElement('div');
    modal.id = 'deleteMessagesModal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 10000;
        display: flex;
        justify-content: center;
        align-items: center;
    `;
    
    const selectedCount = selectedMessages.size;
    const canDeleteFromRecipient = canDeleteMessagesFromRecipient();
    
    modal.innerHTML = `
        <div style="background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); max-width: 400px; width: 90%;">
            <h3 style="margin: 0 0 15px 0; color: #333;">–£–¥–∞–ª–∏—Ç—å ${selectedCount} —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
            <p style="margin: 0 0 20px 0; color: #666;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è:</p>
            
            <button onclick="deleteMessagesLocally()" 
                    style="width: 100%; padding: 12px; margin: 5px 0; background: #ff9800; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —É –º–µ–Ω—è (${selectedCount} —Å–æ–æ–±—â–µ–Ω–∏–π)
            </button>
            
            ${canDeleteFromRecipient ? `
            <button onclick="deleteMessagesGlobally()" 
                    style="width: 100%; padding: 12px; margin: 5px 0; background: #f44336; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É –º–µ–Ω—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (${selectedCount} —Å–æ–æ–±—â–µ–Ω–∏–π)
            </button>
            ` : ''}
            
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;">
                ‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> ${canDeleteFromRecipient ? 
                    '–°–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —É–¥–∞–ª–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞' : 
                    '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ - –∏—Ö –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —É —Å–µ–±—è'}
            </div>
            
            <button onclick="closeDeleteModal()" 
                    style="width: 100%; padding: 12px; margin: 5px 0; background: #666; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è
function closeDeleteModal() {
    const modal = document.getElementById('deleteMessagesModal');
    if (modal) {
        modal.remove();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
function canDeleteMessagesFromRecipient() {
    const now = Date.now();
    const oneHour = 60 * 60 * 1000;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ö–æ–¥—è—â–∏–µ (–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ)
    let hasIncomingMessages = false;
    let hasRecentMessages = false;
    
    for (const timestamp of selectedMessages) {
        const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
        if (messageElement) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–º (–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º)
            const isOwn = messageElement.style.marginLeft === 'auto';
            if (!isOwn) {
                hasIncomingMessages = true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            const messageTime = new Date(parseInt(timestamp));
            if (now - messageTime.getTime() <= oneHour) {
                hasRecentMessages = true;
            }
        }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    if (hasIncomingMessages) {
        return false;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–ª–∞–¥—à–µ —á–∞—Å–∞ - –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
    return hasRecentMessages;
}

// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
async function deleteMessagesLocally() {
    console.log(`üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ${selectedMessages.size} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    try {
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${currentChatFriend}`;
        const messages = await db.getRecentMessages(chatId, 1000);
        
        // –£–¥–∞–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const filteredMessages = messages.filter(msg => !selectedMessages.has(msg.timestamp.toString()));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for (const message of filteredMessages) {
            await db.saveMessage(chatId, message);
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
        selectedMessages.forEach(timestamp => {
            hideMessageInUI(timestamp);
        });
        
        // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        clearSelection();
        
        console.log(`‚úÖ ${selectedMessages.size} —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
    
    closeDeleteModal();
}

// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
async function deleteMessagesGlobally() {
    console.log(`üóëÔ∏è –£–º–Ω–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ${selectedMessages.size} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    try {
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${currentChatFriend}`;
        const messages = await db.getRecentMessages(chatId, 1000);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messagesToDelete = [];
        const messagesToCancel = [];
        const messagesToKeep = [];
        
        for (const message of messages) {
            if (selectedMessages.has(message.timestamp.toString())) {
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
                if (message.status === 'sent') {
                    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
                    messagesToDelete.push(message);
                } else if (message.status === 'not_sent' || message.status === 'cancelled') {
                    // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                    messagesToCancel.push(message);
                } else {
                    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    messagesToKeep.push(message);
                }
            } else {
                messagesToKeep.push(message);
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (messagesToCancel.length > 0) {
            console.log(`üö´ –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ${messagesToCancel.length} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            messagesToCancel.forEach(message => {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "cancelled" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
                updateMessageStatusInUI(message.timestamp, 'cancelled');
                updateMessageStatusInDB(currentChatFriend, message.timestamp, 'cancelled');
            });
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (messagesToDelete.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            const isRecipientOnline = await checkRecipientOnlineStatus(currentChatFriend);
            
            if (isRecipientOnline) {
                // –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω - —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ P2P
                await deleteDeliveredMessages(messagesToDelete);
            } else {
                // –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                showOfflineRecipientWarning(messagesToDelete.length);
                return; // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        for (const message of messagesToKeep) {
            await db.saveMessage(chatId, message);
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
        selectedMessages.forEach(timestamp => {
            hideMessageInUI(timestamp);
        });
        
        // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        clearSelection();
        
        console.log(`‚úÖ –£–º–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${messagesToDelete.length} —É–¥–∞–ª–µ–Ω–æ, ${messagesToCancel.length} –æ—Ç–º–µ–Ω–µ–Ω–æ`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
    
    closeDeleteModal();
}

// –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
function hideMessageInUI(timestamp) {
    const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
    if (messageElement) {
        messageElement.style.display = 'none';
    }
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
function clearSelection() {
    selectedMessages.forEach(timestamp => {
        const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
        if (messageElement) {
            messageElement.classList.remove('selected');
        }
    });
    selectedMessages.clear();
    updateDeleteButton();
}

// –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ IndexedDB
async function deleteMessageFromDB(timestamp, friendUsername) {
    try {
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${friendUsername}`;
        const messages = await db.getRecentMessages(chatId, 1000);
        const messageIndex = messages.findIndex(msg => msg.timestamp.toString() === timestamp.toString());
        
        if (messageIndex !== -1) {
            messages.splice(messageIndex, 1);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            for (const message of messages) {
                await db.saveMessage(chatId, message);
            }
            
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${timestamp} —É–¥–∞–ª–µ–Ω–æ –∏–∑ IndexedDB`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ IndexedDB:', error);
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
function addDeleteCommandToQueue(friendUsername, timestamp) {
    if (!deleteCommandQueue[friendUsername]) {
        deleteCommandQueue[friendUsername] = [];
    }
    
    const deleteCommand = {
        timestamp: timestamp,
        from: currentUser.id,
        addedAt: Date.now(),
        attempts: 0
    };
    
    deleteCommandQueue[friendUsername].push(deleteCommand);
    console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${friendUsername}: ${timestamp}`);
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
function sendDeleteCommandViaWebSocket(friendUsername, timestamp) {
    if (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN) {
        console.log(`‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è`);
        return false;
    }
    
    const deleteCommand = {
        type: 'delete_message',
        to: friendUsername,
        from: currentUser.id,
        data: {
            timestamp: timestamp,
            from: currentUser.id
        },
        timestamp: Date.now()
    };
    
    try {
        window.chatWs.send(JSON.stringify(deleteCommand));
        console.log(`üì§ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ WebSocket –∫ ${friendUsername}: ${timestamp}`);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:', error);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è
function processDeleteCommandQueue(friendUsername) {
    if (!deleteCommandQueue[friendUsername] || deleteCommandQueue[friendUsername].length === 0) {
        return;
    }
    
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${friendUsername}: ${deleteCommandQueue[friendUsername].length} –∫–æ–º–∞–Ω–¥`);
    
    const commands = deleteCommandQueue[friendUsername];
    const now = Date.now();
    const maxAge = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    const validCommands = commands.filter(cmd => (now - cmd.addedAt) < maxAge);
    
    if (validCommands.length === 0) {
        console.log(`‚è∞ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${friendUsername} —É—Å—Ç–∞—Ä–µ–ª–∏, –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å`);
        deleteCommandQueue[friendUsername] = [];
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ WebSocket
    validCommands.forEach(command => {
        command.attempts++;
        const success = sendDeleteCommandViaWebSocket(friendUsername, command.timestamp);
        
        if (success) {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è ${command.timestamp} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${command.attempts})`);
        } else {
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è ${command.timestamp} (–ø–æ–ø—ã—Ç–∫–∞ ${command.attempts})`);
        }
    });
    
    // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    deleteCommandQueue[friendUsername] = validCommands.filter(cmd => cmd.attempts < 3);
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è
function startDeleteCommandProcessor() {
    setInterval(() => {
        Object.keys(deleteCommandQueue).forEach(friendUsername => {
            if (deleteCommandQueue[friendUsername].length > 0) {
                processDeleteCommandQueue(friendUsername);
            }
        });
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
async function checkRecipientOnlineStatus(friendUsername) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${friendUsername}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connected') {
        console.log(`‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${friendUsername} –æ–Ω–ª–∞–π–Ω (P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ)`);
        return true;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    try {
        sendP2PSignal('ping', { to: friendUsername });
        
        // –ñ–¥–µ–º pong –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        const maxWaitTime = 10000;
        const startTime = Date.now();
        
        return new Promise((resolve) => {
            const checkPong = () => {
                if (p2pConnections[friendUsername] && p2pConnections[friendUsername].lastPong) {
                    const pongTime = p2pConnections[friendUsername].lastPong;
                    if (Date.now() - pongTime < 5000) { // Pong –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–µ–∫—É–Ω–¥
                        console.log(`‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${friendUsername} –æ–Ω–ª–∞–π–Ω (–ø–æ–ª—É—á–µ–Ω pong)`);
                        resolve(true);
                        return;
                    }
                }
                
                if (Date.now() - startTime > maxWaitTime) {
                    console.log(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${friendUsername} –æ—Ñ–ª–∞–π–Ω (–Ω–µ—Ç pong)`);
                    resolve(false);
                    return;
                }
                
                setTimeout(checkPong, 100);
            };
            checkPong();
        });
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ ${friendUsername}:`, error);
        return false;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function deleteDeliveredMessages(messagesToDelete) {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${messagesToDelete.length} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await establishP2PForDeletion(currentChatFriend, messagesToDelete);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ IndexedDB
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${currentChatFriend}`;
        const messages = await db.getRecentMessages(chatId, 1000);
        
        const filteredMessages = messages.filter(msg => 
            !messagesToDelete.some(toDelete => toDelete.timestamp === msg.timestamp)
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for (const message of filteredMessages) {
            await db.saveMessage(chatId, message);
        }
        
        console.log(`‚úÖ ${messagesToDelete.length} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω–æ`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ñ–ª–∞–π–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
function showOfflineRecipientWarning(messageCount) {
    const modal = document.getElementById('deleteMessagesModal');
    if (modal) {
        modal.innerHTML = `
            <div style="background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); max-width: 400px; width: 90%;">
                <h3 style="margin: 0 0 15px 0; color: #333;">‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
                <p style="margin: 0 0 20px 0; color: #666;">
                    –£–¥–∞–ª–∏—Ç—å ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –≤ —Å–µ—Ç–∏.
                </p>
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;">
                    üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–Ω–ª–∞–π–Ω
                </div>
                <button onclick="closeDeleteModal()" 
                        style="width: 100%; padding: 12px; margin: 5px 0; background: #666; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                    ‚ùå –ü–æ–Ω—è—Ç–Ω–æ
                </button>
            </div>
        `;
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async function establishP2PForDeletion(friendUsername, messagesToDelete) {
    console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await establishP2PConnection(friendUsername);
        
        // –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
        const maxWaitTime = 30000;
        const startTime = Date.now();
        
        const waitForConnection = () => {
            return new Promise((resolve, reject) => {
                const checkConnection = () => {
                    if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connected') {
                        console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}`);
                        resolve();
                    } else if (Date.now() - startTime > maxWaitTime) {
                        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è P2P –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}`);
                        reject(new Error('P2P connection timeout'));
                    } else {
                        setTimeout(checkConnection, 100); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
                    }
                };
                checkConnection();
            });
        };
        
        await waitForConnection();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
        messagesToDelete.forEach(message => {
            sendP2PMessage(friendUsername, {
                type: 'delete_message',
                to: friendUsername,
                data: {
                    timestamp: message.timestamp,
                    from: currentUser.id
                }
            });
        });
        
        console.log(`üì§ –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ P2P –∫ ${friendUsername}`);
        
        // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—Ä–≤–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        // –±–ª–∞–≥–æ–¥–∞—Ä—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–µ shouldMaintainP2PConnection
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è P2P –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}:`, error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    }
}
