        console.log('Script started');
        // WebSocket —Å–µ—Ä–≤–µ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
        const CALLS_WEBSOCKET_URL = 'wss://lizamsg.ru:9000';  // –î–ª—è –∑–≤–æ–Ω–∫–æ–≤
        const CHAT_WEBSOCKET_URL = 'wss://lizacom.ru:9002';   // –î–ª—è —á–∞—Ç–æ–≤
        
        // WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const rtcConfig = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { 
                    urls: 'turn:89.169.141.202:3478',
                    username: 'lizaapp',
                    credential: 'lizaapp123'
                },
                { 
                    urls: 'turns:62.84.126.200:3479',
                    username: 'lizaapp',
                    credential: 'lizaapp123'
                }
            ]
        };
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        let currentUser = {
            id: null,
            ws: null,
            state: 'idle', // idle, connecting, connected, calling
            targetUser: null,
            peerConnection: null,
            isFrontCamera: true, // true = —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è, false = –æ—Å–Ω–æ–≤–Ω–∞—è
            localStream: null,
            sessionToken: null,
            isInitiator: false,
            webrtcInitiated: false,
            wsConnected: false,
            wsUserId: null,
            log: (msg, type = 'info') => {
                const logEl = document.getElementById('log');
                const time = new Date().toLocaleTimeString();
                const className = type === 'error' ? 'error' : type === 'success' ? 'success' : type === 'warning' ? 'warning' : 'info';
                logEl.innerHTML += `<div class="${className}">[${time}] ${msg}</div>`;
                logEl.scrollTop = logEl.scrollHeight;
            }
        };
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
        function connectCallsWebSocket() {
            console.log('üîå [CALLS-WS] ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö CALLS WEBSOCKET =====');
            console.log('üîå [CALLS-WS] URL:', CALLS_WEBSOCKET_URL);
            console.log('üîå [CALLS-WS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.id);
            
            return new Promise((resolve, reject) => {
                try {
                    const wsUrl = `${CALLS_WEBSOCKET_URL}?username=${encodeURIComponent(currentUser.id)}`;
                    console.log('üîå [CALLS-WS] –ü–æ–ª–Ω—ã–π URL:', wsUrl);
                    currentUser.callsWs = new WebSocket(wsUrl);
                    
                    currentUser.callsWs.onopen = () => {
                        console.log('‚úÖ [CALLS-WS] WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
                        console.log('‚úÖ [CALLS-WS] –°–æ—Å—Ç–æ—è–Ω–∏–µ:', currentUser.callsWs.readyState);
                        currentUser.callsWsConnected = true;
                        currentUser.log('üîå WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'success');
                        resolve();
                    };
                    
                    currentUser.callsWs.onmessage = (event) => {
                        console.log('üì® [CALLS-WS] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Calls WebSocket');
                        console.log('üì® [CALLS-WS] –î–∞–Ω–Ω—ã–µ:', event.data);
                        try {
                            const message = JSON.parse(event.data);
                            console.log('üì® [CALLS-WS] –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
                            handleCallsWebSocketMessage(message);
                        } catch (error) {
                            console.log('‚ùå [CALLS-WS] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                            currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤: ${error.message}`, 'error');
                        }
                    };
                    
                    currentUser.callsWs.onclose = () => {
                        currentUser.callsWsConnected = false;
                        currentUser.log('üîå WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω', 'warning');
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        if (currentUser.id) {
                            setTimeout(() => {
                                if (currentUser.id && !currentUser.callsWsConnected) {
                                    currentUser.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –∑–≤–æ–Ω–∫–æ–≤...', 'info');
                                    connectCallsWebSocket().catch(error => {
                                        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤: ${error.message}`, 'error');
                                    });
                                }
                            }, 3000);
                        }
                    };
                    
                    currentUser.callsWs.onerror = (error) => {
                        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ WebSocket –∑–≤–æ–Ω–∫–æ–≤: ${error.message}`, 'error');
                        reject(error);
                    };
                
            } catch (error) {
                    reject(error);
                }
            });
        }
        
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
        function handleCallsWebSocketMessage(message) {
            console.log('üì® [CALLS-WS] ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø CALLS WEBSOCKET =====');
            console.log('üì® [CALLS-WS] –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            console.log('üì® [CALLS-WS] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
            console.log('üì® [CALLS-WS] –û—Ç –∫–æ–≥–æ:', message.from);
            console.log('üì® [CALLS-WS] –ö–æ–º—É:', message.to);
            console.log('üì® [CALLS-WS] –î–∞–Ω–Ω—ã–µ:', message.data);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (message.type === 'connected') {
                console.log('‚úÖ [CALLS-WS] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
                currentUser.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`, 'success');
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
                if (message.userId) {
                    currentUser.wsUserId = message.userId;
                    console.log('üÜî [CALLS-WS] WebSocket ID:', message.userId);
                    currentUser.log(`üÜî WebSocket ID: ${message.userId}`, 'info');
                }
                return;
            }
            
            if (message.type === 'error') {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${message.message}`, 'error');
                return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º P2P —Å–∏–≥–Ω–∞–ª—ã
            if (message.type.startsWith('p2p_')) {
                handleP2PSignal(message);
                return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            if (message.from) {
                currentUser.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${message.type} –æ—Ç ${message.from}`, 'info');
            }
            
            switch (message.type) {
                case 'ping':
                    handlePing(message);
                    break;
                case 'pong':
                    handlePong(message);
                    break;
                case 'offer':
                    handleOffer(message);
                    break;
                case 'answer':
                    handleAnswer(message);
                    break;
                case 'ice-candidate':
                    handleIceCandidate(message);
                    break;
                case 'disconnect':
                    handleDisconnect(message);
                    break;
                case 'chat_message':
                    handleChatMessage(message);
                    break;
                default:
                    if (message.from) {
                        currentUser.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`, 'warning');
                    }
            }
        }
        
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
        function sendCallsWebSocketMessage(type, data, to = null) {
            console.log('üì§ [CALLS-WS] ===== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ß–ï–†–ï–ó CALLS WEBSOCKET =====');
            console.log('üì§ [CALLS-WS] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', type);
            console.log('üì§ [CALLS-WS] –î–∞–Ω–Ω—ã–µ:', data);
            console.log('üì§ [CALLS-WS] –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', to);
            console.log('üì§ [CALLS-WS] Calls WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', currentUser.callsWsConnected);
            console.log('üì§ [CALLS-WS] Calls WebSocket –æ–±—ä–µ–∫—Ç:', !!currentUser.callsWs);
            console.log('üì§ [CALLS-WS] Calls WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', currentUser.callsWs?.readyState);
            
            if (!currentUser.callsWsConnected || !currentUser.callsWs) {
                console.log('‚ùå [CALLS-WS] WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
                currentUser.log('‚ùå WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
                return;
            }
            
            const message = {
                type: type,
                from: currentUser.wsUserId || currentUser.id,
                to: to || currentUser.targetUser,
                data: data,
                timestamp: Date.now()
            };
            
            console.log('üì§ [CALLS-WS] –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            console.log('üì§ [CALLS-WS] JSON —Å—Ç—Ä–æ–∫–∞:', JSON.stringify(message));
            
            try {
                currentUser.callsWs.send(JSON.stringify(message));
                console.log('‚úÖ [CALLS-WS] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Calls WebSocket');
                currentUser.log(`‚úÖ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`, 'success');
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${type}: ${error.message}`, 'error');
            }
        }
        
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
        function showPasswordField(event) {
            const passwordField = document.getElementById('userPassword');
            const loginButton = event.target;
            
            if (passwordField.style.display === 'none') {
                passwordField.style.display = 'block';
                loginButton.textContent = '–í–æ–π—Ç–∏';
                loginButton.onclick = () => startUser();
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async function startUser() {
            const username = document.getElementById('userId').value;
            const password = document.getElementById('userPassword').value;
            
            if (!username) {
                currentUser.log(`‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω`, 'error');
                return;
            }
            
            if (!password) {
                currentUser.log(`‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å`, 'error');
                return;
            }
            
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            currentUser.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}...`, 'info');
            
            try {
                const response = await fetch('api/login.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        username: username,
                        password: password
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    currentUser.id = username;
                    currentUser.sessionToken = data.sessionToken;
                    
                    
                    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chat WebSocket —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    connectChatWebSocket();
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    startConnectionMonitoring();
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
                    localStorage.setItem('userData', JSON.stringify({
                        username: username,
                        userId: data.userId,
                        sessionToken: data.sessionToken
                    }));
                    
                    currentUser.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`, 'success');
                        } else {
                    currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${data.error}`, 'error');
                    return;
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º`, 'error');
                return;
            }
            
            currentUser.lastSignalId = Math.floor(Date.now() / 1000) - 60; // –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            currentUser.state = 'idle';
            currentUser.targetUser = null;
            currentUser.isInitiator = false;
            currentUser.webrtcInitiated = false;
            currentUser.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.id} –≥–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º`, 'success');
            currentUser.log(`‚è∞ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ä—à–µ: ${currentUser.lastSignalId}`, 'info');
            currentUser.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'info');
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞–º
            try {
                await connectCallsWebSocket();
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: ${error.message}`, 'error');
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateUI();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥—Ä—É–∑–µ–π
            showFriendsSection();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ localStorage
            loadChatMessagesFromStorage();
            
            currentUser.log(`üìπ –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ`, 'info');
        }
        
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        function updateUI() {
            const loginSection = document.getElementById('loginSection');
            const userInfo = document.getElementById('userInfo');
            const headerUserInfo = document.getElementById('headerUserInfo');
            const userStatus = document.getElementById('userStatus');
            const currentUserId = document.getElementById('currentUserId');
            const userAvatar = document.getElementById('userAvatar');
            const startCallBtn = document.getElementById('startCallBtn');
            const disconnectBtn = document.getElementById('disconnectBtn');
            const resetBtn = document.querySelector('button[onclick="resetUser()"]');
            
            if (currentUser.id) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                loginSection.style.display = 'none';
                userInfo.style.display = 'block';
                headerUserInfo.style.display = 'flex';
                currentUserId.textContent = currentUser.id;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ë–î
                loadUserAvatar();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                userStatus.textContent = getStatusText();
                userStatus.className = `status ${currentUser.state}`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                if (currentUser.state === 'idle') {
                startCallBtn.style.display = 'inline-block';
                startCallBtn.disabled = false;
                disconnectBtn.style.display = 'none';
                    resetBtn.style.display = 'inline-block';
                } else if (currentUser.state === 'connecting' || currentUser.state === 'connected' || currentUser.state === 'calling') {
                    startCallBtn.style.display = 'none';
                    disconnectBtn.style.display = 'inline-block';
                    disconnectBtn.disabled = false;
                    resetBtn.style.display = 'inline-block';
                }
                } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                loginSection.style.display = 'block';
                userInfo.style.display = 'none';
            }
        }
        
        function getStatusText() {
            switch (currentUser.state) {
                case 'idle': return '–ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º';
                case 'connecting': return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
                case 'connected': return '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
                case 'calling': return '–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω';
                default: return '–û—Ç–∫–ª—é—á–µ–Ω';
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞
        async function startAudioCall() {
            const targetId = document.getElementById('targetUserId').value;
            
            if (!targetId) {
                currentUser.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'error');
                return;
            }
            
            if (currentUser.state !== 'idle') {
                currentUser.log(`‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –≤—ã–∑–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'error');
                return;
            }
            
            currentUser.log(`üéµ –ù–∞—á–∏–Ω–∞–µ–º –∞—É–¥–∏–æ –∑–≤–æ–Ω–æ–∫ –∫ ${targetId}`, 'info');
            currentUser.state = 'connecting';
            currentUser.targetUser = targetId;
            currentUser.isInitiator = true;
            currentUser.webrtcInitiated = false;
            updateUI();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∑–≤–æ–Ω—è—â–µ–≥–æ –¥–ª—è –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞
            updateAudioCallerName(targetId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ WebSocket —Å —Ç–∏–ø–æ–º –∞—É–¥–∏–æ
            currentUser.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫ ${targetId}`, 'info');
            sendCallsWebSocketMessage('ping', { timestamp: Date.now(), callType: 'audio' }, targetId);
        }
        
        async function startCall() {
            const targetId = document.getElementById('targetUserId').value;
            
            if (!targetId) {
                currentUser.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'error');
                return;
            }
            
            if (currentUser.state !== 'idle') {
                currentUser.log(`‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –≤—ã–∑–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'error');
                return;
            }
            
            currentUser.log(`üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∫ ${targetId}`, 'info');
            currentUser.state = 'connecting';
            currentUser.targetUser = targetId;
            currentUser.isInitiator = true;
            currentUser.webrtcInitiated = false;
            updateUI();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —á–µ—Ä–µ–∑ WebSocket
            currentUser.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫ ${targetId}`, 'info');
            sendCallsWebSocketMessage('ping', { timestamp: Date.now(), callType: 'video' }, targetId);
        }
        
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ ping
        async function handlePing(signal) {
            if (currentUser.state !== 'idle') {
                currentUser.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ping –æ—Ç ${signal.from} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'warning');
                    return;
                }
                
            currentUser.log(`üèì –ü–æ–ª—É—á–µ–Ω ping –æ—Ç ${signal.from}`, 'info');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
            incomingCall.isActive = true;
            incomingCall.caller = signal.from;
            incomingCall.offer = null; // offer –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω
            incomingCall.iceCandidates = [];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∑–≤–æ–Ω—è—â–µ–≥–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            updateIncomingCallerName(signal.from);
            document.getElementById('incomingCallModal').style.display = 'flex';
            
            currentUser.log(`üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${signal.from}`, 'info');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞
            const callType = signal.data.callType || 'video';
            const isAudioCall = callType === 'audio';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏
            incomingCall.callType = callType;
            
            console.log('üìû [INCOMING] ===== –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö =====');
            console.log('üìû [INCOMING] –û—Ç –∫–æ–≥–æ:', signal.from);
            console.log('üìû [INCOMING] –¢–∏–ø –∑–≤–æ–Ω–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö:', signal.data.callType);
            console.log('üìû [INCOMING] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –∑–≤–æ–Ω–∫–∞:', callType);
            console.log('üìû [INCOMING] –≠—Ç–æ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫:', isAudioCall);
            console.log('üìû [INCOMING] –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ incomingCall.callType:', incomingCall.callType);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞
            try {
                if (isAudioCall) {
                    currentUser.log(`üéµ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –∞—É–¥–∏–æ –∑–≤–æ–Ω–∫–∞...`, 'info');
                    currentUser.localStream = await navigator.mediaDevices.getUserMedia({ 
                        video: false,  // –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ!
                        audio: true 
                    });
                    } else {
                    currentUser.log(`üìπ –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ –∑–≤–æ–Ω–∫–∞...`, 'info');
                    currentUser.localStream = await navigator.mediaDevices.getUserMedia({ 
                        video: true, 
                        audio: true 
                    });
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∞—É–¥–∏–æ)
                const localVideoStream = createLocalVideoStream(currentUser.localStream);
                const localVideo = document.getElementById('localVideo');
                localVideo.srcObject = localVideoStream;
                
                // –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                localVideo.muted = true;
                localVideo.volume = 0;
                localVideo.setAttribute('muted', 'true');
                
                currentUser.log(`‚úÖ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${currentUser.localStream.getTracks().length} —Ç—Ä–µ–∫–æ–≤`, 'success');
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–µ–∫–æ–≤
                currentUser.localStream.getTracks().forEach(track => {
                    currentUser.log(`üìπ –¢—Ä–µ–∫: ${track.kind}, enabled: ${track.enabled}, readyState: ${track.readyState}`, 'info');
                });
                
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞: ${error.message}`, 'error');
                // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                hideIncomingCallModal();
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pong
        function handlePong(signal) {
            if (currentUser.state === 'connecting' && currentUser.targetUser === signal.from) {
                currentUser.log(`üèì –ü–æ–ª—É—á–µ–Ω pong –æ—Ç ${signal.from} - —Å–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`, 'success');
                currentUser.state = 'connected';
                updateUI();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∑–≤–æ–Ω—è—â–µ–≥–æ
                startCallTimer();
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞—É–¥–∏–æ
                resetAudioControls();
                
                // –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–≤–æ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç offer –ø–æ—Å–ª–µ pong
                if (currentUser.isInitiator) {
                    initiateWebRTC();
                }
                    } else {
                currentUser.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º pong –æ—Ç ${signal.from} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'warning');
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        async function initiateWebRTC() {
            if (currentUser.state !== 'connected' || currentUser.webrtcInitiated) {
                currentUser.log(`‚ö†Ô∏è –ù–µ –º–æ–∂–µ–º –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å WebRTC - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}, initiated: ${currentUser.webrtcInitiated}`, 'warning');
                return;
            }
            
            currentUser.webrtcInitiated = true;
            currentUser.log(`üé• –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ`, 'info');
            
            try {
                // –°–æ–∑–¥–∞–µ–º PeerConnection
                currentUser.peerConnection = new RTCPeerConnection(rtcConfig);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
                if (currentUser.localStream) {
                    currentUser.localStream.getTracks().forEach(track => {
                        currentUser.peerConnection.addTrack(track, currentUser.localStream);
                        currentUser.log(`üìπ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: ${track.kind}`, 'info');
                    });
                    currentUser.log(`üìπ –î–æ–±–∞–≤–ª–µ–Ω–æ ${currentUser.localStream.getTracks().length} —Ç—Ä–µ–∫–æ–≤ –≤ PeerConnection`, 'success');
                } else {
                    currentUser.log(`‚ùå –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ PeerConnection`, 'error');
                }
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                currentUser.peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        sendSignal('ice-candidate', event.candidate);
                    }
                };
                
                currentUser.peerConnection.ontrack = (event) => {
                    currentUser.log('üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫', 'success');
                    currentUser.log(`üìπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: ${event.streams.length}`, 'info');
                    currentUser.log(`üìπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: ${event.track.kind}`, 'info');
                    document.getElementById('remoteVideo').srcObject = event.streams[0];
                };
                
                currentUser.peerConnection.onconnectionstatechange = () => {
                    currentUser.log(`üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${currentUser.peerConnection.connectionState}`, 'info');
                    if (currentUser.peerConnection.connectionState === 'connected') {
                        currentUser.log('‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                        currentUser.state = 'calling';
                        updateUI();
                    }
                };
                
                // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º offer
                const offer = await currentUser.peerConnection.createOffer();
                await currentUser.peerConnection.setLocalDescription(offer);
                
                await sendSignal('offer', offer);
                currentUser.log('‚úÖ Offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
                
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ WebRTC: ${error.message}`, 'error');
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ offer
        async function handleOffer(signal) {
            if (currentUser.state !== 'connecting' || currentUser.targetUser !== signal.from) {
                currentUser.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º offer - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}, target: ${currentUser.targetUser}`, 'warning');
                return;
            }
            
            currentUser.log(`üì• –ü–æ–ª—É—á–µ–Ω offer –æ—Ç ${signal.from}`, 'info');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤
            if (!currentUser.localStream) {
                currentUser.log(`‚ùå –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ PeerConnection (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)`, 'error');
                return;
            }
            
            try {
                // –°–æ–∑–¥–∞–µ–º PeerConnection
                currentUser.peerConnection = new RTCPeerConnection(rtcConfig);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
                currentUser.localStream.getTracks().forEach(track => {
                    currentUser.peerConnection.addTrack(track, currentUser.localStream);
                    currentUser.log(`üìπ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: ${track.kind} (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)`, 'info');
                });
                currentUser.log(`üìπ –î–æ–±–∞–≤–ª–µ–Ω–æ ${currentUser.localStream.getTracks().length} —Ç—Ä–µ–∫–æ–≤ –≤ PeerConnection (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)`, 'success');
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                currentUser.peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        sendSignal('ice-candidate', event.candidate);
                    }
                };
                
                currentUser.peerConnection.ontrack = (event) => {
                    currentUser.log('üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)', 'success');
                    currentUser.log(`üìπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: ${event.streams.length} (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)`, 'info');
                    currentUser.log(`üìπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: ${event.track.kind} (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)`, 'info');
                    document.getElementById('remoteVideo').srcObject = event.streams[0];
                };
                
                currentUser.peerConnection.onconnectionstatechange = () => {
                    currentUser.log(`üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${currentUser.peerConnection.connectionState}`, 'info');
                    if (currentUser.peerConnection.connectionState === 'connected') {
                        currentUser.log('‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                        currentUser.state = 'calling';
                        updateUI();
                    }
                };
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                await currentUser.peerConnection.setRemoteDescription(signal.data);
                
                // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º answer
                const answer = await currentUser.peerConnection.createAnswer();
                await currentUser.peerConnection.setLocalDescription(answer);
                
                await sendSignal('answer', answer);
                currentUser.log('‚úÖ Answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å" —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                const disconnectBtn = document.getElementById(`disconnectBtn_${signal.from}`);
                const callBtn = document.getElementById(`callBtn_${signal.from}`);
                
                if (disconnectBtn) disconnectBtn.style.display = 'inline-block';
                if (callBtn) callBtn.style.display = 'none';
                
                                } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer: ${error.message}`, 'error');
            }
        }
        
        // –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        async function acceptIncomingCall() {
            if (!incomingCall.isActive) return;
            
            currentUser.log(`‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ –æ—Ç ${incomingCall.caller}`, 'success');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
            sendCallsWebSocketMessage('pong', { received: true }, incomingCall.caller);
            currentUser.log('‚úÖ pong –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞
            const callType = incomingCall.callType || 'video';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            currentUser.state = 'connecting';
            currentUser.targetUser = incomingCall.caller;
            currentUser.isInitiator = false;
            currentUser.webrtcInitiated = false;
            currentUser.callType = callType; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞
            updateUI();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
            hideIncomingCallModal();
            
            console.log('‚úÖ [ACCEPT] ===== –ü–†–ò–ù–Ø–¢–ò–ï –ó–í–û–ù–ö–ê =====');
            console.log('‚úÖ [ACCEPT] incomingCall.callType:', incomingCall.callType);
            console.log('‚úÖ [ACCEPT] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –∑–≤–æ–Ω–∫–∞:', callType);
            console.log('‚úÖ [ACCEPT] –≠—Ç–æ –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫:', callType === 'audio');
            
            if (callType === 'audio') {
                console.log('üéµ [ACCEPT] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
                document.getElementById('audioCallContainer').style.display = 'block';
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∑–≤–æ–Ω—è—â–µ–≥–æ –¥–ª—è –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞
                updateAudioCallerName(incomingCall.caller || 'user1');
            } else {
                console.log('üé¨ [ACCEPT] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
                document.getElementById('videoCallContainer').style.display = 'block';
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
                setTimeout(() => {
                    forceSpeakerForVideoCall();
                }, 500);
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
            startCallTimer();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞—É–¥–∏–æ
            resetAudioControls();
            
            currentUser.log(`‚è≥ –ñ–¥–µ–º offer –æ—Ç ${incomingCall.caller}...`, 'info');
        }
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
        let callStartTime = null;
        let callTimerInterval = null;
        
        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
        function startCallTimer() {
            if (callTimerInterval) {
                clearInterval(callTimerInterval);
            }
            
            callStartTime = Date.now();
            console.log('‚è∞ [TIMER] –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞');
            
            callTimerInterval = setInterval(() => {
                updateCallTimer();
            }, 1000);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
        function updateCallTimer() {
            if (!callStartTime) return;
            
            const elapsed = Date.now() - callStartTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            
            const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –≤ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–µ
            const audioTimer = document.getElementById('audioCallTimer');
            if (audioTimer) {
                audioTimer.textContent = timeString;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –≤ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const videoTimer = document.getElementById('videoCallTimer');
            if (videoTimer) {
                videoTimer.textContent = timeString;
            }
        }
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
        function stopCallTimer() {
            if (callTimerInterval) {
                clearInterval(callTimerInterval);
                callTimerInterval = null;
            }
            callStartTime = null;
            console.log('‚è∞ [TIMER] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            const audioTimer = document.getElementById('audioCallTimer');
            if (audioTimer) {
                audioTimer.textContent = '00:00';
            }
            
            const videoTimer = document.getElementById('videoCallTimer');
            if (videoTimer) {
                videoTimer.textContent = '00:00';
            }
        }
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ
        let isMicrophoneMuted = false;
        let isSpeakerphoneOn = false;
        let isVideoMicrophoneMuted = false;
        let isVideoCameraMuted = false;
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞ –±–µ–∑ –∞—É–¥–∏–æ
        function createLocalVideoStream(stream) {
            const localVideoStream = new MediaStream();
            const videoTracks = stream.getVideoTracks();
            videoTracks.forEach(track => localVideoStream.addTrack(track));
            return localVideoStream;
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫ –ø—Ä–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–µ
        // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        async function forceSpeakerForVideoCall() {
            console.log('üì± [VIDEO-AUDIO] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
            console.log('üåê [VIDEO-AUDIO] –í –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏–∫');
            
            // –í –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (navigator.userAgent.includes('Mobile')) {
                console.log('üì± [VIDEO-AUDIO] –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏–∫ –≤—Ä—É—á–Ω—É—é');
            }
        }
        
        
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∞—É–¥–∏–æ
        function resetAudioControls() {
            isMicrophoneMuted = false;
            isSpeakerphoneOn = false;
            isVideoMicrophoneMuted = false;
            isVideoCameraMuted = false;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞
            const micBtn = document.getElementById('audioMicrophoneBtn');
            if (micBtn) {
                const micIcon = micBtn.querySelector('i');
                micIcon.className = 'fas fa-microphone';
                micBtn.classList.remove('muted', 'active');
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≥—Ä–æ–º–∫–æ–π —Å–≤—è–∑–∏
            const speakerBtn = document.getElementById('speakerphoneBtn');
            if (speakerBtn) {
                const speakerIcon = speakerBtn.querySelector('i');
                speakerIcon.className = 'fas fa-volume-down';
                speakerBtn.classList.remove('active');
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
            const videoMicBtn = document.getElementById('videoMicrophoneBtn');
            if (videoMicBtn) {
                const videoMicIcon = videoMicBtn.querySelector('i');
                videoMicIcon.className = 'fas fa-microphone';
                videoMicBtn.classList.remove('muted', 'active');
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
            const videoCamBtn = document.getElementById('videoCameraBtn');
            if (videoCamBtn) {
                const videoCamIcon = videoCamBtn.querySelector('i');
                videoCamIcon.className = 'fas fa-video';
                videoCamBtn.classList.remove('muted', 'active');
            }
            
            console.log('üîÑ [AUDIO] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞—É–¥–∏–æ —Å–±—Ä–æ—à–µ–Ω–æ');
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        function toggleMicrophone() {
            if (!currentUser.localStream) {
                console.log('‚ùå [MIC] –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞');
                return;
            }
            
            const audioTracks = currentUser.localStream.getAudioTracks();
            if (audioTracks.length === 0) {
                console.log('‚ùå [MIC] –ù–µ—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤');
                return;
            }
            
            isMicrophoneMuted = !isMicrophoneMuted;
            audioTracks.forEach(track => {
                track.enabled = !isMicrophoneMuted;
            });
            
            const micBtn = document.getElementById('audioMicrophoneBtn');
            const micIcon = micBtn.querySelector('i');
            
            if (isMicrophoneMuted) {
                micIcon.className = 'fas fa-microphone-slash';
                micBtn.classList.add('muted');
                micBtn.classList.remove('active');
                console.log('üîá [MIC] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω');
            } else {
                micIcon.className = 'fas fa-microphone';
                micBtn.classList.remove('muted');
                micBtn.classList.add('active');
                console.log('üé§ [MIC] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω');
            }
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ–π —Å–≤—è–∑–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
        function toggleSpeakerphone() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if (window.innerWidth >= 769) {
                console.log('‚ö†Ô∏è [SPEAKER] –ö–Ω–æ–ø–∫–∞ –≥—Ä–æ–º–∫–æ–π —Å–≤—è–∑–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ü–ö');
                return;
            }
            
            isSpeakerphoneOn = !isSpeakerphoneOn;
            
            const speakerBtn = document.getElementById('speakerphoneBtn');
            const speakerIcon = speakerBtn.querySelector('i');
            
            if (isSpeakerphoneOn) {
                speakerIcon.className = 'fas fa-volume-up';
                speakerBtn.classList.add('active');
                console.log('üîä [SPEAKER] –ì—Ä–æ–º–∫–∞—è —Å–≤—è–∑—å –≤–∫–ª—é—á–µ–Ω–∞');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –¥–∏–Ω–∞–º–∏–∫
            } else {
                speakerIcon.className = 'fas fa-volume-down';
                speakerBtn.classList.remove('active');
                console.log('üîâ [SPEAKER] –ì—Ä–æ–º–∫–∞—è —Å–≤—è–∑—å –æ—Ç–∫–ª—é—á–µ–Ω–∞');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏
            }
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–µ
        function toggleVideoMicrophone() {
            if (!currentUser.localStream) {
                console.log('‚ùå [VIDEO-MIC] –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞');
                return;
            }
            
            const audioTracks = currentUser.localStream.getAudioTracks();
            if (audioTracks.length === 0) {
                console.log('‚ùå [VIDEO-MIC] –ù–µ—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤');
                return;
            }
            
            isVideoMicrophoneMuted = !isVideoMicrophoneMuted;
            audioTracks.forEach(track => {
                track.enabled = !isVideoMicrophoneMuted;
            });
            
            const micBtn = document.getElementById('videoMicrophoneBtn');
            const micIcon = micBtn.querySelector('i');
            
            if (isVideoMicrophoneMuted) {
                micIcon.className = 'fas fa-microphone-slash';
                micBtn.classList.add('muted');
                micBtn.classList.remove('active');
                console.log('üîá [VIDEO-MIC] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω');
            } else {
                micIcon.className = 'fas fa-microphone';
                micBtn.classList.remove('muted');
                micBtn.classList.add('active');
                console.log('üé§ [VIDEO-MIC] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω');
            }
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–µ
        function toggleVideoCamera() {
            if (!currentUser.localStream) {
                console.log('‚ùå [VIDEO-CAM] –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞');
                return;
            }
            
            const videoTracks = currentUser.localStream.getVideoTracks();
            if (videoTracks.length === 0) {
                console.log('‚ùå [VIDEO-CAM] –ù–µ—Ç –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–æ–≤');
                return;
            }
            
            isVideoCameraMuted = !isVideoCameraMuted;
            videoTracks.forEach(track => {
                track.enabled = !isVideoCameraMuted;
            });
            
            const camBtn = document.getElementById('videoCameraBtn');
            const camIcon = camBtn.querySelector('i');
            
            if (isVideoCameraMuted) {
                camIcon.className = 'fas fa-video-slash';
                camBtn.classList.add('muted');
                camBtn.classList.remove('active');
                console.log('üìπ [VIDEO-CAM] –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            } else {
                camIcon.className = 'fas fa-video';
                camBtn.classList.remove('muted');
                camBtn.classList.add('active');
                console.log('üìπ [VIDEO-CAM] –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞');
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∑–≤–æ–Ω—è—â–µ–≥–æ –¥–ª—è –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞
        function updateAudioCallerName(callerUsername) {
            console.log('üöÄ [AUDIO-CALL] –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê! callerUsername:', callerUsername);
            const audioCallerName = document.getElementById('audioCallerName');
            const chatFriendName = document.getElementById('chatFriendName');
            
            console.log('üë§ [AUDIO-CALL] ===== –û–¢–õ–ê–î–ö–ê –ò–ú–ï–ù–ò =====');
            console.log('üë§ [AUDIO-CALL] callerUsername:', callerUsername);
            console.log('üë§ [AUDIO-CALL] audioCallerName —ç–ª–µ–º–µ–Ω—Ç:', !!audioCallerName);
            console.log('üë§ [AUDIO-CALL] chatFriendName —ç–ª–µ–º–µ–Ω—Ç:', !!chatFriendName);
            console.log('üë§ [AUDIO-CALL] chatFriendName —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', chatFriendName?.textContent);
            console.log('üë§ [AUDIO-CALL] chatFriendName –¥–ª–∏–Ω–∞:', chatFriendName?.textContent?.length);
            console.log('üë§ [AUDIO-CALL] chatFriendName —Ä–∞–≤–µ–Ω "–î—Ä—É–≥–æ–º":', chatFriendName?.textContent === '–î—Ä—É–≥–æ–º');
            
            if (audioCallerName) {
                if (chatFriendName && chatFriendName.textContent && chatFriendName.textContent !== '–î—Ä—É–≥–æ–º') {
                    // –ë–µ—Ä–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ chatFriendName
                    audioCallerName.textContent = chatFriendName.textContent;
                    console.log('üë§ [AUDIO-CALL] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ chatFriendName:', chatFriendName.textContent);
                } else {
                    // –ï—Å–ª–∏ chatFriendName –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "–î—Ä—É–≥–æ–º", –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ fallback
                    const displayName = callerUsername || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                    audioCallerName.textContent = displayName;
                    console.log('üë§ [AUDIO-CALL] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ fallback:', displayName);
                }
                console.log('üë§ [AUDIO-CALL] –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ audioCallerName:', audioCallerName.textContent);
            } else {
                console.log('‚ùå [AUDIO-CALL] audioCallerName —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∑–≤–æ–Ω—è—â–µ–≥–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        function updateIncomingCallerName(callerUsername) {
            const callerName = document.getElementById('callerName');
            const chatFriendName = document.getElementById('chatFriendName');
            
            console.log('üë§ [INCOMING-CALL] ===== –û–¢–õ–ê–î–ö–ê –ò–ú–ï–ù–ò =====');
            console.log('üë§ [INCOMING-CALL] callerUsername:', callerUsername);
            console.log('üë§ [INCOMING-CALL] callerName —ç–ª–µ–º–µ–Ω—Ç:', !!callerName);
            console.log('üë§ [INCOMING-CALL] chatFriendName —ç–ª–µ–º–µ–Ω—Ç:', !!chatFriendName);
            console.log('üë§ [INCOMING-CALL] chatFriendName —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', chatFriendName?.textContent);
            console.log('üë§ [INCOMING-CALL] chatFriendName –¥–ª–∏–Ω–∞:', chatFriendName?.textContent?.length);
            
            if (callerName && chatFriendName && chatFriendName.textContent && chatFriendName.textContent !== '–î—Ä—É–≥–æ–º') {
                // –ë–µ—Ä–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ chatFriendName
                callerName.textContent = chatFriendName.textContent;
                console.log('üë§ [INCOMING-CALL] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ chatFriendName:', chatFriendName.textContent);
            } else {
                // –ï—Å–ª–∏ chatFriendName –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "–î—Ä—É–≥–æ–º", –∏—Å–ø–æ–ª—å–∑—É–µ–º username
                if (callerName && callerUsername) {
                    callerName.textContent = callerUsername;
                    console.log('üë§ [INCOMING-CALL] –ò—Å–ø–æ–ª—å–∑—É–µ–º username:', callerUsername);
                }
            }
        }
        
        // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        async function rejectIncomingCall() {
            if (!incomingCall.isActive) return;
            
            currentUser.log(`‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –æ—Ç ${incomingCall.caller}`, 'warning');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
            stopCallTimer();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞—É–¥–∏–æ
            resetAudioControls();
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
            if (currentUser.localStream) {
                currentUser.localStream.getTracks().forEach(track => track.stop());
                currentUser.localStream = null;
                document.getElementById('localVideo').srcObject = null;
                currentUser.log('üìπ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º disconnect —Å–∏–≥–Ω–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∑–≤–æ–Ω–∫–∞
            sendCallsWebSocketMessage('disconnect', { reason: 'call_rejected' }, incomingCall.caller);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
            hideIncomingCallModal();
        }
        
        // –°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        function hideIncomingCallModal() {
            document.getElementById('incomingCallModal').style.display = 'none';
            incomingCall.isActive = false;
            incomingCall.caller = null;
            incomingCall.offer = null;
            incomingCall.iceCandidates = [];
            
            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if (incomingCall.callTimeout) {
                clearTimeout(incomingCall.callTimeout);
                incomingCall.callTimeout = null;
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ answer
        async function handleAnswer(signal) {
            if (currentUser.state !== 'connected') {
                currentUser.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º answer - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentUser.state}`, 'warning');
                return;
            }

            currentUser.log(`üì• –ü–æ–ª—É—á–µ–Ω answer –æ—Ç ${signal.from}`, 'info');
            
            try {
                if (currentUser.peerConnection) {
                    await currentUser.peerConnection.setRemoteDescription(signal.data);
                    currentUser.log('‚úÖ Offer/Answer –æ–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
                    currentUser.state = 'calling';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å" —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                    const disconnectBtn = document.getElementById(`disconnectBtn_${signal.from}`);
                    const callBtn = document.getElementById(`callBtn_${signal.from}`);
                    
                    if (disconnectBtn) disconnectBtn.style.display = 'inline-block';
                    if (callBtn) callBtn.style.display = 'none';
                    
                    updateUI();
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer: ${error.message}`, 'error');
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        async function handleIceCandidate(signal) {
            if (currentUser.peerConnection) {
                try {
                    await currentUser.peerConnection.addIceCandidate(signal.data);
                    currentUser.log(`üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç ${signal.from}`, 'info');
                                } catch (error) {
                    currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: ${error.message}`, 'error');
                }
                            } else {
                currentUser.log(`‚ö†Ô∏è PeerConnection –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç`, 'warning');
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ disconnect
        async function handleDisconnect(signal) {
            currentUser.log(`üì• –ü–æ–ª—É—á–µ–Ω disconnect –æ—Ç ${signal.from}`, 'warning');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –∑–≤–æ–Ω–∏–ª
            if (currentUser.targetUser === signal.from || (incomingCall.isActive && incomingCall.caller === signal.from)) {
                
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏
                if (signal.data && signal.data.reason === 'call_rejected') {
                    currentUser.log(`‚ùå ${signal.from} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–≤–æ–Ω–æ–∫`, 'warning');
                            } else {
                    currentUser.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ`, 'warning');
                }
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–≤–æ–Ω–æ–∫, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (currentUser.peerConnection) {
                    currentUser.peerConnection.close();
                    currentUser.peerConnection = null;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
                currentUser.log('üìû –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
                if (currentUser.localStream) {
                    currentUser.localStream.getTracks().forEach(track => track.stop());
                    currentUser.localStream = null;
                    document.getElementById('localVideo').srcObject = null;
                    currentUser.log('üìπ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
                }
                
                // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏ —á–∞—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    document.getElementById('videoCallContainer').style.display = 'none';
                    document.getElementById('audioCallContainer').style.display = 'none';
                    document.getElementById('chatContainer').style.display = 'none';
                    currentChatFriend = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                }, 1500);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–∑–µ–π
                restoreFriendButtons();
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
                currentUser.state = 'idle';
                currentUser.targetUser = null;
                currentUser.isInitiator = false;
                currentUser.webrtcInitiated = false;
                
                document.getElementById('remoteVideo').srcObject = null;
                
                // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
                if (incomingCall.isActive) {
                    hideIncomingCallModal();
                }
                
                updateUI();
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
        function sendSignal(type, data) {
            sendCallsWebSocketMessage(type, data);
        }
        
        // ===== –°–ò–°–¢–ï–ú–ê –°–û–û–ë–©–ï–ù–ò–ô =====
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞
        let currentChatFriend = null;
        let chatMessages = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥—Ä—É–∑—å—è–º
        let unreadMessages = {}; // –°—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        let chatNotificationSound = null; // –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        // ===== P2P –°–ò–°–¢–ï–ú–ê =====
        
        // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–¥–∏–Ω –Ω–∞ –¥—Ä—É–≥–∞)
        let p2pConnections = {}; // {friendUsername: {connection, dataChannel, status}}
        let messageQueues = {}; // {friendUsername: [messages]} - –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        let pingIntervals = {}; // {friendUsername: intervalId} - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ping-–ø–æ–Ω–≥
        let connectionTimeouts = {}; // {friendUsername: timeoutId} - —Ç–∞–π–º–∞—É—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è P2P
        const P2P_CONFIG = {
            pingInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            pingTimeout: 10000,  // 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è pong
            maxRetries: 5,       // 5 –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
            retryTimeout: 300000, // 5 –º–∏–Ω—É—Ç –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
            inactiveTimeout: 300000 // 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        };
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –¥—Ä—É–≥–æ–º
        function openChat(friendUsername) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
            document.getElementById('chatFriendName').textContent = friendUsername;
            document.getElementById('chatContainer').style.display = 'block';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ localStorage
            localStorage.setItem('currentChatFriend', friendUsername);
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—É—â–∏–π —á–∞—Ç: ${friendUsername}`);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –°–†–ê–ó–£ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
            unreadMessages[friendUsername] = 0;
            updateUnreadIndicator(friendUsername);
            updateFriendsList();
            
            console.log(`üî¥ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è ${friendUsername}:`, unreadMessages[friendUsername]);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
            initializeChat(friendUsername);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chat WebSocket
        let chatConnectionAttempts = 0;
        const maxChatConnectionAttempts = 3;

        function initializeChat(friendUsername) {
            currentChatFriend = friendUsername;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            unreadMessages[friendUsername] = 0;
            updateUnreadIndicator(friendUsername);
            updateFriendsList();
            
            console.log(`üî¥ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –≤ initializeChat –¥–ª—è ${friendUsername}:`, unreadMessages[friendUsername]);
            
            // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            document.getElementById('chatMessages').innerHTML = '';
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –°–†–ê–ó–£, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            loadChatHistory(friendUsername);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (messageQueues[friendUsername] && messageQueues[friendUsername].length > 0) {
                const deleteCommands = messageQueues[friendUsername].filter(cmd => cmd.type === 'delete_message');
                if (deleteCommands.length > 0) {
                    console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${deleteCommands.length} –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è ${friendUsername}`);
                }
            }
            
            // –û—Ç–ª–∞–¥–∫–∞ localStorage
            debugLocalStorage();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Chat WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è P2P
            if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
                console.log('‚úÖ Chat WebSocket –≥–æ—Ç–æ–≤ –¥–ª—è P2P');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                const hasP2PConnection = p2pConnections[friendUsername] && 
                                      p2pConnections[friendUsername].dataChannel && 
                                      p2pConnections[friendUsername].dataChannel.readyState === 'open' &&
                                      p2pConnections[friendUsername].status === 'connected';
                
                if (hasP2PConnection) {
                    console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
                } else {
                    console.log(`üì° P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${friendUsername} –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping`);
                    sendP2PSignal('ping', { to: friendUsername });
                }
            } else {
                console.log('‚ùå Chat WebSocket –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è P2P, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
                connectChatWebSocket();
                
                // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º P2P –ª–æ–≥–∏–∫—É
                setTimeout(() => {
                    if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
                        sendP2PSignal('ping', { to: friendUsername });
                    }
                }, 2000);
            }
        }
        
        // ===== P2P –§–£–ù–ö–¶–ò–ò =====
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–æ–º
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ establishP2PConnection
        const establishingConnections = new Set();
        
        async function establishP2PConnection(friendUsername) {
            console.log(`üîß establishP2PConnection –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ${friendUsername}`);
            console.log(`üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π:`, {
                isEstablishing: establishingConnections.has(friendUsername),
                hasConnection: !!p2pConnections[friendUsername],
                connectionStatus: p2pConnections[friendUsername]?.status,
                establishingConnections: Array.from(establishingConnections)
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (establishingConnections.has(friendUsername)) {
                console.log(`‚ö†Ô∏è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connected') {
                console.log(`P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ`);
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            establishingConnections.add(friendUsername);
            
            try {
                
                updateChatStatus('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...', '');
                
                // –°–æ–∑–¥–∞–µ–º RTCPeerConnection
                const connection = new RTCPeerConnection({
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:stun1.l.google.com:19302' },
                        { urls: 'stun:stun2.l.google.com:19302' }
                    ],
                    iceCandidatePoolSize: 5 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—É–ª ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                });
                
                // –°–æ–∑–¥–∞–µ–º Data Channel
                const dataChannel = connection.createDataChannel('chat', {
                    ordered: true
                });
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Data Channel
                setupDataChannelHandlers(dataChannel, friendUsername);
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                setupP2PHandlers(connection, dataChannel, friendUsername);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                p2pConnections[friendUsername] = {
                    connection: connection,
                    dataChannel: dataChannel,
                    status: 'connecting',
                    lastActivity: Date.now(),
                    connectionTimeout: null
                };
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)
                p2pConnections[friendUsername].connectionTimeout = setTimeout(() => {
                    if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connecting') {
                        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${friendUsername}`);
                        updateChatStatus('–¢–∞–π–º–∞—É—Ç P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
                        closeP2PConnection(friendUsername);
                    }
                }, 30000);
                
                // –°–æ–∑–¥–∞–µ–º offer
                console.log(`üì§ –°–æ–∑–¥–∞–µ–º offer –¥–ª—è ${friendUsername}`);
                const offerStartTime = Date.now();
                const offer = await connection.createOffer();
                await connection.setLocalDescription(offer);
                console.log(`‚è±Ô∏è Offer —Å–æ–∑–¥–∞–Ω –∑–∞ ${Date.now() - offerStartTime}ms`);
                console.log(`‚úÖ Offer —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${friendUsername}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
                sendP2PSignal('offer', {
                    to: friendUsername,
                    offer: offer
                });
                console.log(`üì§ Offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ ${friendUsername}`);
                
                // –ï—Å–ª–∏ Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ STUN
                if (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN) {
                    console.log('‚ö†Ô∏è Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ STUN —Å–µ—Ä–≤–µ—Ä—ã');
                    updateChatStatus('P2P —á–µ—Ä–µ–∑ STUN —Å–µ—Ä–≤–µ—Ä—ã...', '');
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chat WebSocket
                    setTimeout(() => {
                        if (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN) {
                            console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chat WebSocket...');
                            connectChatWebSocket();
                        }
                    }, 2000);
                }
                
                // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ offer
                establishingConnections.delete(friendUsername);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
                updateChatStatus('–û—à–∏–±–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
            } finally {
                // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                establishingConnections.delete(friendUsername);
            }
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        function setupP2PHandlers(connection, dataChannel, friendUsername) {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            connection.ondatachannel = (event) => {
                const incomingChannel = event.channel;
                setupDataChannelHandlers(incomingChannel, friendUsername);
            };
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            connection.onicecandidate = (event) => {
                if (event.candidate) {
                    sendP2PSignal('ice-candidate', {
                        to: friendUsername,
                        candidate: event.candidate
                    });
                }
            };
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection.onconnectionstatechange = () => {
                const state = connection.connectionState;
                console.log(`P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername}: ${state}`);
                
                if (state === 'connected') {
                    if (p2pConnections[friendUsername]) {
                        p2pConnections[friendUsername].status = 'connected';
                    }
                    updateChatStatus('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'connected');
                    
                    // –ù–∞—á–∏–Ω–∞–µ–º ping-–ø–æ–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    startPingPongMonitoring(friendUsername);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    sendQueuedMessages(friendUsername);
                } else if (state === 'disconnected' || state === 'failed') {
                    if (p2pConnections[friendUsername]) {
                        p2pConnections[friendUsername].status = 'disconnected';
                    }
                    updateChatStatus('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ping-–ø–æ–Ω–≥
                    stopPingPongMonitoring(friendUsername);
                }
            };
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Data Channel
            setupDataChannelHandlers(dataChannel, friendUsername);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Data Channel
        function setupDataChannelHandlers(dataChannel, friendUsername) {
            if (!dataChannel) {
                console.log(`‚ö†Ô∏è Data Channel –¥–ª—è ${friendUsername} –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤`);
                return;
            }
            
            dataChannel.onopen = () => {
                console.log(`Data Channel —Å ${friendUsername} –æ—Ç–∫—Ä—ã—Ç`);
                if (p2pConnections[friendUsername]) {
                    p2pConnections[friendUsername].status = 'connected';
                    p2pConnections[friendUsername].dataChannel = dataChannel; // –°–æ—Ö—Ä–∞–Ω—è–µ–º Data Channel
                    p2pConnections[friendUsername].lastActivity = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                }
                updateChatStatus('P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'connected');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                sendQueuedMessages(friendUsername);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º ping-–ø–æ–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                startPingPongMonitoring(friendUsername);
            };
            
            dataChannel.onclose = () => {
                console.log(`Data Channel —Å ${friendUsername} –∑–∞–∫—Ä—ã—Ç`);
                if (p2pConnections[friendUsername]) {
                    p2pConnections[friendUsername].status = 'disconnected';
                }
            };
            
            dataChannel.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    handleP2PMessage(message, friendUsername);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ P2P —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ chat —Å–µ—Ä–≤–µ—Ä
        function sendP2PSignal(type, data) {
            if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
                const signalData = {
                    type: `p2p_${type}`,
                    from: currentUser.id,
                    to: data.to,
                    data: data
                };
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º P2P —Å–∏–≥–Ω–∞–ª:`, signalData);
                window.chatWs.send(JSON.stringify(signalData));
                console.log(`üì§ P2P —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${type} –∫ ${data.to}`);
            } else {
                console.log(`‚ö†Ô∏è Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è P2P —Å–∏–≥–Ω–∞–ª–∞ ${type}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                console.log(`‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ Chat WebSocket:`, window.chatWs ? window.chatWs.readyState : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å –∫–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç
        function getCurrentChatUserId() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏
            const chatContainer = document.getElementById('chatContainer');
            if (!chatContainer || chatContainer.style.display === 'none' || !currentChatFriend) {
                return 0;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            const friend = friendsData.friends.find(f => f.username === currentChatFriend);
            return friend ? friend.contact_user_id : 0;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö P2P —Å–∏–≥–Ω–∞–ª–æ–≤
        function handleP2PSignal(signal) {
            const { type, from, data } = signal;
            
            console.log(`üì® –ü–æ–ª—É—á–µ–Ω P2P —Å–∏–≥–Ω–∞–ª: ${type} –æ—Ç ${from}`);
            
            switch (type) {
                case 'p2p_offer':
                    handleP2POffer(from, data.offer);
                    break;
                case 'p2p_answer':
                    handleP2PAnswer(from, data.answer);
                    break;
                case 'p2p_ice-candidate':
                    handleP2PICECandidate(from, data.candidate);
                    break;
                case 'p2p_ping':
                    handleP2PPing(from);
                    break;
                case 'p2p_pong':
                    handleP2PPong(from);
                    break;
                case 'p2p_error':
                    console.log(`‚ùå P2P –æ—à–∏–±–∫–∞: ${data ? data.error : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                    console.log(`‚ùå P2P –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, data);
                    updateChatStatus('P2P –æ—à–∏–±–∫–∞: ' + (data ? data.error : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
                    if (data && data.error === '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω') {
                        console.log('üì¨ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏');
                        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –≤ sendChatMessage
                        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    }
                    break;
                default:
                    console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π P2P —Å–∏–≥–Ω–∞–ª: ${type}`);
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P offer
        async function handleP2POffer(from, offer) {
            try {
                console.log(`üì• –ü–æ–ª—É—á–µ–Ω P2P offer –æ—Ç ${from}`);
                
                if (!p2pConnections[from]) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ
                    const connection = new RTCPeerConnection({
                        iceServers: [
                            { urls: 'stun:stun.l.google.com:19302' },
                            { urls: 'stun:stun1.l.google.com:19302' }
                        ]
                    });
                    
                    // –°–æ–∑–¥–∞–µ–º Data Channel –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    const dataChannel = connection.createDataChannel('chat', {
                        ordered: true
                    });
                    
                    p2pConnections[from] = {
                        connection: connection,
                        dataChannel: dataChannel,
                        status: 'connecting',
                        lastActivity: Date.now()
                    };
                    
                    setupP2PHandlers(connection, dataChannel, from);
                }
                
                await p2pConnections[from].connection.setRemoteDescription(offer);
                const answer = await p2pConnections[from].connection.createAnswer();
                await p2pConnections[from].connection.setLocalDescription(answer);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                if (p2pConnections[from].pendingCandidates) {
                    for (const candidate of p2pConnections[from].pendingCandidates) {
                        try {
                            await p2pConnections[from].connection.addIceCandidate(candidate);
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
                        }
                    }
                    p2pConnections[from].pendingCandidates = [];
                }
                
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º P2P answer –∫ ${from}`);
                sendP2PSignal('answer', {
                    to: from,
                    answer: answer
                });
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P offer:', error);
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P answer
        async function handleP2PAnswer(from, answer) {
            try {
                console.log(`üì• –ü–æ–ª—É—á–µ–Ω P2P answer –æ—Ç ${from}`);
                
                if (p2pConnections[from]) {
                    await p2pConnections[from].connection.setRemoteDescription(answer);
                    console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${from} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P answer:', error);
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        async function handleP2PICECandidate(from, candidate) {
            try {
                if (p2pConnections[from] && p2pConnections[from].connection) {
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                    const MAX_ICE_CANDIDATES = 10;
                    if (!p2pConnections[from].iceCandidateCount) {
                        p2pConnections[from].iceCandidateCount = 0;
                    }
                    
                    if (p2pConnections[from].iceCandidateCount >= MAX_ICE_CANDIDATES) {
                        console.log(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è ${from} (${MAX_ICE_CANDIDATES}), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    if (p2pConnections[from].connection.remoteDescription) {
                        await p2pConnections[from].connection.addIceCandidate(candidate);
                        p2pConnections[from].iceCandidateCount++;
                        console.log(`‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${from} (${p2pConnections[from].iceCandidateCount}/${MAX_ICE_CANDIDATES})`);
                    } else {
                        console.log(`‚è≥ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–ª–æ–∂–µ–Ω –¥–ª—è ${from} (–∂–¥–µ–º remote description)`);
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
                        if (!p2pConnections[from].pendingCandidates) {
                            p2pConnections[from].pendingCandidates = [];
                        }
                        p2pConnections[from].pendingCandidates.push(candidate);
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P ping
        function handleP2PPing(from) {
            console.log(`üì® –ü–æ–ª—É—á–µ–Ω ping –æ—Ç ${from}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º pong —á–µ—Ä–µ–∑ WebSocket`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong —á–µ—Ä–µ–∑ WebSocket —Å–µ—Ä–≤–µ—Ä
            if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
                const pongMessage = {
                    type: 'p2p_pong',
                    from: currentUser.id,
                    to: from,
                    data: {
                        timestamp: Date.now()
                    }
                };
                
                window.chatWs.send(JSON.stringify(pongMessage));
                console.log(`‚úÖ Pong –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket –∫ ${from}`);
            } else {
                console.log(`‚ùå Chat WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ pong`);
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P pong
        function handleP2PPong(from) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω pong –æ—Ç ${from} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (p2pConnections[from]) {
                p2pConnections[from].lastPong = Date.now();
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${from} –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è pong`);
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π P2P:`, {
                hasConnection: !!p2pConnections[from],
                connectionStatus: p2pConnections[from]?.status,
                isEstablishing: establishingConnections.has(from)
            });
            establishP2PConnection(from);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ P2P —Å–æ–æ–±—â–µ–Ω–∏–π
        function handleP2PMessage(message, friendUsername) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (message.data && message.data.from === currentUser.id) {
                console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${friendUsername}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞–º
            if (message.to && message.to !== currentUser.id) {
                console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (${message.to}), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
                return;
            }
            
            switch (message.type) {
                case 'chat_message':
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ IndexedDB
                    saveIncomingMessage(friendUsername, message.data.message, friendUsername, message.data.timestamp, message.data.type);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
                    if (currentChatFriend === friendUsername) {
                        addChatMessage(message.data.message, friendUsername, message.data.timestamp, message.data.type);
                    } else {
                        // –ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        showChatNotification(friendUsername, message.data.message);
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
                    sendP2PMessage(friendUsername, {
                        type: 'message_received',
                        to: friendUsername,
                        timestamp: Date.now(),
                        originalTimestamp: message.data.timestamp
                    });
                    break;
                case 'message_received':
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    if (message.data && message.data.originalTimestamp) {
                        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏:`, {
                            from: message.from,
                            friendUsername,
                            originalTimestamp: message.data.originalTimestamp,
                            currentChatFriend,
                            isCorrectSender: message.from === friendUsername,
                            isActiveChat: currentChatFriend === friendUsername
                        });
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ, –∫–æ–º—É –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                        if (message.from === friendUsername) {
                            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç ${friendUsername}`);
                        } else {
                            console.log(`‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: –æ–∂–∏–¥–∞–ª–∏ ${friendUsername}, –ø–æ–ª—É—á–∏–ª–∏ ${message.from}`);
                        }
                    }
                    break;
                case 'ping':
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º pong
                    sendP2PMessage(friendUsername, {
                        type: 'pong',
                        to: friendUsername,
                        timestamp: Date.now()
                    });
                    break;
                case 'pong':
                    console.log(`–ü–æ–ª—É—á–µ–Ω pong –æ—Ç ${friendUsername}`);
                    if (p2pConnections[friendUsername]) {
                        p2pConnections[friendUsername].lastPong = Date.now();
                    }
                    break;
                case 'delete_message':
                    console.log(`üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${friendUsername}:`, message.data);
                    if (message.data && message.data.timestamp) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–¥–∞–ª–µ–Ω–∏—è
                        window.deleteSystem.handleDeleteCommand(message.data.timestamp, friendUsername);
                    }
                    break;
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ P2P —Å–æ–æ–±—â–µ–Ω–∏—è
        function sendP2PMessage(friendUsername, message) {
            if (p2pConnections[friendUsername] && 
                p2pConnections[friendUsername].dataChannel && 
                p2pConnections[friendUsername].dataChannel.readyState === 'open') {
                
                try {
                    p2pConnections[friendUsername].dataChannel.send(JSON.stringify(message));
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    p2pConnections[friendUsername].lastActivity = Date.now();
                    console.log(`üì§ P2P —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ ${friendUsername}:`, message.type);
                    return true;
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ P2P —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    return false;
                }
            }
            console.log(`‚ùå P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
            return false;
        }
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä—É
        function connectChatWebSocket() {
            if (!currentUser.id) return;
            
            // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (window.chatWs && window.chatWs.readyState === WebSocket.OPEN) {
                console.log('‚úÖ Chat WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
                return;
            }
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∂–¥–µ–º
            if (window.chatWs && window.chatWs.readyState === WebSocket.CONNECTING) {
                console.log('‚è≥ Chat WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...');
                return;
            }
            
            try {
                console.log(`üîå –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${CHAT_WEBSOCKET_URL}`);
                const chatWs = new WebSocket(CHAT_WEBSOCKET_URL);
                
                chatWs.onopen = () => {
                    console.log(`‚úÖ Chat WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
                    window.chatWs = chatWs; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ WebSocket
                    updateChatStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä—É', 'connected');
                    
                    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                    chatWs.send(JSON.stringify({
                        type: 'auth',
                        data: { userId: currentUser.id }
                    }));
                    console.log(`üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
                };
                
                chatWs.onerror = (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Chat WebSocket:', error);
                    updateChatStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä—É', 'error');
                };
                
                chatWs.onclose = (event) => {
                    console.log('‚ùå Chat WebSocket –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
                    updateChatStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ', 'disconnected');
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    if (currentUser.id) {
                        setTimeout(() => {
                            if (currentUser.id && (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN)) {
                                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chat WebSocket...');
                                connectChatWebSocket();
                            }
                        }, 3000);
                    }
                };
                
                chatWs.onmessage = (event) => {
                    try {
                        const message = JSON.parse(event.data);
                        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Chat WebSocket –¥–ª—è ${currentUser.id}:`, message.type);
                        console.log(`üì® –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, message);
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                        if (message.type === 'error') {
                            console.log(`‚ùå –û—à–∏–±–∫–∞ Chat WebSocket: ${message.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                            console.log(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, message);
                            updateChatStatus(`–û—à–∏–±–∫–∞: ${message.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
                            return;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ P2P —Å–∏–≥–Ω–∞–ª–æ–º
                        if (message.type && message.type.startsWith('p2p_')) {
                            handleP2PSignal(message);
                        } else if (message.type === 'auth_success') {
                            console.log(`‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);
                        } else {
                            handleChatMessage(message);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:', error);
                    }
                };
                
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                window.chatWs = chatWs;
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Chat WebSocket:', error);
                updateChatStatus('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        function handleChatMessage(message) {
            switch (message.type) {
                case 'auth_success':
                    updateChatStatus('–ß–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', 'connected');
                    break;
                case 'chat_message':
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if (message.from !== currentUser.id) {
                        // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const senderUsername = message.from;
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–≤—Å–µ–≥–¥–∞)
                        saveIncomingMessage(senderUsername, message.data.message, message.from, message.data.timestamp, message.data.type);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                        if (currentChatFriend === senderUsername) {
                            addChatMessage(message.data.message, message.from, message.data.timestamp, message.data.type);
                        } else {
                            // –ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            showChatNotification(senderUsername, message.data.message);
                        }
                    }
                    break;
                case 'error':
                    updateChatStatus('–û—à–∏–±–∫–∞ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–∞: ' + message.message, 'error');
                    break;
            }
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        function addChatMessage(message, from, timestamp, type, isFromHistory = false, status = null) {
            console.log('üîç addChatMessage –≤—ã–∑–≤–∞–Ω–∞:', {
                message: message,
                from: from,
                timestamp: timestamp,
                type: type,
                isFromHistory: isFromHistory,
                currentUser: currentUser
            });
            
            const chatMessages = document.getElementById('chatMessages');
            if (!chatMessages) {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç chatMessages –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return;
            }
            
            const messageDiv = document.createElement('div');
            
            const isOwn = from === currentUser.id;
            const messageId = `${from}_${timestamp}_${Math.random().toString(36).substr(2, 9)}`;
            messageDiv.setAttribute('data-timestamp', timestamp);
            messageDiv.setAttribute('data-message-id', messageId);
            messageDiv.className = 'message-item';
            messageDiv.style.cssText = `
                margin: 10px 0;
                padding: 10px 15px;
                border-radius: 15px;
                max-width: 70%;
                word-wrap: break-word;
                background: ${isOwn ? '#4CAF50' : '#e0e0e0'};
                color: ${isOwn ? 'white' : '#333'};
                margin-left: ${isOwn ? 'auto' : '0'};
                text-align: ${isOwn ? 'right' : 'left'};
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            messageDiv.onclick = () => toggleMessageSelection(timestamp.toString());
            
            if (type === 'emoji') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                const isOnlyEmoji = /^[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]+$/u.test(message);
                
                if (isOnlyEmoji) {
                    // –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ - –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
                    const statusHTML = isOwn ? getMessageStatusHTML(status, timestamp) : '';
                    messageDiv.innerHTML = `
                        <div style="font-size: 24px;">${message}</div>
                        <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(timestamp).toLocaleTimeString()}</div>
                        ${statusHTML}
                    `;
                } else {
                    // –°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    const statusHTML = isOwn ? getMessageStatusHTML(status, timestamp) : '';
                    messageDiv.innerHTML = `
                        <div style="font-size: 16px;">${message}</div>
                        <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(timestamp).toLocaleTimeString()}</div>
                        ${statusHTML}
                    `;
                }
            } else {
                const statusHTML = isOwn ? getMessageStatusHTML(status, timestamp) : '';
                messageDiv.innerHTML = `
                    <div>${message}</div>
                    <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(timestamp).toLocaleTimeString()}</div>
                    ${statusHTML}
                `;
            }
            
            chatMessages.appendChild(messageDiv);
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            if (!isFromHistory) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            
            // –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            if (currentChatFriend === from) {
                unreadMessages[from] = 0;
                updateUnreadIndicator(from);
                updateFriendsList();
                console.log(`üî¥ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –≤ addChatMessage –¥–ª—è ${from}:`, unreadMessages[from]);
            }
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ HTML –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function getMessageStatusHTML(status, timestamp) {
            if (!status) return '';
            
            switch (status) {
                case 'not_sent':
                    return `<div class="message-status" style="font-size: 10px; opacity: 0.8; margin-top: 3px; color: #ff9800;">‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è</div>`;
                case 'sent':
                    return `<div class="message-status" style="font-size: 10px; opacity: 0.8; margin-top: 3px; color: #4caf50;">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>`;
                case 'cancelled':
                    return `<div class="message-status" style="font-size: 10px; opacity: 0.8; margin-top: 3px; color: #f44336;">
                        <span style="color: #f44336;">‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ</span>
                    </div>`;
                default:
                    return '';
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
        function updateMessageStatusInUI(timestamp, status) {
            const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
            if (messageElement) {
                const statusElement = messageElement.querySelector('.message-status');
                if (statusElement) {
                    statusElement.outerHTML = getMessageStatusHTML(status, timestamp);
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB
        async function updateMessageStatusInDB(friendUsername, timestamp, status) {
            try {
                if (!currentUser || !currentUser.id) {
                    console.error('‚ùå currentUser –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ IndexedDB');
                    return;
                }
                
                const db = await initMessageDB();
                const chatId = `chat_${currentUser.id}_${friendUsername}`;
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                const messages = await db.getRecentMessages(chatId, 1000);
                
                // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º timestamp
                const messageIndex = messages.findIndex(msg => msg.timestamp === timestamp);
                
                if (messageIndex !== -1) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages[messageIndex].status = status;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ IndexedDB
                    await db.saveMessage(chatId, messages[messageIndex]);
                    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ IndexedDB: ${status}`);
                } else {
                    console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å timestamp ${timestamp} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞`);
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB:', error);
            }
        }
        
        
        // ===== –°–ò–°–¢–ï–ú–ê –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô =====
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è
        function initDeleteSystem() {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            updateSelectionMenu();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–µ–Ω—é –¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            document.addEventListener('click', function(event) {
                const menu = document.getElementById('selectionMenu');
                const trigger = document.querySelector('.menu-trigger');
                
                if (menu && menu.classList.contains('show') && 
                    !menu.contains(event.target) && 
                    !trigger.contains(event.target)) {
                    menu.classList.remove('show');
                }
            });
        }
        
        // –í—ã–¥–µ–ª–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        function toggleMessageSelection(timestamp) {
            const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
            if (!messageElement) return;
            
            if (selectedMessages.has(timestamp)) {
                // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                selectedMessages.delete(timestamp);
                messageElement.classList.remove('selected');
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                selectedMessages.add(timestamp);
                messageElement.classList.add('selected');
            }
            
            updateSelectionMenu();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        function updateSelectionMenu() {
            const inputPanel = document.getElementById('chatInputPanel');
            const menu = document.getElementById('selectedMessagesMenu');
            const count = document.getElementById('selectedCount');
            
            if (!menu || !count || !inputPanel) return;
            
            if (selectedMessages.size > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
                inputPanel.style.display = 'none';
                menu.style.display = 'flex';
                count.textContent = selectedMessages.size;
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞, —Å–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
                inputPanel.style.display = 'flex';
                menu.style.display = 'none';
            }
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        function toggleSelectionMenu() {
            const menu = document.getElementById('selectionMenu');
            if (!menu) return;
            
            menu.classList.toggle('show');
        }
        
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        function copySelectedMessages() {
            if (selectedMessages.size === 0) return;
            
            const messages = [];
            selectedMessages.forEach(timestamp => {
                const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
                if (messageElement) {
                    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–π div), –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
                    const messageText = messageElement.querySelector('div:first-child')?.textContent || '';
                    if (messageText.trim()) {
                        messages.push(messageText.trim());
                    }
                }
            });
            
            const textToCopy = messages.join('\n');
            navigator.clipboard.writeText(textToCopy).then(() => {
                console.log('üìã –°–æ–æ–±—â–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                
                // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                selectedMessages.forEach(timestamp => {
                    const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
                    if (messageElement) {
                        messageElement.classList.remove('selected');
                    }
                });
                
                // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                selectedMessages.clear();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é (–æ–Ω–æ –∏—Å—á–µ–∑–Ω–µ—Ç)
                updateSelectionMenu();
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
                const menu = document.getElementById('selectionMenu');
                if (menu) menu.classList.remove('show');
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            });
        }
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        function resendSelectedMessages() {
            if (selectedMessages.size === 0) return;
            
            const messages = [];
            selectedMessages.forEach(timestamp => {
                const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
                if (messageElement) {
                    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–π div), –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
                    const messageText = messageElement.querySelector('div:first-child')?.textContent || '';
                    if (messageText.trim()) {
                        messages.push(messageText.trim());
                    }
                }
            });
            
            if (messages.length === 0) {
                console.log('‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
                return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.forEach((messageText, index) => {
                setTimeout(() => {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    const messageInput = document.getElementById('chatMessageInput');
                    if (messageInput) {
                        messageInput.value = messageText;
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        sendChatMessage();
                    }
                }, index * 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ 500–º—Å
            });
            
            console.log(`üì§ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
            
            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            selectedMessages.forEach(timestamp => {
                const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
                if (messageElement) {
                    messageElement.classList.remove('selected');
                }
            });
            
            // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            selectedMessages.clear();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é (–æ–Ω–æ –∏—Å—á–µ–∑–Ω–µ—Ç)
            updateSelectionMenu();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            const menu = document.getElementById('selectionMenu');
            if (menu) menu.classList.remove('show');
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        async function deleteSelectedMessages() {
            if (selectedMessages.size === 0) return;
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            const menu = document.getElementById('selectionMenu');
            if (menu) menu.classList.remove('show');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–ø—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
            showDeleteOptionsModal();
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–ø—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        function showDeleteOptionsModal() {
            const modal = document.createElement('div');
            modal.id = 'deleteMessagesModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                z-index: 10000;
                display: flex;
                justify-content: center;
                align-items: center;
            `;
            
            const selectedCount = selectedMessages.size;
            const canDeleteFromRecipient = canDeleteMessagesFromRecipient();
            
            modal.innerHTML = `
                <div style="background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); max-width: 400px; width: 90%;">
                    <h3 style="margin: 0 0 15px 0; color: #333;">–£–¥–∞–ª–∏—Ç—å ${selectedCount} —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
                    <p style="margin: 0 0 20px 0; color: #666;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è:</p>
                    
                    <button onclick="deleteMessagesLocally()" 
                            style="width: 100%; padding: 12px; margin: 5px 0; background: #ff9800; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —É –º–µ–Ω—è (${selectedCount} —Å–æ–æ–±—â–µ–Ω–∏–π)
                    </button>
                    
                    ${canDeleteFromRecipient ? `
                    <button onclick="deleteMessagesGlobally()" 
                            style="width: 100%; padding: 12px; margin: 5px 0; background: #f44336; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É –º–µ–Ω—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (${selectedCount} —Å–æ–æ–±—â–µ–Ω–∏–π)
                    </button>
                    ` : ''}
                    
                    <div style="background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;">
                        ‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> ${canDeleteFromRecipient ? 
                            '–°–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —É–¥–∞–ª–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞' : 
                            '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ - –∏—Ö –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —É —Å–µ–±—è'}
                    </div>
                    
                    <button onclick="closeDeleteModal()" 
                            style="width: 100%; padding: 12px; margin: 5px 0; background: #666; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                        ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            `;
            
            document.body.appendChild(modal);
        }
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è
        function closeDeleteModal() {
            const modal = document.getElementById('deleteMessagesModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        function canDeleteMessagesFromRecipient() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ö–æ–¥—è—â–∏–µ (–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ)
            let hasIncomingMessages = false;
            
            for (const timestamp of selectedMessages) {
                const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
                if (messageElement) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–º (–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º)
                    const isOwn = messageElement.style.marginLeft === 'auto';
                    if (!isOwn) {
                        hasIncomingMessages = true;
                    }
                }
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            if (hasIncomingMessages) {
                return false;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const outgoingMessages = Array.from(selectedMessages).map(timestamp => {
                return {
                    timestamp: parseInt(timestamp),
                    status: 'sent'
                };
            });
            
            return window.deleteSystem.canDeleteGlobally(outgoingMessages);
        }
        
        // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        async function deleteMessagesLocally() {
            console.log(`üóëÔ∏è deleteMessagesLocally –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ${selectedMessages.size} —Å–æ–æ–±—â–µ–Ω–∏–π`);
            console.log(`üîç –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, Array.from(selectedMessages));
            console.log(`üîç –¢–µ–∫—É—â–∏–π —á–∞—Ç: ${currentChatFriend}`);
            console.log(`üîç window.deleteSystem –¥–æ—Å—Ç—É–ø–µ–Ω:`, typeof window.deleteSystem);
            console.log(`üîç performLocalDeletion –¥–æ—Å—Ç—É–ø–Ω–∞:`, typeof window.deleteSystem?.performLocalDeletion);
            
            try {
                const db = await initMessageDB();
                const chatId = `chat_${currentUser.id}_${currentChatFriend}`;
                const messages = await db.getRecentMessages(chatId, 1000);
                
                console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ IndexedDB`);
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                const messagesToDelete = [];
                for (const message of messages) {
                    const isSelected = selectedMessages.has(message.timestamp.toString());
                    console.log(`üîç –°–æ–æ–±—â–µ–Ω–∏–µ ${message.timestamp}: isSelected = ${isSelected}`);
                    if (isSelected) {
                        messagesToDelete.push(message);
                    }
                }
                
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`, messagesToDelete);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ del.js
                if (typeof window.deleteSystem.performLocalDeletion === 'function') {
                    console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è performLocalDeletion –¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º...`);
                    await window.deleteSystem.performLocalDeletion(messagesToDelete, currentChatFriend);
                } else {
                    console.log(`‚ùå –§—É–Ω–∫—Ü–∏—è performLocalDeletion –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!`);
                }
                
                // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                clearSelection();
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            }
            
            closeDeleteModal();
        }
        
        // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        async function deleteMessagesGlobally() {
            console.log(`üóëÔ∏è –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ${selectedMessages.size} —Å–æ–æ–±—â–µ–Ω–∏–π`);
            
            try {
                const db = await initMessageDB();
                const chatId = `chat_${currentUser.id}_${currentChatFriend}`;
                const messages = await db.getRecentMessages(chatId, 1000);
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const messagesToDelete = [];
                const messagesToCancel = [];
                
                for (const message of messages) {
                    if (selectedMessages.has(message.timestamp.toString())) {
                        if (message.status === 'sent') {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            if (window.deleteSystem.isMessageTooOld(message.timestamp)) {
                                console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${message.timestamp} —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è`);
                                window.deleteSystem.showDeleteWarning('–£–¥–∞–ª–µ–Ω–∏–µ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ - –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)');
                                continue;
                            }
                            messagesToDelete.push(message);
                        } else if (message.status === 'not_sent' || message.status === 'cancelled') {
                            messagesToCancel.push(message);
                        }
                    }
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                if (messagesToCancel.length > 0) {
                    console.log(`üö´ –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ${messagesToCancel.length} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
                    messagesToCancel.forEach(message => {
                        updateMessageStatusInUI(message.timestamp, 'cancelled');
                        updateMessageStatusInDB(currentChatFriend, message.timestamp, 'cancelled');
                    });
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                if (messagesToDelete.length > 0) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    if (!window.deleteSystem.checkMessageAgeAndShowWarning(messagesToDelete)) {
                        closeDeleteModal();
                        return;
                    }
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                    await window.deleteSystem.performGlobalDeletion(messagesToDelete, currentChatFriend);
                }
                
                // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                clearSelection();
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            }
            
            closeDeleteModal();
        }
        
        // –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
        function hideMessageInUI(timestamp) {
            const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
            if (messageElement) {
                messageElement.style.display = 'none';
            }
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        function clearSelection() {
            selectedMessages.forEach(timestamp => {
                const messageElement = document.querySelector(`[data-timestamp="${timestamp}"]`);
                if (messageElement) {
                    messageElement.classList.remove('selected');
                }
            });
            selectedMessages.clear();
            updateSelectionMenu();
        }
        
        // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ IndexedDB
        async function deleteMessageFromDB(timestamp, friendUsername) {
            try {
                const db = await initMessageDB();
                const chatId = `chat_${currentUser.id}_${friendUsername}`;
                
                console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${timestamp} –∏–∑ IndexedDB –¥–ª—è ${friendUsername}`);
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                const messages = await db.getRecentMessages(chatId, 1000);
                console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ IndexedDB`);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª—è–µ–º–æ–µ
                const filteredMessages = messages.filter(msg => msg.timestamp.toString() !== timestamp.toString());
                
                console.log(`üìö –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
                
                if (filteredMessages.length < messages.length) {
                    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ
                    await db.clearMessages(chatId);
                    
                    for (const message of filteredMessages) {
                        await db.saveMessage(chatId, message);
                    }
                    
                    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${timestamp} —É–¥–∞–ª–µ–Ω–æ –∏–∑ IndexedDB`);
                } else {
                    console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${timestamp} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB`);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ IndexedDB:', error);
            }
        }
        
        // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        function addDeleteCommandToQueue(friendUsername, timestamp) {
            if (!deleteCommandQueue[friendUsername]) {
                deleteCommandQueue[friendUsername] = [];
            }
            
            const deleteCommand = {
                timestamp: timestamp,
                from: currentUser.id,
                addedAt: Date.now(),
                attempts: 0
            };
            
            deleteCommandQueue[friendUsername].push(deleteCommand);
            console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${friendUsername}: ${timestamp}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        function sendDeleteCommandViaWebSocket(friendUsername, timestamp) {
            if (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN) {
                console.log(`‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è`);
                return false;
            }
            
            const deleteCommand = {
                type: 'delete_message',
                to: friendUsername,
                from: currentUser.id,
                data: {
                    timestamp: timestamp,
                    from: currentUser.id
                },
                timestamp: Date.now()
            };
            
            try {
                window.chatWs.send(JSON.stringify(deleteCommand));
                console.log(`üì§ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ WebSocket –∫ ${friendUsername}: ${timestamp}`);
                return true;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:', error);
                return false;
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è
        function processDeleteCommandQueue(friendUsername) {
            if (!deleteCommandQueue[friendUsername] || deleteCommandQueue[friendUsername].length === 0) {
                return;
            }
            
            console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${friendUsername}: ${deleteCommandQueue[friendUsername].length} –∫–æ–º–∞–Ω–¥`);
            
            const commands = deleteCommandQueue[friendUsername];
            const now = Date.now();
            const maxAge = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫–æ–º–∞–Ω–¥—ã
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            const validCommands = commands.filter(cmd => (now - cmd.addedAt) < maxAge);
            
            if (validCommands.length === 0) {
                console.log(`‚è∞ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${friendUsername} —É—Å—Ç–∞—Ä–µ–ª–∏, –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å`);
                deleteCommandQueue[friendUsername] = [];
                return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ WebSocket
            validCommands.forEach(command => {
                command.attempts++;
                const success = sendDeleteCommandViaWebSocket(friendUsername, command.timestamp);
                
                if (success) {
                    console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è ${command.timestamp} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${command.attempts})`);
                } else {
                    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è ${command.timestamp} (–ø–æ–ø—ã—Ç–∫–∞ ${command.attempts})`);
                }
            });
            
            // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            deleteCommandQueue[friendUsername] = validCommands.filter(cmd => cmd.attempts < 3);
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è
        function startDeleteCommandProcessor() {
            setInterval(() => {
                Object.keys(deleteCommandQueue).forEach(friendUsername => {
                    if (deleteCommandQueue[friendUsername].length > 0) {
                        processDeleteCommandQueue(friendUsername);
                    }
                });
            }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        async function checkRecipientOnlineStatus(friendUsername) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${friendUsername}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connected') {
                console.log(`‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${friendUsername} –æ–Ω–ª–∞–π–Ω (P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ)`);
                return true;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
            try {
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫ ${friendUsername}`);
                sendP2PSignal('ping', { to: friendUsername });
                
                // –ñ–¥–µ–º pong –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
                const maxWaitTime = 10000;
                const startTime = Date.now();
                
                return new Promise((resolve) => {
                    const checkPong = () => {
                        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º pong –æ—Ç ${friendUsername}, –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${Date.now() - startTime}–º—Å`);
                        
                        if (p2pConnections[friendUsername] && p2pConnections[friendUsername].lastPong) {
                            const pongTime = p2pConnections[friendUsername].lastPong;
                            const timeSincePong = Date.now() - pongTime;
                            console.log(`üì® Pong –ø–æ–ª—É—á–µ–Ω ${timeSincePong}–º—Å –Ω–∞–∑–∞–¥`);
                            
                            if (timeSincePong < 5000) { // Pong –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–µ–∫—É–Ω–¥
                                console.log(`‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${friendUsername} –æ–Ω–ª–∞–π–Ω (–ø–æ–ª—É—á–µ–Ω pong)`);
                                resolve(true);
                                return;
                            }
                        }
                        
                        if (Date.now() - startTime > maxWaitTime) {
                            console.log(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${friendUsername} –æ—Ñ–ª–∞–π–Ω (–Ω–µ—Ç pong –∑–∞ ${maxWaitTime}–º—Å)`);
                            resolve(false);
                            return;
                        }
                        
                        setTimeout(checkPong, 100);
                    };
                    checkPong();
                });
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ ${friendUsername}:`, error);
                return false;
            }
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        async function deleteDeliveredMessages(messagesToDelete) {
            console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${messagesToDelete.length} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                await establishP2PForDeletion(currentChatFriend, messagesToDelete);
                
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ IndexedDB
                const db = await initMessageDB();
                const chatId = `chat_${currentUser.id}_${currentChatFriend}`;
                const messages = await db.getRecentMessages(chatId, 1000);
                
                const filteredMessages = messages.filter(msg => 
                    !messagesToDelete.some(toDelete => toDelete.timestamp === msg.timestamp)
                );
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for (const message of filteredMessages) {
                    await db.saveMessage(chatId, message);
                }
                
                console.log(`‚úÖ ${messagesToDelete.length} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω–æ`);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            }
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ñ–ª–∞–π–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
        function showOfflineRecipientWarning(messageCount) {
            const modal = document.getElementById('deleteMessagesModal');
            if (modal) {
                modal.innerHTML = `
                    <div style="background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); max-width: 400px; width: 90%;">
                        <h3 style="margin: 0 0 15px 0; color: #333;">‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
                        <p style="margin: 0 0 20px 0; color: #666;">
                            –£–¥–∞–ª–∏—Ç—å ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –≤ —Å–µ—Ç–∏.
                        </p>
                        <div style="background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;">
                            üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–Ω–ª–∞–π–Ω
                        </div>
                        <button onclick="closeDeleteModal()" 
                                style="width: 100%; padding: 12px; margin: 5px 0; background: #666; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                            ‚ùå –ü–æ–Ω—è—Ç–Ω–æ
                        </button>
                    </div>
                `;
            }
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        async function establishP2PForDeletion(friendUsername, messagesToDelete) {
            console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
            
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                await establishP2PConnection(friendUsername);
                
                // –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
                const maxWaitTime = 30000;
                const startTime = Date.now();
                
                const waitForConnection = () => {
                    return new Promise((resolve, reject) => {
                        const checkConnection = () => {
                            if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connected') {
                                console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}`);
                                resolve();
                            } else if (Date.now() - startTime > maxWaitTime) {
                                console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è P2P –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}`);
                                reject(new Error('P2P connection timeout'));
                            } else {
                                setTimeout(checkConnection, 100); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
                            }
                        };
                        checkConnection();
                    });
                };
                
                await waitForConnection();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
                messagesToDelete.forEach(message => {
                    sendP2PMessage(friendUsername, {
                        type: 'delete_message',
                        to: friendUsername,
                        data: {
                            timestamp: message.timestamp,
                            from: currentUser.id
                        }
                    });
                });
                
                console.log(`üì§ –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ P2P –∫ ${friendUsername}`);
                
                // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—Ä–≤–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                // –±–ª–∞–≥–æ–¥–∞—Ä—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–µ shouldMaintainP2PConnection
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è P2P –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}:`, error);
                throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            }
        }
        
        // ===== –ó–í–û–ù–ö–ò –ò–ó –ß–ê–¢–ê =====
        
        // –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∏–∑ —á–∞—Ç–∞
        function callFriendFromChat() {
            console.log('üé¨ [CHAT] –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –Ω–∞–∂–∞—Ç–∞ –≤ —á–∞—Ç–µ');
            console.log('üé¨ [CHAT] –¢–µ–∫—É—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:', currentChatFriend);
            
            if (currentChatFriend) {
                console.log('üé¨ [CHAT] –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Calls WebSocket –∫:', currentChatFriend);
                callFriend(currentChatFriend);
            } else {
                console.log('‚ùå [CHAT] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');
            }
        }
        
        // –ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –∏–∑ —á–∞—Ç–∞
        function callFriendAudioFromChat() {
            console.log('üéµ [CHAT] –ö–Ω–æ–ø–∫–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞ –Ω–∞–∂–∞—Ç–∞ –≤ —á–∞—Ç–µ');
            console.log('üéµ [CHAT] –¢–µ–∫—É—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:', currentChatFriend);
            
            if (currentChatFriend) {
                console.log('üéµ [CHAT] –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Calls WebSocket –∫:', currentChatFriend);
                callFriendAudio(currentChatFriend);
            } else {
                console.log('‚ùå [CHAT] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞');
            }
        }
        
        // ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–ï–î–ò–ù–ï–ù–ò–Ø =====
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–æ–º
        let connectionCheckInterval = null;
        let lastReconnectAttempt = 0;
        const RECONNECT_DELAY = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        let selectedMessages = new Set(); // Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è timestamp –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        let deleteCommandQueue = {}; // –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let deleteRetryAttempts = {}; // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        function startConnectionMonitoring() {
            if (connectionCheckInterval) return;
            
            connectionCheckInterval = setInterval(() => {
                if (currentUser.id) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Chat WebSocket
                    if (!window.chatWs || window.chatWs.readyState !== WebSocket.OPEN) {
                        const now = Date.now();
                        if (now - lastReconnectAttempt > RECONNECT_DELAY) {
                            console.log('üîÑ Chat WebSocket –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
                            lastReconnectAttempt = now;
                            connectChatWebSocket();
                        } else {
                            console.log('‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
                        }
                    }
                }
            }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        }
        
        function stopConnectionMonitoring() {
            if (connectionCheckInterval) {
                clearInterval(connectionCheckInterval);
                connectionCheckInterval = null;
            }
        }
        
        // ===== PING-PONG –ú–û–ù–ò–¢–û–†–ò–ù–ì =====
        
        // –ó–∞–ø—É—Å–∫ ping-–ø–æ–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        function startPingPongMonitoring(friendUsername) {
            if (pingIntervals[friendUsername]) {
                clearInterval(pingIntervals[friendUsername]);
            }
            
            let pingAttempts = 0;
            const maxPingAttempts = 12; // 12 –ø–æ–ø—ã—Ç–æ–∫ (1 —á–∞—Å / 5 –º–∏–Ω—É—Ç)
            
            pingIntervals[friendUsername] = setInterval(() => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
                if (messageQueues[friendUsername] && messageQueues[friendUsername].length > 0) {
                    pingAttempts++;
                    console.log(`üì° Ping –ø–æ–ø—ã—Ç–∫–∞ ${pingAttempts}/${maxPingAttempts} –∫ ${friendUsername}`);
                    sendP2PPing(friendUsername);
                    
                    // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ - –ø–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
                    if (pingAttempts >= maxPingAttempts) {
                        console.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ping –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è ${friendUsername}, –ø–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ`);
                        markMessagesAsFailed(friendUsername);
                        stopPingPongMonitoring(friendUsername);
                    }
                } else {
                    // –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ping
                    stopPingPongMonitoring(friendUsername);
                }
            }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        }
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ping-–ø–æ–Ω–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        function stopPingPongMonitoring(friendUsername) {
            if (pingIntervals[friendUsername]) {
                clearInterval(pingIntervals[friendUsername]);
                delete pingIntervals[friendUsername];
            }
        }
        
        
        // –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
        function markMessagesAsFailed(friendUsername) {
            if (messageQueues[friendUsername]) {
                console.log(`‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –ø–æ—Ç–µ—Ä—è–Ω–æ, –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ ${messageQueues[friendUsername].length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
                // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                messageQueues[friendUsername] = [];
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ P2P ping
        function sendP2PPing(friendUsername) {
            if (p2pConnections[friendUsername] && p2pConnections[friendUsername].status === 'connected') {
                const success = sendP2PMessage(friendUsername, {
                    type: 'ping',
                    to: friendUsername,
                    timestamp: Date.now()
                });
                
                if (!success) {
                    console.log(`Ping –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${friendUsername}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ`);
                    if (p2pConnections[friendUsername]) {
                        p2pConnections[friendUsername].status = 'disconnected';
                    }
                }
            }
        }
        
        // ===== –°–ò–°–¢–ï–ú–ê –û–ß–ï–†–ï–î–ï–ô =====
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        function addMessageToQueue(friendUsername, message, timestamp, type) {
            if (!messageQueues[friendUsername]) {
                messageQueues[friendUsername] = [];
            }
            
            messageQueues[friendUsername].push({
                message: message,
                timestamp: timestamp,
                type: type,
                retries: 0,
                maxRetries: P2P_CONFIG.maxRetries
            });
            
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${friendUsername}`);
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        function addDeleteCommandToQueue(friendUsername, timestamp) {
            if (!messageQueues[friendUsername]) {
                messageQueues[friendUsername] = [];
            }
            
            messageQueues[friendUsername].push({
                type: 'delete_message',
                timestamp: timestamp,
                retries: 0,
                maxRetries: P2P_CONFIG.maxRetries
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –≤ localStorage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
            saveDeleteCommandToStorage(friendUsername, timestamp);
            
            console.log(`üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${friendUsername}:`, {
                timestamp: timestamp
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –≤ localStorage
        function saveDeleteCommandToStorage(friendUsername, timestamp) {
            const deleteCommandsKey = `delete_commands_${currentUser.id}_${friendUsername}`;
            let deleteCommands = JSON.parse(localStorage.getItem(deleteCommandsKey) || '[]');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è
            deleteCommands.push({
                timestamp: timestamp,
                addedAt: Date.now()
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem(deleteCommandsKey, JSON.stringify(deleteCommands));
            
            console.log(`üíæ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage –¥–ª—è ${friendUsername}:`, {
                timestamp: timestamp,
                totalCommands: deleteCommands.length
            });
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage
        function loadDeleteCommandsFromStorage(friendUsername) {
            const deleteCommandsKey = `delete_commands_${currentUser.id}_${friendUsername}`;
            const deleteCommands = JSON.parse(localStorage.getItem(deleteCommandsKey) || '[]');
            
            console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${deleteCommands.length} –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage –¥–ª—è ${friendUsername}`);
            
            return deleteCommands;
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage
        function clearDeleteCommandsFromStorage(friendUsername) {
            const deleteCommandsKey = `delete_commands_${currentUser.id}_${friendUsername}`;
            localStorage.removeItem(deleteCommandsKey);
            
            console.log(`üóëÔ∏è –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –∏–∑ localStorage –¥–ª—è ${friendUsername}`);
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
        function applyDeleteCommandsFromQueue(friendUsername, messages) {
            console.log(`üîç applyDeleteCommandsFromQueue –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ${friendUsername}:`, {
                messagesCount: messages.length,
                messageQueues: messageQueues[friendUsername]?.length || 0
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            let deleteCommands = [];
            if (messageQueues[friendUsername] && messageQueues[friendUsername].length > 0) {
                deleteCommands = messageQueues[friendUsername].filter(cmd => cmd.type === 'delete_message');
                console.log(`üîç –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏:`, deleteCommands);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage
            const storedDeleteCommands = loadDeleteCommandsFromStorage(friendUsername);
            console.log(`üîç –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage:`, storedDeleteCommands);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ localStorage
            const allDeleteCommands = [
                ...deleteCommands.map(cmd => cmd.timestamp),
                ...storedDeleteCommands.map(cmd => cmd.timestamp)
            ];
            
            console.log(`üîç –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è:`, allDeleteCommands);
            
            if (allDeleteCommands.length === 0) {
                console.log(`üîç –ù–µ—Ç –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${friendUsername}`);
                return messages;
            }
            
            console.log(`üóëÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º ${allDeleteCommands.length} –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è (${deleteCommands.length} –∏–∑ –æ—á–µ—Ä–µ–¥–∏, ${storedDeleteCommands.length} –∏–∑ localStorage) –¥–ª—è ${friendUsername}`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            const filteredMessages = messages.filter(message => {
                const shouldDelete = allDeleteCommands.includes(message.timestamp);
                if (shouldDelete) {
                    console.log(`üóëÔ∏è –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.timestamp} –∏–∑-–∑–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è`);
                }
                return !shouldDelete;
            });
            
            console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${messages.length}`);
            
            return filteredMessages;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        function sendQueuedMessages(friendUsername) {
            if (messageQueues[friendUsername] && messageQueues[friendUsername].length > 0) {
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${messageQueues[friendUsername].length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è ${friendUsername}`);
                
                messageQueues[friendUsername].forEach(queuedMessage => {
                    let success = false;
                    
                    if (queuedMessage.type === 'delete_message') {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è
                        success = sendP2PMessage(friendUsername, {
                            type: 'delete_message',
                            to: friendUsername,
                            data: {
                                timestamp: queuedMessage.timestamp,
                                from: currentUser.id
                            }
                        });
                        
                        if (success) {
                            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ ${friendUsername}`);
                            
                            // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                            const deleteCommandsKey = `delete_commands_${currentUser.id}_${friendUsername}`;
                            let storedDeleteCommands = JSON.parse(localStorage.getItem(deleteCommandsKey) || '[]');
                            storedDeleteCommands = storedDeleteCommands.filter(cmd => cmd.timestamp !== queuedMessage.timestamp);
                            localStorage.setItem(deleteCommandsKey, JSON.stringify(storedDeleteCommands));
                            
                            console.log(`üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è ${queuedMessage.timestamp} –æ—á–∏—â–µ–Ω–∞ –∏–∑ localStorage –¥–ª—è ${friendUsername}`);
                        }
                    } else {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        success = sendP2PMessage(friendUsername, {
                            type: 'chat_message',
                            to: friendUsername,
                            data: {
                                message: queuedMessage.message,
                                from: currentUser.id,
                                timestamp: queuedMessage.timestamp,
                                type: queuedMessage.type
                            }
                        });
                        
                        if (success) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "sent" –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                            updateMessageStatusInUI(queuedMessage.timestamp, 'sent');
                            updateMessageStatusInDB(friendUsername, queuedMessage.timestamp, 'sent');
                            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ ${friendUsername}`);
                        }
                    }
                    
                    if (success) {
                        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                        const index = messageQueues[friendUsername].indexOf(queuedMessage);
                        if (index > -1) {
                            messageQueues[friendUsername].splice(index, 1);
                        }
                    } else {
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                        queuedMessage.retries++;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                        if (queuedMessage.retries >= queuedMessage.maxRetries) {
                            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${friendUsername} –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ ${queuedMessage.maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
                            
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "cancelled"
                            updateMessageStatusInUI(queuedMessage.timestamp, 'cancelled');
                            updateMessageStatusInDB(friendUsername, queuedMessage.timestamp, 'cancelled');
                            
                            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                            const index = messageQueues[friendUsername].indexOf(queuedMessage);
                            if (index > -1) {
                                messageQueues[friendUsername].splice(index, 1);
                            }
                        }
                    }
                });
            }
        }
        
        // ===== –°–ò–°–¢–ï–ú–ê –¢–ê–ô–ú–ê–£–¢–û–í =====
        
        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        function startMessageTimeout(friendUsername, timestamp) {
            const timeoutId = setTimeout(() => {
                console.log(`–¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${timestamp} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${friendUsername}`);
            }, P2P_CONFIG.retryTimeout);
            
            connectionTimeouts[`${friendUsername}_${timestamp}`] = timeoutId;
        }
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        function clearMessageTimeout(friendUsername, timestamp) {
            const timeoutKey = `${friendUsername}_${timestamp}`;
            if (connectionTimeouts[timeoutKey]) {
                clearTimeout(connectionTimeouts[timeoutKey]);
                delete connectionTimeouts[timeoutKey];
            }
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
        function checkMessageQueues() {
            Object.keys(messageQueues).forEach(friendUsername => {
                if (messageQueues[friendUsername] && messageQueues[friendUsername].length > 0) {
                    // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    if (!p2pConnections[friendUsername] || p2pConnections[friendUsername].status !== 'connected') {
                        establishP2PConnection(friendUsername);
                    }
                }
            });
        }
        
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        let queueMonitoringInterval = null;
        
        function startQueueMonitoring() {
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (queueMonitoringInterval) {
                clearInterval(queueMonitoringInterval);
            }
            
            queueMonitoringInterval = setInterval(checkMessageQueues, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            console.log('üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
        
        function stopQueueMonitoring() {
            if (queueMonitoringInterval) {
                clearInterval(queueMonitoringInterval);
                queueMonitoringInterval = null;
                console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π');
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function sendChatMessage() {
            console.log('üîç sendChatMessage –≤—ã–∑–≤–∞–Ω–∞');
            const messageInput = document.getElementById('chatMessageInput');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
                message: message,
                currentChatFriend: currentChatFriend,
                currentUser: currentUser
            });
            
            const timestamp = Date.now();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–º–æ–¥–∑–∏)
            const hasEmoji = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/u.test(message);
            const messageType = hasEmoji ? 'emoji' : 'text';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
            addChatMessage(message, currentUser.id, timestamp, messageType, false, 'not_sent');
            saveChatMessage(message, currentUser.id, timestamp, messageType);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            const hasP2PConnection = p2pConnections[currentChatFriend] && 
                                  p2pConnections[currentChatFriend].dataChannel && 
                                  p2pConnections[currentChatFriend].dataChannel.readyState === 'open' &&
                                  p2pConnections[currentChatFriend].status === 'connected';
            
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${currentChatFriend}:`, {
                hasConnection: !!p2pConnections[currentChatFriend],
                hasDataChannel: !!(p2pConnections[currentChatFriend] && p2pConnections[currentChatFriend].dataChannel),
                dataChannelState: p2pConnections[currentChatFriend]?.dataChannel?.readyState,
                connectionStatus: p2pConnections[currentChatFriend]?.status,
                isOpen: hasP2PConnection
            });
            
            if (hasP2PConnection) {
                // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
                console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${currentChatFriend} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é`);
                const p2pSuccess = sendP2PMessage(currentChatFriend, {
                    type: 'chat_message',
                    to: currentChatFriend,
                    data: {
                        message: message,
                        from: currentUser.id,
                        timestamp: timestamp,
                        type: messageType
                    }
                });
                
                if (p2pSuccess) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "sent" –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    updateMessageStatusInUI(timestamp, 'sent');
                    updateMessageStatusInDB(currentChatFriend, timestamp, 'sent');
                    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ P2P –∫ ${currentChatFriend}`);
                } else {
                    // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    addMessageToQueue(currentChatFriend, message, timestamp, messageType);
                    console.log(`‚ùå –û—à–∏–±–∫–∞ P2P –æ—Ç–ø—Ä–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${currentChatFriend}`);
                }
            } else {
                // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
                console.log(`üì° P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${currentChatFriend} –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
                addMessageToQueue(currentChatFriend, message, timestamp, messageType);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
                sendP2PSignal('ping', { to: currentChatFriend });
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                startMessageTimeout(currentChatFriend, timestamp);
                
                console.log(`üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${currentChatFriend}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ping`);
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            messageInput.value = '';
        }
        
        // –í—Å—Ç–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        function sendChatEmoji(emoji) {
            const messageInput = document.getElementById('chatMessageInput');
            const currentText = messageInput.value;
            const cursorPosition = messageInput.selectionStart;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            const newText = currentText.slice(0, cursorPosition) + emoji + currentText.slice(cursorPosition);
            messageInput.value = newText;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
            const newCursorPosition = cursorPosition + emoji.length;
            messageInput.setSelectionRange(newCursorPosition, newCursorPosition);
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            messageInput.focus();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏
            document.getElementById('chatEmojiPanel').style.display = 'none';
        }
        
        // –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        function sendEmoji(emoji) {
            sendChatEmoji(emoji);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB
        async function saveChatMessage(message, from, timestamp, type) {
            console.log('üîç saveChatMessage –≤—ã–∑–≤–∞–Ω–∞:', {
                message: message,
                from: from,
                timestamp: timestamp,
                type: type,
                currentChatFriend: currentChatFriend,
                currentUser: currentUser
            });
            
            if (!currentChatFriend) {
                console.error('‚ùå currentChatFriend –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
                return;
            }
            
            if (!currentUser || !currentUser.id) {
                console.error('‚ùå currentUser –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
                return;
            }
            
            try {
                const db = await initMessageDB();
                const chatId = `chat_${currentUser.id}_${currentChatFriend}`;
                
                const messageObj = {
                    text: message,
                    from: from,
                    timestamp: timestamp,
                    type: type || 'text',
                    status: 'not_sent' // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                };
                
                await db.saveMessage(chatId, messageObj);
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB:', messageObj);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB:', error);
                currentUser.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async function saveIncomingMessage(senderUsername, message, from, timestamp, type) {
            console.log('üîç saveIncomingMessage –≤—ã–∑–≤–∞–Ω–∞:', {
                senderUsername: senderUsername,
                message: message,
                from: from,
                timestamp: timestamp,
                type: type,
                currentUser: currentUser
            });
            
            if (!currentUser || !currentUser.id) {
                console.error('‚ùå currentUser –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                return;
            }
            
            try {
                const db = await initMessageDB();
                const chatId = `chat_${currentUser.id}_${senderUsername}`;
                
                const messageObj = {
                    text: message,
                    from: from,
                    timestamp: timestamp,
                    type: type || 'text',
                    status: 'sent' // –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏
                };
                
                await db.saveMessage(chatId, messageObj);
                console.log('‚úÖ –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB:', messageObj);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB:', error);
                currentUser.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            const senderFriend = friendsData.friends.find(f => f.username === senderUsername);
            const senderUserId = senderFriend ? senderFriend.contact_user_id : 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —á–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            const currentChatUserId = getCurrentChatUserId();
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –ù–ï –æ—Ç–∫—Ä—ã—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if (currentChatUserId !== senderUserId) {
                if (!unreadMessages[senderUsername]) {
                    unreadMessages[senderUsername] = 0;
                }
                unreadMessages[senderUsername]++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
                updateUnreadIndicator(senderUsername);
                console.log(`üî¥ –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ ${senderUsername} (ID: ${senderUserId}):`, unreadMessages[senderUsername]);
                console.log(`üîç –¢–µ–∫—É—â–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å ID: ${currentChatUserId}`);
            } else {
                console.log(`‚úÖ –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å ${senderUsername} (ID: ${senderUserId}), —Å—á–µ—Ç—á–∏–∫ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è`);
            }
        }
        
        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        function showChatNotification(senderUsername, message) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (senderUsername === currentUser.id) {
                console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #2c3e50;
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 10000;
                max-width: 300px;
                cursor: pointer;
                animation: slideIn 0.3s ease-out;
            `;
            
            // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const shortMessage = message.length > 50 ? message.substring(0, 50) + '...' : message;
            
            notification.innerHTML = `
                <div style="font-weight: bold; margin-bottom: 5px;">üí¨ ${senderUsername}</div>
                <div style="font-size: 14px; opacity: 0.9;">${shortMessage}</div>
                <div style="font-size: 12px; opacity: 0.7; margin-top: 5px;">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            notification.onclick = () => {
                openChat(senderUsername);
                document.body.removeChild(notification);
            };
            
            document.body.appendChild(notification);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    notification.style.animation = 'slideIn 0.3s ease-out reverse';
                    setTimeout(() => {
                        if (document.body.contains(notification)) {
                            document.body.removeChild(notification);
                        }
                    }, 300);
                }
            }, 5000);
            
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            playNotificationSound();
        }
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        function playNotificationSound() {
            try {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
                
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.2);
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        function updateUnreadIndicator(friendUsername) {
            const friendElement = document.querySelector(`[data-friend="${friendUsername}"]`);
            if (friendElement) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                const oldIndicator = friendElement.querySelector('.unread-indicator');
                if (oldIndicator) {
                    oldIndicator.remove();
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                if (unreadMessages[friendUsername] > 0) {
                    const indicator = document.createElement('span');
                    indicator.className = 'unread-indicator';
                    indicator.style.cssText = `
                        background: #e74c3c;
                        color: white;
                        border-radius: 50%;
                        padding: 2px 6px;
                        font-size: 12px;
                        margin-left: 8px;
                        font-weight: bold;
                    `;
                    indicator.textContent = unreadMessages[friendUsername];
                    friendElement.appendChild(indicator);
                }
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        function loadUnreadMessages() {
            if (!currentUser.id) return;
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥—Ä—É–∑—å—è–º –∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            friendsData.friends.forEach(friend => {
                const chatKey = `chat_${currentUser.id}_${friend.username}`;
                const chatHistory = JSON.parse(localStorage.getItem(chatKey) || '[]');
                
                // –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞ (–Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                const unreadCount = chatHistory.filter(msg => 
                    msg.from === friend.username && 
                    msg.from !== currentUser.id
                ).length;
                
                if (unreadCount > 0) {
                    unreadMessages[friend.username] = unreadCount;
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            updateFriendsList();
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏
        function toggleChatEmojiPanel() {
            const panel = document.getElementById('chatEmojiPanel');
            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
        function handleChatKeyPress(event) {
            if (event.key === 'Enter') {
                sendChatMessage();
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
        function updateChatStatus(message, type) {
            const status = document.getElementById('chatStatus');
            status.textContent = message;
            status.className = `status ${type}`;
            status.style.cssText = `
                padding: 10px 20px;
                background: ${type === 'connected' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#fff3cd'};
                color: ${type === 'connected' ? '#155724' : type === 'error' ? '#721c24' : '#856404'};
                border-bottom: 1px solid ${type === 'connected' ? '#c3e6cb' : type === 'error' ? '#f5c6cb' : '#ffeaa7'};
                font-size: 14px;
            `;
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ IndexedDB —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        async function loadChatHistory(friendUsername) {
            console.log('üîç loadChatHistory –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è:', friendUsername);
            console.log('üîç loadChatHistory - currentChatFriend:', currentChatFriend);
            const chatId = `chat_${currentUser.id}_${friendUsername}`;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏
            unreadMessages[friendUsername] = 0;
            updateUnreadIndicator(friendUsername);
            updateFriendsList();
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            const chatMessages = document.getElementById('chatMessages');
            if (chatMessages) {
                chatMessages.innerHTML = '';
            }
            
            try {
                const db = await initMessageDB();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                const loadingDiv = document.createElement('div');
                loadingDiv.id = 'loadingMessages';
                loadingDiv.style.cssText = `
                    text-align: center;
                    padding: 20px;
                    color: #666;
                    font-style: italic;
                `;
                loadingDiv.innerHTML = '<div>–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...</div>';
                chatMessages.appendChild(loadingDiv);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                const messages = await db.getRecentMessages(chatId, 50);
                console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${chatId}`);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ (—Å—Ç–∞—Ç—É—Å "deleted")
                const filteredMessages = messages.filter(message => {
                    if (message.status === 'deleted') {
                        console.log(`üóëÔ∏è –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.timestamp} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "deleted"`);
                        return false;
                    }
                    return true;
                });
                
                console.log(`üìö –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${filteredMessages.length} –∏–∑ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
                console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${friendUsername}:`, {
                    originalMessages: filteredMessages.length,
                    messageQueues: messageQueues[friendUsername]?.length || 0,
                    localStorage: loadDeleteCommandsFromStorage(friendUsername).length
                });
                
                const finalFilteredMessages = applyDeleteCommandsFromQueue(friendUsername, filteredMessages);
                console.log(`üìö –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è: ${finalFilteredMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
                
                // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                loadingDiv.remove();
                
                if (finalFilteredMessages.length > 0) {
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for (const message of finalFilteredMessages) {
                        addChatMessage(
                            message.text,
                            message.from,
                            message.timestamp,
                            message.type,
                            true, // isFromHistory
                            message.status // –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ IndexedDB
                        );
                    }
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                    setTimeout(() => {
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                        console.log('üìú –ü—Ä–æ–∫—Ä—É—á–µ–Ω–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º');
                    }, 100);
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ"
                    if (messages.length === 50) {
                        addLoadMoreButton(chatId, messages[messages.length - 1].timestamp);
                    }
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
                currentUser.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞', 'error');
            }
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ"
        function addLoadMoreButton(chatId, oldestTimestamp) {
            const chatMessages = document.getElementById('chatMessages');
            const loadMoreDiv = document.createElement('div');
            loadMoreDiv.id = 'loadMoreMessages';
            loadMoreDiv.style.cssText = `
                text-align: center;
                padding: 10px;
                border-top: 1px solid #eee;
            `;
            loadMoreDiv.innerHTML = `
                <button onclick="loadOlderMessages('${chatId}', ${oldestTimestamp})" 
                        style="background: #4CAF50; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                    üìö –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                </button>
            `;
            chatMessages.insertBefore(loadMoreDiv, chatMessages.firstChild);
        }
        
        // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        async function loadOlderMessages(chatId, beforeTimestamp) {
            try {
                const db = await initMessageDB();
                const olderMessages = await db.getOlderMessages(chatId, beforeTimestamp, 50);
                
                if (olderMessages.length > 0) {
                    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞
                    const chatMessages = document.getElementById('chatMessages');
                    const loadMoreDiv = document.getElementById('loadMoreMessages');
                    
                    for (let i = olderMessages.length - 1; i >= 0; i--) {
                        const message = olderMessages[i];
                        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        const messageDiv = document.createElement('div');
                        const isOwn = message.from === currentUser.id;
                        messageDiv.setAttribute('data-timestamp', message.timestamp);
                        messageDiv.style.cssText = `
                            margin: 10px 0;
                            padding: 10px 15px;
                            border-radius: 15px;
                            max-width: 70%;
                            word-wrap: break-word;
                            background: ${isOwn ? '#4CAF50' : '#e0e0e0'};
                            color: ${isOwn ? 'white' : '#333'};
                            margin-left: ${isOwn ? 'auto' : '0'};
                            text-align: ${isOwn ? 'right' : 'left'};
                        `;
                        
                        if (message.type === 'emoji') {
                            const isOnlyEmoji = /^[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]+$/u.test(message.text);
                            if (isOnlyEmoji) {
                                messageDiv.innerHTML = `
                                    <div style="font-size: 24px;">${message.text}</div>
                                    <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(message.timestamp).toLocaleTimeString()}</div>
                                `;
                            } else {
                                messageDiv.innerHTML = `
                                    <div style="font-size: 16px;">${message.text}</div>
                                    <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(message.timestamp).toLocaleTimeString()}</div>
                                `;
                            }
                        } else {
                            messageDiv.innerHTML = `
                                <div>${message.text}</div>
                                <div style="font-size: 11px; opacity: 0.7; margin-top: 5px;">${new Date(message.timestamp).toLocaleTimeString()}</div>
                            `;
                        }
                        
                        chatMessages.insertBefore(messageDiv, loadMoreDiv);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –µ—ë
                    if (olderMessages.length === 50) {
                        loadMoreDiv.querySelector('button').onclick = () => 
                            loadOlderMessages(chatId, olderMessages[0].timestamp);
                    } else {
                        loadMoreDiv.remove();
                    }
                    
                    console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${olderMessages.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${chatId}`);
                } else {
                    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                    const loadMoreDiv = document.getElementById('loadMoreMessages');
                    if (loadMoreDiv) loadMoreDiv.remove();
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                currentUser.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ (—Å—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è)
        async function loadMoreMessages(friendUsername) {
            const chatKey = `chat_${currentUser.id}_${friendUsername}`;
            const chatMessages = document.getElementById('chatMessages');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingDiv = document.getElementById('loadingMessages');
            if (loadingDiv) {
                loadingDiv.innerHTML = '<div>–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞...</div>';
            }
            
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
                const fileMessages = await loadMessagesFromFile(chatKey);
                console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${fileMessages.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ –¥–ª—è ${chatKey}`);
                
                if (fileMessages.length > 0) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞
                    const firstMessage = chatMessages.querySelector('.message');
                    if (firstMessage) {
                        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        await loadMessagesBatch(fileMessages, chatMessages, true);
                    } else {
                        // –ï—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                        await loadMessagesBatch(fileMessages, chatMessages);
                    }
                    
                    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ"
                    const loadMoreBtn = chatMessages.querySelector('button');
                    if (loadMoreBtn) {
                        loadMoreBtn.remove();
                    }
                } else {
                    currentUser.log('üìÅ –°—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ', 'info');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞:', error);
                currentUser.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏', 'error');
            } finally {
                // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                const loadingDiv = document.getElementById('loadingMessages');
                if (loadingDiv) {
                    loadingDiv.remove();
                }
            }
        }
        
        // –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        async function loadMessagesBatch(messages, container, prepend = false) {
            const batchSize = 10;
            let loadedCount = 0;
            
            const loadBatch = () => {
                const endIndex = Math.min(loadedCount + batchSize, messages.length);
                
                for (let i = loadedCount; i < endIndex; i++) {
                    const msg = messages[i];
                    addChatMessage(msg.message, msg.from, msg.timestamp, msg.type, true);
                }
                
                loadedCount = endIndex;
                
                if (loadedCount < messages.length) {
                    setTimeout(loadBatch, 10);
                } else {
                    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loadedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    container.scrollTop = container.scrollHeight;
                }
            };
            
            loadBatch();
        }
        
        // ===== INDEXEDDB –•–†–ê–ù–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô =====
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è IndexedDB
        let messageDB = null;
        let dbInitialized = false;
        const DB_NAME = 'LizaAppDB';
        const DB_VERSION = 1;
        
        // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB
        class MessageDB {
            constructor() {
                this.db = null;
                this.dbName = DB_NAME;
                this.dbVersion = DB_VERSION;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async init() {
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open(this.dbName, this.dbVersion);
                    
                    request.onerror = () => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è IndexedDB:', request.error);
                        reject(request.error);
                    };
                    
                    request.onsuccess = () => {
                        this.db = request.result;
                        console.log('‚úÖ IndexedDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        resolve(this.db);
                    };
                    
                    request.onupgradeneeded = (event) => {
                        const db = event.target.result;
                        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã IndexedDB');
                        
                        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–∞—Ç–æ–≤
                        if (!db.objectStoreNames.contains('chats')) {
                            const chatStore = db.createObjectStore('chats', { keyPath: 'id' });
                            chatStore.createIndex('participants', 'participants', { unique: false });
                            chatStore.createIndex('lastMessage', 'lastMessageTimestamp', { unique: false });
                        }
                        
                        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
                        if (!db.objectStoreNames.contains('messages')) {
                            const messageStore = db.createObjectStore('messages', { keyPath: 'id' });
                            messageStore.createIndex('chatId', 'chatId', { unique: false });
                            messageStore.createIndex('timestamp', 'timestamp', { unique: false });
                            messageStore.createIndex('from', 'from', { unique: false });
                        }
                        
                        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                        if (!db.objectStoreNames.contains('metadata')) {
                            db.createObjectStore('metadata', { keyPath: 'key' });
                        }
                    };
                });
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            async saveMessage(chatId, message) {
                if (!this.db) await this.init();
                
                return new Promise((resolve, reject) => {
                    const transaction = this.db.transaction(['messages', 'chats'], 'readwrite');
                    const messageStore = transaction.objectStore('messages');
                    const chatStore = transaction.objectStore('chats');
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    const messageData = {
                        id: message.id || `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                        chatId: chatId,
                        from: message.from,
                        text: message.text,
                        timestamp: message.timestamp,
                        type: message.type || 'text',
                        status: message.status || 'sent'
                    };
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    const messageRequest = messageStore.put(messageData);
                    messageRequest.onsuccess = () => {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                        const chatData = {
                            id: chatId,
                            participants: chatId.split('_').slice(1),
                            lastMessage: message.text,
                            lastMessageTimestamp: message.timestamp,
                            messageCount: 0 // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                        };
                        
                        const chatRequest = chatStore.put(chatData);
                        chatRequest.onsuccess = () => {
                            console.log('üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB:', messageData.id);
                            resolve(messageData);
                        };
                        chatRequest.onerror = () => reject(chatRequest.error);
                    };
                    messageRequest.onerror = () => reject(messageRequest.error);
                    
                    transaction.onerror = () => reject(transaction.error);
                });
            }
            
            // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
            async clearMessages(chatId) {
                if (!this.db) await this.init();
                
                return new Promise((resolve, reject) => {
                    const transaction = this.db.transaction(['messages'], 'readwrite');
                    const messageStore = transaction.objectStore('messages');
                    const index = messageStore.index('chatId');
                    const request = index.openCursor(IDBKeyRange.only(chatId));
                    
                    request.onsuccess = (event) => {
                        const cursor = event.target.result;
                        if (cursor) {
                            cursor.delete();
                            cursor.continue();
                        } else {
                            console.log(`üóëÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ ${chatId} –æ—á–∏—â–µ–Ω—ã –∏–∑ IndexedDB`);
                            resolve();
                        }
                    };
                    
                    request.onerror = () => reject(request.error);
                    transaction.onerror = () => reject(transaction.error);
                });
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
            async getRecentMessages(chatId, limit = 50) {
                if (!this.db) await this.init();
                
                const transaction = this.db.transaction(['messages'], 'readonly');
                const store = transaction.objectStore('messages');
                const index = store.index('chatId');
                
                return new Promise((resolve, reject) => {
                    const request = index.getAll(chatId);
                    request.onsuccess = () => {
                        const messages = request.result
                            .sort((a, b) => b.timestamp - a.timestamp)
                            .slice(0, limit)
                            .reverse();
                        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${chatId}`);
                        resolve(messages);
                    };
                    request.onerror = () => reject(request.error);
                });
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            async getOlderMessages(chatId, beforeTimestamp, limit = 50) {
                if (!this.db) await this.init();
                
                const transaction = this.db.transaction(['messages'], 'readonly');
                const store = transaction.objectStore('messages');
                const index = store.index('chatId');
                
                return new Promise((resolve, reject) => {
                    const request = index.getAll(chatId);
                    request.onsuccess = () => {
                        const messages = request.result
                            .filter(msg => msg.timestamp < beforeTimestamp)
                            .sort((a, b) => b.timestamp - a.timestamp)
                            .slice(0, limit)
                            .reverse();
                        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${chatId}`);
                        resolve(messages);
                    };
                    request.onerror = () => reject(request.error);
                });
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
            async getChatList() {
                if (!this.db) await this.init();
                
                const transaction = this.db.transaction(['chats'], 'readonly');
                const store = transaction.objectStore('chats');
                const index = store.index('lastMessage');
                
                return new Promise((resolve, reject) => {
                    const request = index.getAll();
                    request.onsuccess = () => {
                        const chats = request.result
                            .sort((a, b) => b.lastMessageTimestamp - a.lastMessageTimestamp);
                        console.log(`üí¨ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤`);
                        resolve(chats);
                    };
                    request.onerror = () => reject(request.error);
                });
            }
            
            // –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
            async getMessageCount(chatId) {
                if (!this.db) await this.init();
                
                return new Promise((resolve, reject) => {
                    const transaction = this.db.transaction(['messages'], 'readonly');
                    const store = transaction.objectStore('messages');
                    const index = store.index('chatId');
                    
                    const request = index.count(chatId);
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => reject(request.error);
                    transaction.onerror = () => reject(transaction.error);
                });
            }
            
            // –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            async searchMessages(query, chatId = null) {
                if (!this.db) await this.init();
                
                const transaction = this.db.transaction(['messages'], 'readonly');
                const store = transaction.objectStore('messages');
                const index = store.index('chatId');
                
                return new Promise((resolve, reject) => {
                    const request = chatId ? index.getAll(chatId) : store.getAll();
                    request.onsuccess = () => {
                        const messages = request.result.filter(msg => 
                            msg.text.toLowerCase().includes(query.toLowerCase())
                        );
                        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`);
                        resolve(messages);
                    };
                    request.onerror = () => reject(request.error);
                });
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB
        async function initMessageDB() {
            if (!dbInitialized) {
                messageDB = new MessageDB();
                await messageDB.init();
                dbInitialized = true;
                console.log('‚úÖ IndexedDB –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
                currentUser.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
            }
            return messageDB;
        }
        
        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö localStorage
        function clearOldLocalStorage() {
            const keys = Object.keys(localStorage);
            const chatKeys = keys.filter(key => key.startsWith('chat_'));
            
            chatKeys.forEach(key => {
                localStorage.removeItem(key);
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–ª—é—á: ${key}`);
            });
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            localStorage.removeItem('lizaapp_file_storage');
            localStorage.removeItem('lizaapp_first_run_completed');
            
            console.log('üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ localStorage');
        }
        async function findExistingFile() {
            try {
                if (!('showOpenFilePicker' in window)) {
                    return null;
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª LizaApp
                const [fileHandle] = await window.showOpenFilePicker({
                    types: [{
                        description: '–§–∞–π–ª—ã LizaApp',
                        accept: { 'application/json': ['.json'] }
                    }],
                    excludeAcceptAllOption: false,
                    multiple: false,
                    startIn: 'downloads'
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª LizaApp
                const file = await fileHandle.getFile();
                const content = await file.text();
                let fileData;
                
                try {
                    fileData = JSON.parse(content);
                } catch (e) {
                    return null;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª LizaApp
                if (fileData.metadata && fileData.metadata.appName === 'LizaApp') {
                    return fileHandle;
                }
                
                return null;
            } catch (error) {
                return null;
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        async function createNewFile() {
            try {
                if (!('showSaveFilePicker' in window)) {
                    return null;
                }
                
                // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º (–±–µ–∑ –¥–∞—Ç—ã)
                const fileName = 'lizaapp_messages.json';
                
                const fileHandle = await window.showSaveFilePicker({
                    suggestedName: fileName,
                    startIn: 'downloads',
                    types: [{
                        description: 'JSON —Ñ–∞–π–ª—ã',
                        accept: { 'application/json': ['.json'] }
                    }]
                });
                
                // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                const initialData = {
                    chats: {},
                    metadata: {
                        created: Date.now(),
                        lastUpdated: Date.now(),
                        version: "1.0",
                        appName: "LizaApp",
                        description: "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π LizaApp"
                    }
                };
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ñ–∞–π–ª
                const writable = await fileHandle.createWritable();
                await writable.write(JSON.stringify(initialData, null, 2));
                await writable.close();
                
                return fileHandle;
            } catch (error) {
                return null;
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        async function initializeFileStorage() {
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                let fileHandle = await findExistingFile();
                
                if (fileHandle) {
                    // –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    messageFileHandle = fileHandle;
                    fileStorageEnabled = true;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    localStorage.setItem('lizaapp_file_storage', JSON.stringify({
                        enabled: true,
                        fileName: fileHandle.name,
                        lastUsed: Date.now()
                    }));
                    
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª LizaApp:', fileHandle.name);
                    currentUser.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞', 'success');
                    return true;
                } else {
                    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    fileHandle = await createNewFile();
                    
                    if (fileHandle) {
                        messageFileHandle = fileHandle;
                        fileStorageEnabled = true;
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                        localStorage.setItem('lizaapp_file_storage', JSON.stringify({
                            enabled: true,
                            fileName: fileHandle.name,
                            lastUsed: Date.now()
                        }));
                        
                        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª LizaApp:', fileHandle.name);
                        currentUser.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'warning');
                        return true;
                    } else {
                        // –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
                        fileStorageEnabled = false;
                        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è');
                        currentUser.log('‚ùå –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', 'error');
                        return false;
                    }
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                fileStorageEnabled = false;
                return false;
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
        async function saveMessagesToFile(chatKey, messages) {
            if (!fileStorageEnabled || !messageFileHandle) {
                return false;
            }
            
            try {
                // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
                let fileData = {};
                try {
                    const file = await messageFileHandle.getFile();
                    const content = await file.text();
                    if (content) {
                        fileData = JSON.parse(content);
                    }
                } catch (error) {
                    // –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    fileData = {};
                }
                
                // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: { "chats": { "chatKey": [messages] }, "metadata": {...} }
                if (!fileData.chats) {
                    fileData.chats = {};
                }
                if (!fileData.metadata) {
                    fileData.metadata = {
                        created: Date.now(),
                        lastUpdated: Date.now(),
                        version: "1.0"
                    };
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                if (!fileData.chats[chatKey]) {
                    fileData.chats[chatKey] = [];
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ timestamp)
                const existingTimestamps = new Set(fileData.chats[chatKey].map(msg => msg.timestamp));
                const newMessages = messages.filter(msg => !existingTimestamps.has(msg.timestamp));
                
                fileData.chats[chatKey].push(...newMessages);
                fileData.metadata.lastUpdated = Date.now();
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                fileData.chats[chatKey].sort((a, b) => a.timestamp - b.timestamp);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const writable = await messageFileHandle.createWritable();
                await writable.write(JSON.stringify(fileData, null, 2));
                await writable.close();
                
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${newMessages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª –¥–ª—è ${chatKey}`);
                return true;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª:', error);
                return false;
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        async function loadMessagesFromFile(chatKey) {
            if (!fileStorageEnabled || !messageFileHandle) {
                return [];
            }
            
            try {
                const file = await messageFileHandle.getFile();
                const content = await file.text();
                
                if (!content) {
                    return [];
                }
                
                const fileData = JSON.parse(content);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                if (fileData.chats && fileData.chats[chatKey]) {
                    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fileData.chats[chatKey].length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è ${chatKey}`);
                    return fileData.chats[chatKey];
                }
                
                // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                if (fileData[chatKey]) {
                    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fileData[chatKey].length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞) –¥–ª—è ${chatKey}`);
                    return fileData[chatKey];
                }
                
                return [];
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞:', error);
                return [];
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        function checkFileStorageStatus() {
            const storageInfo = localStorage.getItem('lizaapp_file_storage');
            if (storageInfo) {
                const info = JSON.parse(storageInfo);
                fileStorageEnabled = info.enabled;
                console.log('üìÅ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:', info);
                return info.enabled;
            }
            return false;
        }
        
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        async function toggleFileStorage() {
            if (fileStorageEnabled) {
                // –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
                fileStorageEnabled = false;
                messageFileHandle = null;
                localStorage.removeItem('lizaapp_file_storage');
                
                const btn = document.getElementById('fileStorageBtn');
                btn.textContent = 'üìÅ –§–∞–π–ª—ã';
                btn.style.background = '#2196F3';
                
                currentUser.log('üìÅ –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ', 'info');
            } else {
                // –í–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
                const success = await initializeFileStorage();
                if (success) {
                    const btn = document.getElementById('fileStorageBtn');
                    btn.textContent = '‚úÖ –§–∞–π–ª—ã';
                    btn.style.background = '#4CAF50';
                }
            }
        }
        
        // ===== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø LOCALSTORAGE =====
        
        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        async function cleanupOldMessages() {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ localStorage
            const keys = Object.keys(localStorage);
            const chatKeys = keys.filter(key => key.startsWith('chat_'));
            
            for (const chatKey of chatKeys) {
                const chatHistory = JSON.parse(localStorage.getItem(chatKey) || '[]');
                
                if (chatHistory.length > MAX_LOCALSTORAGE_MESSAGES) {
                    // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                    if (fileStorageEnabled) {
                        const oldMessages = chatHistory.slice(0, -MAX_LOCALSTORAGE_MESSAGES);
                        const recentMessages = chatHistory.slice(-MAX_LOCALSTORAGE_MESSAGES);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                        await saveMessagesToFile(chatKey, oldMessages);
                        
                        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage
                        localStorage.setItem(chatKey, JSON.stringify(recentMessages));
                        
                        console.log(`üìÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${oldMessages.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª –¥–ª—è ${chatKey}`);
                        console.log(`üíæ –û—Å—Ç–∞–≤–ª–µ–Ω–æ ${recentMessages.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ localStorage –¥–ª—è ${chatKey}`);
                    } else {
                        // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
                        const cleanedHistory = chatHistory.slice(-MAX_LOCALSTORAGE_MESSAGES);
                        localStorage.setItem(chatKey, JSON.stringify(cleanedHistory));
                        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${chatHistory.length - cleanedHistory.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${chatKey}`);
                    }
                }
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ localStorage
        function debugLocalStorage() {
            console.log('üîç –û—Ç–ª–∞–¥–∫–∞ localStorage:');
            console.log('üìä –í—Å–µ –∫–ª—é—á–∏ –≤ localStorage:', Object.keys(localStorage));
            
            // –ò—â–µ–º –≤—Å–µ –∫–ª—é—á–∏ —á–∞—Ç–æ–≤
            const chatKeys = Object.keys(localStorage).filter(key => key.startsWith('chat_'));
            console.log('üí¨ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —á–∞—Ç–æ–≤:', chatKeys);
            
            chatKeys.forEach(key => {
                const data = JSON.parse(localStorage.getItem(key) || '[]');
                console.log(`üìö ${key}: ${data.length} —Å–æ–æ–±—â–µ–Ω–∏–π`, data);
            });
            
            // –ò—â–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è
            const deleteKeys = Object.keys(localStorage).filter(key => key.startsWith('delete_commands_'));
            console.log('üóëÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è:', deleteKeys);
            
            deleteKeys.forEach(key => {
                const data = JSON.parse(localStorage.getItem(key) || '[]');
                console.log(`üóëÔ∏è ${key}: ${data.length} –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è`, data);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º unreadMessages
            console.log('üî¥ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', unreadMessages);
        }
        
        // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï P2P –°–û–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò =====
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        function closeP2PConnection(friendUsername) {
            if (p2pConnections[friendUsername]) {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ping-–ø–æ–Ω–≥
                stopPingPongMonitoring(friendUsername);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if (p2pConnections[friendUsername].connection) {
                    p2pConnections[friendUsername].connection.close();
                }
                
                // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                delete p2pConnections[friendUsername];
                
                console.log(`P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –∑–∞–∫—Ä—ã—Ç–æ`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        function shouldMaintainP2PConnection(friendUsername) {
            // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—Å–ª–∏:
            // 1. –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç —Å —ç—Ç–∏–º –¥—Ä—É–≥–æ–º
            // 2. –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞
            // 3. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å)
            const connection = p2pConnections[friendUsername];
            const isRecentlyActive = connection && 
                                   connection.lastActivity && 
                                   (Date.now() - connection.lastActivity) < 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
            
            const shouldMaintain = (currentChatFriend === friendUsername) || 
                   (messageQueues[friendUsername] && messageQueues[friendUsername].length > 0) ||
                   isRecentlyActive;
            
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            if (!shouldMaintain && currentChatFriend === friendUsername) {
                console.log(`‚è∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç`);
                closeChat();
            }
            
            return shouldMaintain;
        }
        
        // –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
        function manageP2PConnections() {
            Object.keys(p2pConnections).forEach(friendUsername => {
                if (!shouldMaintainP2PConnection(friendUsername)) {
                    console.log(`–ó–∞–∫—Ä—ã–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} - –Ω–µ –Ω—É–∂–Ω–æ`);
                    closeP2PConnection(friendUsername);
                }
            });
        }
        
        // ===== UI –ò–ù–î–ò–ö–ê–¢–û–†–´ –°–¢–ê–¢–£–°–ê =====
        
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
        function closeChat() {
            // –£–ø—Ä–∞–≤–ª—è–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
            if (currentChatFriend) {
                if (!shouldMaintainP2PConnection(currentChatFriend)) {
                    closeP2PConnection(currentChatFriend);
                }
            }
            
            document.getElementById('chatContainer').style.display = 'none';
            document.getElementById('chatEmojiPanel').style.display = 'none';
            
            // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º Chat WebSocket - –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º
            // if (window.chatWs) {
            //     window.chatWs.close();
            //     window.chatWs = null;
            // }
            
            currentChatFriend = null;
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        function addMessageToChat(text, from, timestamp, type = 'text') {
            const messagesContainer = document.getElementById('chatMessages');
            const isOwn = from === currentUser.id;
            
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = `
                margin: 10px 0;
                display: flex;
                justify-content: ${isOwn ? 'flex-end' : 'flex-start'};
            `;
            
            const messageBubble = document.createElement('div');
            messageBubble.style.cssText = `
                max-width: 70%;
                padding: 10px 15px;
                border-radius: 15px;
                background: ${isOwn ? '#2196F3' : '#e0e0e0'};
                color: ${isOwn ? 'white' : 'black'};
                word-wrap: break-word;
            `;
            
            if (type === 'emoji') {
                messageBubble.style.fontSize = '24px';
                messageBubble.textContent = text;
            } else {
                messageBubble.textContent = text;
            }
            
            messageDiv.appendChild(messageBubble);
            messagesContainer.appendChild(messageDiv);
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message || !currentChatFriend) return;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            const timestamp = Date.now();
            addMessageToChat(message, currentUser.id, timestamp, 'text');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            if (!chatMessages[currentChatFriend]) {
                chatMessages[currentChatFriend] = [];
            }
            chatMessages[currentChatFriend].push({
                text: message,
                from: currentUser.id,
                timestamp: timestamp,
                type: 'text'
            });
            localStorage.setItem('chatMessages', JSON.stringify(chatMessages));
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ PHP API
            try {
                const response = await fetch('chat-api.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        action: 'send_message',
                        from: currentUser.id,
                        to: currentChatFriend,
                        message: message
                    })
                });

                const result = await response.json();
                if (result.success) {
                    currentUser.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API`, 'success');
                } else {
                    currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.message}`, 'error');
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`, 'error');
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            messageInput.value = '';
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏
        async function sendEmoji(emoji) {
            if (!currentChatFriend) return;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç
            const timestamp = Date.now();
            addMessageToChat(emoji, currentUser.id, timestamp, 'emoji');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            if (!chatMessages[currentChatFriend]) {
                chatMessages[currentChatFriend] = [];
            }
            chatMessages[currentChatFriend].push({
                text: emoji,
                from: currentUser.id,
                timestamp: timestamp,
                type: 'emoji'
            });
            localStorage.setItem('chatMessages', JSON.stringify(chatMessages));
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ PHP API
            try {
                const response = await fetch('chat-api.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        action: 'send_emoji',
                        from: currentUser.id,
                        to: currentChatFriend,
                        emoji: emoji
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    currentUser.log(`‚úÖ –≠–º–æ–¥–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API`, 'success');
                } else {
                    currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–º–æ–¥–∑–∏: ${result.message}`, 'error');
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`, 'error');
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏
            document.getElementById('emojiPanel').style.display = 'none';
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏
        function toggleEmojiPanel() {
            const emojiPanel = document.getElementById('emojiPanel');
            emojiPanel.style.display = emojiPanel.style.display === 'none' ? 'block' : 'none';
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        function handleMessageKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        function handleChatMessage(signal) {
            if (!currentChatFriend || signal.from !== currentChatFriend) return;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            addMessageToChat(signal.data.message, signal.from, signal.data.timestamp, signal.data.type);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            if (!chatMessages[currentChatFriend]) {
                chatMessages[currentChatFriend] = [];
            }
            chatMessages[currentChatFriend].push({
                text: signal.data.message,
                from: signal.from,
                timestamp: signal.data.timestamp,
                type: signal.data.type
            });
            localStorage.setItem('chatMessages', JSON.stringify(chatMessages));
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        function loadChatMessagesFromStorage() {
            const stored = localStorage.getItem('chatMessages');
            if (stored) {
                chatMessages = JSON.parse(stored);
            }
        }
        
        
        // –†–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        async function disconnectCall() {
            currentUser.log('üîå –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'warning');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
            stopCallTimer();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞—É–¥–∏–æ
            resetAudioControls();
            
            if (currentUser.peerConnection) {
                currentUser.peerConnection.close();
                currentUser.peerConnection = null;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º disconnect —Å–∏–≥–Ω–∞–ª
            if (currentUser.targetUser) {
                await sendSignal('disconnect', { reason: 'user_disconnected' });
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
            if (currentUser.localStream) {
                currentUser.localStream.getTracks().forEach(track => track.stop());
                currentUser.localStream = null;
                document.getElementById('localVideo').srcObject = null;
                currentUser.log('üìπ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–∑–µ–π
            restoreFriendButtons();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–∞, –Ω–µ –≤–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            currentUser.state = 'idle';
            currentUser.targetUser = null;
            currentUser.isInitiator = false;
            currentUser.webrtcInitiated = false;
            
            document.getElementById('remoteVideo').srcObject = null;
            
            updateUI();
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
        async function endCall() {
            currentUser.log('üîå –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫', 'warning');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
            stopCallTimer();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞—É–¥–∏–æ
            resetAudioControls();
            
            if (currentUser.peerConnection) {
                currentUser.peerConnection.close();
                currentUser.peerConnection = null;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º disconnect —Å–∏–≥–Ω–∞–ª
            if (currentUser.targetUser) {
                await sendSignal('disconnect', { reason: 'user_disconnected' });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
            currentUser.log('üìû –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏ —á–∞—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                document.getElementById('videoCallContainer').style.display = 'none';
                document.getElementById('audioCallContainer').style.display = 'none';
                document.getElementById('chatContainer').style.display = 'none';
            }, 1500);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
            if (currentUser.localStream) {
                currentUser.localStream.getTracks().forEach(track => track.stop());
                currentUser.localStream = null;
                document.getElementById('localVideo').srcObject = null;
                currentUser.log('üìπ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'info');
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–∑–µ–π
            restoreFriendButtons();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–∞, –Ω–µ –≤–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            currentUser.state = 'idle';
            currentUser.targetUser = null;
            currentUser.isInitiator = false;
            currentUser.webrtcInitiated = false;
            
            document.getElementById('remoteVideo').srcObject = null;
            
            updateUI();
        }
        
        // –°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async function resetUser() {
            if (currentUser.peerConnection) {
                currentUser.peerConnection.close();
                currentUser.peerConnection = null;
            }
            
            if (currentUser.localStream) {
                currentUser.localStream.getTracks().forEach(track => track.stop());
                currentUser.localStream = null;
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            stopQueueMonitoring();
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ ping-–ø–æ–Ω–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            Object.keys(pingIntervals).forEach(friendUsername => {
                clearInterval(pingIntervals[friendUsername]);
                delete pingIntervals[friendUsername];
            });
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (currentUser.callsWs) {
                currentUser.callsWs.close();
                currentUser.callsWs = null;
                currentUser.callsWsConnected = false;
                currentUser.wsUserId = null;
            }
            if (currentUser.chatWs) {
                currentUser.chatWs.close();
                currentUser.chatWs = null;
                currentUser.chatWsConnected = false;
            }
            
            currentUser.state = 'idle';
            currentUser.targetUser = null;
            currentUser.isInitiator = false;
            currentUser.webrtcInitiated = false;
            
            document.getElementById('localVideo').srcObject = null;
            document.getElementById('remoteVideo').srcObject = null;
            
            currentUser.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–±—Ä–æ—à–µ–Ω', 'warning');
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            localStorage.removeItem('userData');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–∑–µ–π
            restoreFriendButtons();
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥—Ä—É–∑–µ–π
            hideFriendsSection();
            
            updateUI();
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            window.location.href = 'login.php';
        }
        
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        function copyLogs() {
            const log = document.getElementById('log').innerText;
            const allLogs = `=== –õ–û–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===\n${log}\n\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–°–¢–ï ===\n–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${new Date().toLocaleString()}\n–°–µ—Ä–≤–µ—Ä: ${CALLS_WEBSOCKET_URL}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUser.id || '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}`;
            
            navigator.clipboard.writeText(allLogs).then(() => {
                alert('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            });
        }
        
        // ===== –°–ò–°–¢–ï–ú–ê –î–†–£–ó–ï–ô =====
        
        // –î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥—Ä—É–∑–µ–π
        let friendsData = {
            friends: [],           // –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            requests: [],          // –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            sentRequests: []       // –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        let incomingCall = {
            isActive: false,
            caller: null,
            offer: null,
            iceCandidates: [],  // –ë—É—Ñ–µ—Ä –¥–ª—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            maxIceCandidates: 10,  // –ú–∞–∫—Å–∏–º—É–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ
            callTimeout: null  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        };
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –¥—Ä—É–∑–µ–π –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        function showFriendsSection() {
            // –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ç–∞–±–∞—Ö –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            loadFriendsData();
        }
        
        // –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é –¥—Ä—É–∑–µ–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        function hideFriendsSection() {
            // –°–µ–∫—Ü–∏—è –¥—Ä—É–∑–µ–π —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async function searchUser() {
            const username = document.getElementById('searchUsername').value.trim();
            if (!username) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+79991234567)');
                return;
            }
            
            if (username === currentUser.id) {
                alert('–ù–µ–ª—å–∑—è –∏—Å–∫–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (!username.startsWith('+') || username.length < 10) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+79991234567)');
                return;
            }
            
            currentUser.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`, 'info');
            
            try {
                // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
                const response = await fetch(`https://lizaapp.ru/api/search_user.php?username=${encodeURIComponent(username)}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.user) {
                        displaySearchResult(data.user);
                    } else {
                        currentUser.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'error');
                        document.getElementById('searchResults').innerHTML = '<p style="color: red;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>';
                    }
            } else {
                    const errorText = await response.text();
                    currentUser.log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`, 'error');
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`, 'error');
                document.getElementById('searchResults').innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>';
            }
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
        function displaySearchResult(user) {
            const searchResults = document.getElementById('searchResults');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥—Ä—É–≥–æ–º –∏–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
            const isFriend = friendsData.friends.some(f => f.username === user.username);
            const hasRequest = friendsData.requests.some(r => r.username === user.username);
            const hasSentRequest = friendsData.sentRequests.some(r => r.username === user.username);
            
            let buttonHtml = '';
            if (isFriend) {
                buttonHtml = '<span style="color: green;">‚úì –£–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö</span>';
            } else if (hasRequest) {
                buttonHtml = '<span style="color: orange;"><i class="fas fa-inbox"></i> –ï—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å</span>';
            } else if (hasSentRequest) {
                buttonHtml = '<span style="color: blue;"><i class="fas fa-paper-plane"></i> –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>';
                } else {
                buttonHtml = `<button onclick="sendFriendRequest('${user.username}')" class="btn-success btn-small"><i class="fas fa-user-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è</button>`;
            }
            
            searchResults.innerHTML = `
                <div class="user-item">
                    <div class="username"><i class="fas fa-user"></i> ${user.username}</div>
                    <div class="actions">${buttonHtml}</div>
                </div>
            `;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è
        async function sendFriendRequest(username) {
            currentUser.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: ${username}`, 'info');
            
            try {
                const response = await fetch('https://lizaapp.ru/api/send_invitation.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        from_username: currentUser.id,
                        target_username: username
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        currentUser.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${username}`, 'success');
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        friendsData.sentRequests.push({
                            username: username,
                            timestamp: new Date().toISOString()
                        });
                        
                        updateSentRequestsList();
                        document.getElementById('searchResults').innerHTML = '<p style="color: green;">–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</p>';
                } else {
                        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${data.message}`, 'error');
                        alert(data.message);
                    }
                } else {
                    throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'error');
                alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
        async function loadFriendsData() {
            if (!currentUser.id) return;
            
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–∑–µ–π
                const friendsResponse = await fetch(`https://lizaapp.ru/api/get_contacts.php?username=${encodeURIComponent(currentUser.id)}`, {
                    method: 'GET'
                });
                if (friendsResponse.ok) {
                    const friendsResponseData = await friendsResponse.json();
                    if (friendsResponseData.success) {
                        friendsData.friends = friendsResponseData.contacts || [];
                        updateFriendsList();
                    }
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                console.log('üîç currentUser.id –¥–ª—è API:', currentUser.id);
                console.log('üîç –¢–∏–ø currentUser.id:', typeof currentUser.id);
                
                const requestsResponse = await fetch(`https://lizaapp.ru/api/get_requests.php?username=${encodeURIComponent(currentUser.id)}`, {
                    method: 'GET'
                });
                if (requestsResponse.ok) {
                    const requestsResponseData = await requestsResponse.json();
                    console.log('üì• –û—Ç–≤–µ—Ç API –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤:', requestsResponseData);
                    
                    if (requestsResponseData.success) {
                        friendsData.requests = requestsResponseData.requests || [];
                        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', friendsData.requests);
                        updateRequestsList();
                    } else {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:', requestsResponseData.message);
                    }
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤:', requestsResponse.status);
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                const sentRequestsResponse = await fetch(`https://lizaapp.ru/api/get_sent_requests.php?username=${encodeURIComponent(currentUser.id)}`, {
                    method: 'GET'
                });
                if (sentRequestsResponse.ok) {
                    const sentRequestsResponseData = await sentRequestsResponse.json();
                    if (sentRequestsResponseData.success) {
                        friendsData.sentRequests = sentRequestsResponseData.requests || [];
                        updateSentRequestsList();
                    }
                }
                
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: ${error.message}`, 'error');
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
        function updateFriendsList() {
            const friendsList = document.getElementById('friendsList');
            
            if (friendsData.friends.length === 0) {
                friendsList.innerHTML = '<p style="color: #666; text-align: center; margin: 20px 0;">–ù–µ—Ç –¥—Ä—É–∑–µ–π</p>';
                return;
            }
            
            const friendsHtml = friendsData.friends.map(friend => {
                const unreadCount = unreadMessages[friend.username] || 0;
                const unreadIndicator = unreadCount > 0 ? `<span class="unread-indicator" style="background: #e74c3c; color: white; border-radius: 50%; padding: 2px 6px; font-size: 12px; margin-left: 8px; font-weight: bold;">${unreadCount}</span>` : '';
                
                return `
                    <div class="friend-item" data-friend="${friend.username}" onclick="openChat('${friend.username}')" style="cursor: pointer; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='white'">
                        <div class="username" style="position: relative;">
                            <div class="friend-avatar" style="display: inline-block; width: 20px; height: 20px; border-radius: 50%; background: #ddd; margin-right: 8px; vertical-align: middle; text-align: center; line-height: 20px; font-size: 12px; color: #666;" data-user-id="${friend.contact_user_id}">
                                <i class="fas fa-user" style="font-size: 10px;"></i>
                            </div>
                            ${friend.username}${unreadIndicator}
                        </div>
                        <div class="actions" onclick="event.stopPropagation()">
                            <div class="call-buttons">
                                <button onclick="callFriend('${friend.username}')" class="btn-primary btn-small" id="callBtn_${friend.username}"><i class="fas fa-video"></i> –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫</button>
                                <button onclick="callFriendAudio('${friend.username}')" class="btn-secondary btn-small" id="audioCallBtn_${friend.username}"><i class="fas fa-microphone"></i> –ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫</button>
                            </div>
                            <button onclick="endCall()" class="btn-danger btn-small" id="disconnectBtn_${friend.username}" style="display: none;"><i class="fas fa-phone-slash"></i> –ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
                        </div>
                    </div>
                `;
            }).join('');
            
            friendsList.innerHTML = friendsHtml;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
            loadFriendsAvatars();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥—Ä—É–∑–µ–π
        async function loadFriendsAvatars() {
            const friendAvatars = document.querySelectorAll('.friend-avatar');
            
            for (let avatarDiv of friendAvatars) {
                const userId = avatarDiv.getAttribute('data-user-id');
                if (!userId) continue;

                try {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const response = await fetch(`avtr/api/get_user_data.php?user_id=${userId}`);
                    const result = await response.json();
                    
                    if (result.success && result.user.avatar_path) {
                        // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
                        avatarDiv.innerHTML = `<img src="${result.user.avatar_path}" alt="–ê–≤–∞—Ç–∞—Ä" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è user_id', userId, error);
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        function updateRequestsList() {
            console.log('üîÑ updateRequestsList –≤—ã–∑–≤–∞–Ω–∞');
            console.log('üìä friendsData.requests:', friendsData.requests);
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:', friendsData.requests.length);
            
            const requestsList = document.getElementById('requestsList');
            
            if (friendsData.requests.length === 0) {
                console.log('‚ùå –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                requestsList.innerHTML = '<p style="color: #666; text-align: center; margin: 20px 0;">–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</p>';
                return;
            }
            
            const requestsHtml = friendsData.requests.map(request => `
                <div class="request-item">
                    <div class="username">üë§ ${request.username}</div>
                    <div class="actions">
                        <button onclick="acceptFriendRequest('${request.username}')" class="btn-success btn-small">‚úì</button>
                        <button onclick="rejectFriendRequest('${request.username}')" class="btn-danger btn-small">‚úó</button>
                    </div>
                </div>
            `).join('');
            
            requestsList.innerHTML = requestsHtml;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        function updateSentRequestsList() {
            const sentRequestsList = document.getElementById('sentRequestsList');
            
            if (friendsData.sentRequests.length === 0) {
                sentRequestsList.innerHTML = '<p style="color: #666; text-align: center; margin: 20px 0;">–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</p>';
                return;
            }
            
            const sentRequestsHtml = friendsData.sentRequests.map(request => `
                <div class="request-item">
                    <div class="username">üë§ ${request.username}</div>
                    <div class="actions">
                        <span style="color: #666; font-size: 12px;">–û–∂–∏–¥–∞–µ—Ç</span>
                    </div>
                </div>
            `).join('');
            
            sentRequestsList.innerHTML = sentRequestsHtml;
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function loadUserAvatar() {
            const userData = localStorage.getItem('userData');
            if (!userData) return;

            try {
                const data = JSON.parse(userData);
                const userId = data.userId;
                
                if (!userId) return;

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                fetch(`avtr/api/get_user_data.php?user_id=${userId}`)
                    .then(response => response.json())
                    .then(result => {
                        const userAvatar = document.getElementById('userAvatar');
                        if (result.success && result.user.avatar_path) {
                            userAvatar.innerHTML = `<img src="${result.user.avatar_path}" alt="–ê–≤–∞—Ç–∞—Ä" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
                        } else {
                            userAvatar.innerHTML = '<i class="fas fa-user-circle"></i>';
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
                    });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ userData:', error);
            }
        }
        
        // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è
        async function acceptFriendRequest(username) {
            currentUser.log(`‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: ${username}`, 'info');
            
            try {
                const response = await fetch('https://lizaapp.ru/api/accept_invitation.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        accepter_username: currentUser.id,
                        sender_username: username
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        currentUser.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç: ${username}`, 'success');
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        friendsData.requests = friendsData.requests.filter(r => r.username !== username);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–∑—å—è
                        friendsData.friends.push({
                            username: username,
                            timestamp: new Date().toISOString()
                        });
                        
                        updateRequestsList();
                        updateFriendsList();
                } else {
                        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${data.message}`, 'error');
                        alert(data.message);
                    }
                } else {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞');
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'error');
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
        
        // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è
        async function rejectFriendRequest(username) {
            currentUser.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: ${username}`, 'warning');
            
            try {
                const response = await fetch('https://lizaapp.ru/api/reject_invitation.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        rejecter_username: currentUser.id,
                        sender_username: username
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        currentUser.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${username}`, 'success');
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        friendsData.requests = friendsData.requests.filter(r => r.username !== username);
                        
                        updateRequestsList();
                } else {
                        currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${data.message}`, 'error');
                        alert(data.message);
                    }
                } else {
                    throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
                }
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'error');
                alert('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
        
        // –ê—É–¥–∏–æ –∑–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É
        async function callFriendAudio(username) {
            console.log('üéµ [CALLS] ===== –ù–ê–ß–ê–õ–û –ê–£–î–ò–û–ó–í–û–ù–ö–ê =====');
            console.log('üéµ [CALLS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);
            console.log('üéµ [CALLS] Calls WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', currentUser.callsWsConnected);
            console.log('üéµ [CALLS] Calls WebSocket –æ–±—ä–µ–∫—Ç:', !!currentUser.callsWs);
            console.log('üéµ [CALLS] Calls WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', currentUser.callsWs?.readyState);
            
            currentUser.log(`üéµ –ê—É–¥–∏–æ –∑–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É: ${username}`, 'info');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
            const audioCallBtn = document.getElementById(`audioCallBtn_${username}`);
            const disconnectBtn = document.getElementById(`disconnectBtn_${username}`);
            
            if (audioCallBtn) audioCallBtn.style.display = 'none';
            if (disconnectBtn) disconnectBtn.style.display = 'inline-block';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            try {
                currentUser.log(`üéµ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...`, 'info');
                currentUser.localStream = await navigator.mediaDevices.getUserMedia({ 
                    video: false,  // –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ!
                    audio: true 
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∞—É–¥–∏–æ)
                const localVideoStream = createLocalVideoStream(currentUser.localStream);
                const localVideo = document.getElementById('localVideo');
                localVideo.srcObject = localVideoStream;
                
                // –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                localVideo.muted = true;
                localVideo.volume = 0;
                localVideo.setAttribute('muted', 'true');
                
                currentUser.log(`‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω: ${currentUser.localStream.getTracks().length} —Ç—Ä–µ–∫–æ–≤ (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)`, 'success');
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–µ–∫–æ–≤
                currentUser.localStream.getTracks().forEach(track => {
                    currentUser.log(`üéµ –¢—Ä–µ–∫: ${track.kind}, enabled: ${track.enabled}, readyState: ${track.readyState} (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)`, 'info');
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
                document.getElementById('audioCallContainer').style.display = 'block';
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–≤–æ–Ω–∫–æ–≤, –Ω–æ —Å –∞—É–¥–∏–æ —Ç–∏–ø–æ–º
                document.getElementById('targetUserId').value = username;
                startAudioCall();
                
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ: ${error.message}`, 'error');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (audioCallBtn) audioCallBtn.style.display = 'inline-block';
                if (disconnectBtn) disconnectBtn.style.display = 'none';
            }
        }
        
        // –ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É
        async function callFriend(username) {
            console.log('üé¨ [CALLS] ===== –ù–ê–ß–ê–õ–û –í–ò–î–ï–û–ó–í–û–ù–ö–ê =====');
            console.log('üé¨ [CALLS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);
            console.log('üé¨ [CALLS] Calls WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:', currentUser.callsWsConnected);
            console.log('üé¨ [CALLS] Calls WebSocket –æ–±—ä–µ–∫—Ç:', !!currentUser.callsWs);
            console.log('üé¨ [CALLS] Calls WebSocket —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', currentUser.callsWs?.readyState);
            
            currentUser.log(`üìû –ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É: ${username}`, 'info');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
            const callBtn = document.getElementById(`callBtn_${username}`);
            const disconnectBtn = document.getElementById(`disconnectBtn_${username}`);
            
            if (callBtn) callBtn.style.display = 'none';
            if (disconnectBtn) disconnectBtn.style.display = 'inline-block';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            try {
                currentUser.log(`üìπ –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...`, 'info');
                currentUser.localStream = await navigator.mediaDevices.getUserMedia({ 
                    video: true, 
                    audio: true 
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∞—É–¥–∏–æ)
                const localVideoStream = createLocalVideoStream(currentUser.localStream);
                const localVideo = document.getElementById('localVideo');
                localVideo.srcObject = localVideoStream;
                
                // –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                localVideo.muted = true;
                localVideo.volume = 0;
                localVideo.setAttribute('muted', 'true');
                
                currentUser.log(`‚úÖ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${currentUser.localStream.getTracks().length} —Ç—Ä–µ–∫–æ–≤ (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)`, 'success');
                
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
            document.getElementById('videoCallContainer').style.display = 'block';
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
            setTimeout(() => {
                forceSpeakerForVideoCall();
            }, 500);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–µ–∫–æ–≤
                currentUser.localStream.getTracks().forEach(track => {
                    currentUser.log(`üìπ –¢—Ä–µ–∫: ${track.kind}, enabled: ${track.enabled}, readyState: ${track.readyState} (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)`, 'info');
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–≤–æ–Ω–∫–æ–≤
                document.getElementById('targetUserId').value = username;
                startCall();
                
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞: ${error.message}`, 'error');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (callBtn) callBtn.style.display = 'inline-block';
                if (disconnectBtn) disconnectBtn.style.display = 'none';
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
        function restoreFriendButtons() {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–∑–µ–π
            friendsData.friends.forEach(friend => {
                const callBtn = document.getElementById(`callBtn_${friend.username}`);
                const audioCallBtn = document.getElementById(`audioCallBtn_${friend.username}`);
                const disconnectBtn = document.getElementById(`disconnectBtn_${friend.username}`);
                
                if (callBtn) callBtn.style.display = 'inline-block';
                if (audioCallBtn) audioCallBtn.style.display = 'inline-block';
                if (disconnectBtn) disconnectBtn.style.display = 'none';
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
        function restoreUserData() {
            const userData = localStorage.getItem('userData');
            if (userData) {
                try {
                    const data = JSON.parse(userData);
                    if (data.username && data.sessionToken) {
                        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                        document.getElementById('userId').value = data.username;
                        
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        currentUser.id = data.username;
                        currentUser.sessionToken = data.sessionToken;
                        currentUser.userId = data.userId;
                        
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                        const savedChatFriend = localStorage.getItem('currentChatFriend');
                        if (savedChatFriend) {
                            currentChatFriend = savedChatFriend;
                            console.log(`üí¨ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —á–∞—Ç: ${currentChatFriend}`);
                        }
                        
                        
                        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chat WebSocket –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
                        connectChatWebSocket();
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        startConnectionMonitoring();
                        
                        currentUser.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.username}`, 'info');
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                        autoConnect();
                        return true;
                }
            } catch (error) {
                    currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
                    localStorage.removeItem('userData');
                }
            }
            return false;
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        async function autoConnect() {
            currentUser.log(`üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...`, 'info');
            
            currentUser.lastSignalId = Math.floor(Date.now() / 1000) - 60;
            currentUser.state = 'idle';
            currentUser.targetUser = null;
            currentUser.isInitiator = false;
            currentUser.webrtcInitiated = false;
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞–º
            try {
                await connectCallsWebSocket();
                } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: ${error.message}`, 'error');
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateUI();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥—Ä—É–∑–µ–π
            showFriendsSection();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ localStorage
            loadChatMessagesFromStorage();
            
            currentUser.log(`üìπ –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ`, 'info');
            
            currentUser.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${currentUser.id} –≥–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º`, 'success');
        }
        
        // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤
        function switchTab(tabName) {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
            document.querySelectorAll('.tab-panel').forEach(panel => panel.style.display = 'none');
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
            event.target.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å
            if (tabName === 'friends') {
                document.getElementById('friendsTab').style.display = 'block';
                loadFriendsData();
            } else if (tabName === 'requests') {
                document.getElementById('requestsTab').style.display = 'block';
                loadFriendsData();
            } else if (tabName === 'invitations') {
                document.getElementById('invitationsTab').style.display = 'block';
                loadFriendsData();
            }
        }


        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', async function() {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexedDB
            await initMessageDB();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            initDeleteSystem();
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ localStorage
            clearOldLocalStorage();
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!restoreUserData()) {
                currentUser.log('üîê –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'info');
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                loadUnreadMessages();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–µ–π
                startQueueMonitoring();
                
                // –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ currentChatFriend –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:`, currentChatFriend);
                if (currentChatFriend) {
                    console.log(`üîç –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è ${currentChatFriend}`);
                    loadChatHistory(currentChatFriend);
                } else {
                    console.log(`üîç currentChatFriend –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
                }
            }
        });
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        function showFileStoragePermissionModal() {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.createElement('div');
            modal.id = 'fileStorageModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
            `;
            
            modal.innerHTML = `
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 15px;
                    max-width: 500px;
                    text-align: center;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                ">
                    <div style="font-size: 48px; margin-bottom: 20px;">üìÅ</div>
                    <h2 style="margin: 0 0 15px 0; color: #333;">–§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
                    <p style="color: #666; line-height: 1.5; margin-bottom: 25px;">
                        –î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.<br><br>
                        <strong>–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ Downloads:</strong><br>
                        ‚Ä¢ <code>lizaapp_messages.json</code><br>
                        ‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ<br>
                        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ<br><br>
                        <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong><br>
                        ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è<br>
                        ‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π<br>
                        ‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                    </p>
                    <div style="display: flex; gap: 15px; justify-content: center;">
                        <button onclick="acceptFileStorage()" style="
                            background: #4CAF50;
                            color: white;
                            border: none;
                            padding: 12px 24px;
                            border-radius: 8px;
                            cursor: pointer;
                            font-size: 16px;
                            font-weight: bold;
                        ">‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å</button>
                        <button onclick="declineFileStorage()" style="
                            background: #f44336;
                            color: white;
                            border: none;
                            padding: 12px 24px;
                            border-radius: 8px;
                            cursor: pointer;
                            font-size: 16px;
                            font-weight: bold;
                        ">‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è</button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }
        
        // –ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        async function acceptFileStorage() {
            const success = await initializeFileStorage();
            if (success) {
                // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                localStorage.setItem('lizaapp_first_run_completed', 'true');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const modal = document.getElementById('fileStorageModal');
                if (modal) {
                    modal.remove();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                updateFileStorageButton();
                
                currentUser.log('‚úÖ –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
            } else {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                currentUser.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ localStorage', 'warning');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const modal = document.getElementById('fileStorageModal');
                if (modal) {
                    modal.remove();
                }
                
                // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                localStorage.setItem('lizaapp_first_run_completed', 'true');
            }
        }
        
        // –û—Ç–∫–∞–∑ –æ—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        function declineFileStorage() {
            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
            localStorage.setItem('lizaapp_first_run_completed', 'true');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.getElementById('fileStorageModal');
            if (modal) {
                modal.remove();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            updateFileStorageButton();
            
            currentUser.log('‚ö†Ô∏è –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üìÅ –§–∞–π–ª—ã"', 'warning');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        function updateFileStorageButton() {
            const btn = document.getElementById('fileStorageBtn');
            if (btn) {
                if (fileStorageEnabled) {
                    btn.textContent = '‚úÖ –§–∞–π–ª—ã';
                    btn.style.background = '#4CAF50';
                    btn.title = '–§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ';
                } else {
                    btn.textContent = 'üìÅ –§–∞–π–ª—ã';
                    btn.style.background = '#2196F3';
                    btn.title = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è';
                }
            }
        }
        
        // –°–º–µ–Ω–∞ –∫–∞–º–µ—Ä—ã (—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è/–æ—Å–Ω–æ–≤–Ω–∞—è)
        async function switchCamera() {
            if (!currentUser.peerConnection || !currentUser.localStream) {
                currentUser.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã –∫–∞–º–µ—Ä—ã', 'error');
                return;
            }
            
            try {
                currentUser.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã...', 'info');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
                const wasMicrophoneMuted = isVideoMicrophoneMuted;
                console.log('üé§ [SWITCH-CAM] –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º:', wasMicrophoneMuted);
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫
                currentUser.localStream.getTracks().forEach(track => track.stop());
                
                // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å –¥—Ä—É–≥–æ–π –∫–∞–º–µ—Ä—ã
                const newStream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        facingMode: currentUser.isFrontCamera ? 'environment' : 'user'
                    },
                    audio: true
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∫–∞–º–µ—Ä—ã
                currentUser.isFrontCamera = !currentUser.isFrontCamera;
                
                // –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                const videoTrack = newStream.getVideoTracks()[0];
                const audioTrack = newStream.getAudioTracks()[0];
                
                // –ó–∞–º–µ–Ω—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
                const videoSender = currentUser.peerConnection.getSenders().find(s => s.track && s.track.kind === 'video');
                if (videoSender) {
                    await videoSender.replaceTrack(videoTrack);
                }
                
                // –ó–∞–º–µ–Ω—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫
                const audioSender = currentUser.peerConnection.getSenders().find(s => s.track && s.track.kind === 'audio');
                if (audioSender) {
                    await audioSender.replaceTrack(audioTrack);
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                if (wasMicrophoneMuted) {
                    audioTrack.enabled = false;
                    console.log('üîá [SWITCH-CAM] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã');
                } else {
                    audioTrack.enabled = true;
                    console.log('üé§ [SWITCH-CAM] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ, –±–µ–∑ –∞—É–¥–∏–æ)
                const localVideoStream = createLocalVideoStream(newStream);
                const localVideo = document.getElementById('localVideo');
                localVideo.srcObject = localVideoStream;
                
                // –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                localVideo.muted = true;
                localVideo.volume = 0;
                localVideo.setAttribute('muted', 'true');
                
                currentUser.localStream = newStream;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                const micBtn = document.getElementById('videoMicrophoneBtn');
                const micIcon = micBtn.querySelector('i');
                if (wasMicrophoneMuted) {
                    micIcon.className = 'fas fa-microphone-slash';
                    micBtn.classList.add('muted');
                    micBtn.classList.remove('active');
                } else {
                    micIcon.className = 'fas fa-microphone';
                    micBtn.classList.remove('muted');
                    micBtn.classList.add('active');
                }
                
                currentUser.log(`üìπ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ ${currentUser.isFrontCamera ? '—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—É—é' : '–æ—Å–Ω–æ–≤–Ω—É—é'}`, 'success');
                
            } catch (error) {
                currentUser.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã: ${error.message}`, 'error');
            }
        }
