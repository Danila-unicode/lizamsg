// ===== –°–ò–°–¢–ï–ú–ê –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô =====

console.log('üì¶ del.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
let deleteTimeout = null;
let deleteRetryCount = 0;
const MAX_DELETE_RETRIES = 3;
const DELETE_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
function canDeleteGlobally(messages) {
    const now = Date.now();
    const oneHour = 60 * 60 * 1000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–ª–∞–¥—à–µ —á–∞—Å–∞
    const recentMessages = messages.filter(msg => 
        msg.status === 'sent' && (now - msg.timestamp) < oneHour
    );
    
    return recentMessages.length > 0;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function isMessageTooOld(timestamp) {
    const now = Date.now();
    const oneHour = 60 * 60 * 1000;
    return (now - timestamp) > oneHour;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "—É–¥–∞–ª–µ–Ω–æ" –≤ IndexedDB
async function setMessageDeleted(chatId, timestamp, db) {
    try {
        const messages = await db.getRecentMessages(chatId, 1000);
        const messageIndex = messages.findIndex(msg => msg.timestamp === timestamp);
        
        if (messageIndex !== -1) {
            messages[messageIndex].status = 'deleted';
            await db.saveMessage(chatId, messages[messageIndex]);
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è ${timestamp} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "—É–¥–∞–ª–µ–Ω–æ"`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${timestamp} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB`);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ "—É–¥–∞–ª–µ–Ω–æ":', error);
        return false;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ P2P
function sendDeleteCommand(friendUsername, timestamp) {
    if (typeof sendP2PMessage !== 'function') {
        console.log(`‚ùå –§—É–Ω–∫—Ü–∏—è sendP2PMessage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return false;
    }
    
    if (p2pConnections[friendUsername] && 
        p2pConnections[friendUsername].dataChannel && 
        p2pConnections[friendUsername].dataChannel.readyState === 'open' &&
        p2pConnections[friendUsername].status === 'connected') {
        
        // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        const success = sendP2PMessage(friendUsername, {
            type: 'delete_message',
            to: friendUsername,
            data: {
                timestamp: timestamp,
                from: currentUser.id
            }
        });
        
        if (success) {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ ${friendUsername} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${timestamp}`);
            return true;
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∫ ${friendUsername}`);
            return false;
        }
    } else {
        console.log(`‚ùå P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        return false;
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async function establishP2PForDeletion(friendUsername) {
    console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    deleteRetryCount = 0;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    if (typeof sendP2PSignal === 'function') {
        sendP2PSignal('ping', { to: friendUsername });
        console.log(`üì§ Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ ${friendUsername}`);
    } else {
        console.log(`‚ùå –§—É–Ω–∫—Ü–∏—è sendP2PSignal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return Promise.reject(new Error('sendP2PSignal function not available'));
    }
    
    // –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    return new Promise((resolve, reject) => {
        const checkConnection = () => {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername}:`, {
                exists: !!p2pConnections[friendUsername],
                dataChannel: p2pConnections[friendUsername]?.dataChannel?.readyState,
                status: p2pConnections[friendUsername]?.status
            });
            
            if (p2pConnections[friendUsername] && 
                p2pConnections[friendUsername].dataChannel && 
                p2pConnections[friendUsername].dataChannel.readyState === 'open' &&
                p2pConnections[friendUsername].status === 'connected') {
                console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername}`);
                resolve(true);
            } else {
                deleteRetryCount++;
                if (deleteRetryCount < MAX_DELETE_RETRIES) {
                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è... (–ø–æ–ø—ã—Ç–∫–∞ ${deleteRetryCount}/${MAX_DELETE_RETRIES})`);
                    setTimeout(checkConnection, 3000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 3 —Å–µ–∫—É–Ω–¥
                } else {
                    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å ${friendUsername} –∑–∞ ${MAX_DELETE_RETRIES} –ø–æ–ø—ã—Ç–æ–∫`);
                    reject(new Error('P2P connection failed after retries'));
                }
            }
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(checkConnection, 2000);
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
async function performGlobalDeletion(messagesToDelete, friendUsername) {
    console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    try {
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${friendUsername}`;
        
        // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "—É–¥–∞–ª–µ–Ω–æ" —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        console.log(`üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "—É–¥–∞–ª–µ–Ω–æ" —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è`);
        for (const message of messagesToDelete) {
            await setMessageDeleted(chatId, message.timestamp, db);
        }
        
        // 2. –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        messagesToDelete.forEach(message => {
            hideMessageInUI(message.timestamp);
        });
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername}:`, {
            exists: !!p2pConnections[friendUsername],
            dataChannel: p2pConnections[friendUsername]?.dataChannel?.readyState,
            status: p2pConnections[friendUsername]?.status
        });
        
        if (p2pConnections[friendUsername] && 
            p2pConnections[friendUsername].dataChannel && 
            p2pConnections[friendUsername].dataChannel.readyState === 'open' &&
            p2pConnections[friendUsername].status === 'connected') {
            
            // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
            console.log(`‚úÖ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è`);
            
            for (const message of messagesToDelete) {
                const success = sendDeleteCommand(friendUsername, message.timestamp);
                if (!success) {
                    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.timestamp}`);
                }
            }
            
        } else {
            // P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            console.log(`üì° P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${friendUsername} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...`);
            console.log(`üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ P2P:`, {
                exists: !!p2pConnections[friendUsername],
                dataChannel: p2pConnections[friendUsername]?.dataChannel?.readyState,
                status: p2pConnections[friendUsername]?.status
            });
            
            try {
                await establishP2PForDeletion(friendUsername);
                
                // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è P2P`);
                for (const message of messagesToDelete) {
                    const success = sendDeleteCommand(friendUsername, message.timestamp);
                    if (!success) {
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.timestamp}`);
                    }
                }
            } catch (error) {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
                showDeleteWarning('–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —É –≤–∞—Å.');
            }
        }
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        // setTimeout(() => {
        //     console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥`);
        //     loadChatHistory(friendUsername);
        // }, 5000);
        
        console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
async function handleDeleteCommand(timestamp, fromUsername) {
    console.log(`üóëÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${timestamp} –æ—Ç ${fromUsername}`);
    
    try {
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${fromUsername}`;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "—É–¥–∞–ª–µ–Ω–æ" —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const success = await setMessageDeleted(chatId, timestamp, db);
        
        if (success) {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI, –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç
            if (currentChatFriend === fromUsername) {
                hideMessageInUI(timestamp);
            }
            
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${timestamp} —É–¥–∞–ª–µ–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç ${fromUsername}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            // setTimeout(() => {
            //     console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥`);
            //     loadChatHistory(fromUsername);
            // }, 5000);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
function showDeleteWarning(message) {
    const warningDiv = document.createElement('div');
    warningDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ff9800;
        color: white;
        padding: 15px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 10000;
        max-width: 300px;
    `;
    warningDiv.textContent = message;
    
    document.body.appendChild(warningDiv);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (warningDiv.parentNode) {
            warningDiv.parentNode.removeChild(warningDiv);
        }
    }, 5000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
function checkMessageAgeAndShowWarning(messages) {
    const now = Date.now();
    const oneHour = 60 * 60 * 1000;
    
    const oldMessages = messages.filter(msg => 
        msg.status === 'sent' && (now - msg.timestamp) > oneHour
    );
    
    if (oldMessages.length > 0) {
        showDeleteWarning(`–£–¥–∞–ª–µ–Ω–∏–µ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è ${oldMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π - –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)`);
        return false;
    }
    
    return true;
}

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
async function performLocalDeletion(messagesToDelete, friendUsername) {
    console.log(`üóëÔ∏è performLocalDeletion –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ${friendUsername}`);
    console.log(`üîç –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`, messagesToDelete);
    
    try {
        const db = await initMessageDB();
        const chatId = `chat_${currentUser.id}_${friendUsername}`;
        const messages = await db.getRecentMessages(chatId, 1000);
        
        console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ IndexedDB –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è`);
        console.log(`üîç –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ IndexedDB:`, messages);
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –º–µ–Ω—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å –Ω–∞ "deleted"
        const messagesToDeleteLocal = [];
        const messagesToKeep = [];
        
        for (const message of messages) {
            const shouldDelete = messagesToDelete.some(toDelete => toDelete.timestamp === message.timestamp);
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.timestamp}: shouldDelete = ${shouldDelete}`);
            
            if (shouldDelete) {
                // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "deleted" –≤–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                console.log(`üóëÔ∏è –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è ${message.timestamp} —Å "${message.status}" –Ω–∞ "deleted"`);
                message.status = 'deleted';
                messagesToDeleteLocal.push(message);
            } else {
                messagesToKeep.push(message);
            }
        }
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${messagesToDeleteLocal.length} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, ${messagesToKeep.length} –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º)
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${messagesToDeleteLocal.length + messagesToKeep.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ IndexedDB`);
        for (const message of [...messagesToDeleteLocal, ...messagesToKeep]) {
            await db.saveMessage(chatId, message);
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.timestamp} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${message.status}"`);
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
        console.log(`üëÅÔ∏è –°–∫—Ä—ã–≤–∞–µ–º ${messagesToDeleteLocal.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ UI`);
        messagesToDeleteLocal.forEach(message => {
            console.log(`üëÅÔ∏è –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.timestamp} –≤ UI`);
            hideMessageInUI(message.timestamp);
        });
        
        console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${messagesToDeleteLocal.length} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        // setTimeout(() => {
        //     console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è`);
        //     loadChatHistory(friendUsername);
        // }, 5000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
window.deleteSystem = {
    canDeleteGlobally,
    isMessageTooOld,
    performGlobalDeletion,
    performLocalDeletion,
    handleDeleteCommand,
    checkMessageAgeAndShowWarning,
    showDeleteWarning
};

console.log('‚úÖ window.deleteSystem —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', Object.keys(window.deleteSystem));
